
control lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ec  080048ec  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f4  080048f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048fc  080048fc  000148fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000018  08004914  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08004914  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fb8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ef  00000000  00000000  00030ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000330f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00033db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018723  00000000  00000000  000349c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d536  00000000  00000000  0004d0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009087a  00000000  00000000  0005a621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eae9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003760  00000000  00000000  000eaef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004898 	.word	0x08004898

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08004898 	.word	0x08004898

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b96e 	b.w	8000f24 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468c      	mov	ip, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8083 	bne.w	8000d76 <__udivmoddi4+0x116>
 8000c70:	428a      	cmp	r2, r1
 8000c72:	4617      	mov	r7, r2
 8000c74:	d947      	bls.n	8000d06 <__udivmoddi4+0xa6>
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	b142      	cbz	r2, 8000c8e <__udivmoddi4+0x2e>
 8000c7c:	f1c2 0020 	rsb	r0, r2, #32
 8000c80:	fa24 f000 	lsr.w	r0, r4, r0
 8000c84:	4091      	lsls	r1, r2
 8000c86:	4097      	lsls	r7, r2
 8000c88:	ea40 0c01 	orr.w	ip, r0, r1
 8000c8c:	4094      	lsls	r4, r2
 8000c8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c92:	0c23      	lsrs	r3, r4, #16
 8000c94:	fbbc f6f8 	udiv	r6, ip, r8
 8000c98:	fa1f fe87 	uxth.w	lr, r7
 8000c9c:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca4:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d909      	bls.n	8000cc0 <__udivmoddi4+0x60>
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb2:	f080 8119 	bcs.w	8000ee8 <__udivmoddi4+0x288>
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	f240 8116 	bls.w	8000ee8 <__udivmoddi4+0x288>
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	443b      	add	r3, r7
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x8c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	f080 8105 	bcs.w	8000eec <__udivmoddi4+0x28c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f240 8102 	bls.w	8000eec <__udivmoddi4+0x28c>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	443c      	add	r4, r7
 8000cec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf0:	eba4 040e 	sub.w	r4, r4, lr
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	b11d      	cbz	r5, 8000d00 <__udivmoddi4+0xa0>
 8000cf8:	40d4      	lsrs	r4, r2
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	b902      	cbnz	r2, 8000d0a <__udivmoddi4+0xaa>
 8000d08:	deff      	udf	#255	; 0xff
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	2a00      	cmp	r2, #0
 8000d10:	d150      	bne.n	8000db4 <__udivmoddi4+0x154>
 8000d12:	1bcb      	subs	r3, r1, r7
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	fa1f f887 	uxth.w	r8, r7
 8000d1c:	2601      	movs	r6, #1
 8000d1e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d22:	0c21      	lsrs	r1, r4, #16
 8000d24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0xe4>
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0xe2>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	f200 80e9 	bhi.w	8000f14 <__udivmoddi4+0x2b4>
 8000d42:	4684      	mov	ip, r0
 8000d44:	1ac9      	subs	r1, r1, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d50:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d54:	fb08 f800 	mul.w	r8, r8, r0
 8000d58:	45a0      	cmp	r8, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x10c>
 8000d5c:	193c      	adds	r4, r7, r4
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x10a>
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	f200 80d9 	bhi.w	8000f1c <__udivmoddi4+0x2bc>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 0408 	sub.w	r4, r4, r8
 8000d70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d74:	e7bf      	b.n	8000cf6 <__udivmoddi4+0x96>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0x12e>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	f000 80b1 	beq.w	8000ee2 <__udivmoddi4+0x282>
 8000d80:	2600      	movs	r6, #0
 8000d82:	e9c5 0100 	strd	r0, r1, [r5]
 8000d86:	4630      	mov	r0, r6
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f683 	clz	r6, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d14a      	bne.n	8000e2c <__udivmoddi4+0x1cc>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0x140>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80b8 	bhi.w	8000f10 <__udivmoddi4+0x2b0>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0103 	sbc.w	r1, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	468c      	mov	ip, r1
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0a8      	beq.n	8000d00 <__udivmoddi4+0xa0>
 8000dae:	e9c5 4c00 	strd	r4, ip, [r5]
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f603 	lsr.w	r6, r0, r3
 8000dbc:	4097      	lsls	r7, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc6:	40d9      	lsrs	r1, r3
 8000dc8:	4330      	orrs	r0, r6
 8000dca:	0c03      	lsrs	r3, r0, #16
 8000dcc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd0:	fa1f f887 	uxth.w	r8, r7
 8000dd4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ddc:	fb06 f108 	mul.w	r1, r6, r8
 8000de0:	4299      	cmp	r1, r3
 8000de2:	fa04 f402 	lsl.w	r4, r4, r2
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x19c>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dee:	f080 808d 	bcs.w	8000f0c <__udivmoddi4+0x2ac>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 808a 	bls.w	8000f0c <__udivmoddi4+0x2ac>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b281      	uxth	r1, r0
 8000e00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb00 f308 	mul.w	r3, r0, r8
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x1c4>
 8000e14:	1879      	adds	r1, r7, r1
 8000e16:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1a:	d273      	bcs.n	8000f04 <__udivmoddi4+0x2a4>
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d971      	bls.n	8000f04 <__udivmoddi4+0x2a4>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4439      	add	r1, r7
 8000e24:	1acb      	subs	r3, r1, r3
 8000e26:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e2a:	e778      	b.n	8000d1e <__udivmoddi4+0xbe>
 8000e2c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e30:	fa03 f406 	lsl.w	r4, r3, r6
 8000e34:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e38:	431c      	orrs	r4, r3
 8000e3a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e42:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e46:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e4a:	431f      	orrs	r7, r3
 8000e4c:	0c3b      	lsrs	r3, r7, #16
 8000e4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e52:	fa1f f884 	uxth.w	r8, r4
 8000e56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e62:	458a      	cmp	sl, r1
 8000e64:	fa02 f206 	lsl.w	r2, r2, r6
 8000e68:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x220>
 8000e6e:	1861      	adds	r1, r4, r1
 8000e70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e74:	d248      	bcs.n	8000f08 <__udivmoddi4+0x2a8>
 8000e76:	458a      	cmp	sl, r1
 8000e78:	d946      	bls.n	8000f08 <__udivmoddi4+0x2a8>
 8000e7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7e:	4421      	add	r1, r4
 8000e80:	eba1 010a 	sub.w	r1, r1, sl
 8000e84:	b2bf      	uxth	r7, r7
 8000e86:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e8a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e92:	fb00 f808 	mul.w	r8, r0, r8
 8000e96:	45b8      	cmp	r8, r7
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x24a>
 8000e9a:	19e7      	adds	r7, r4, r7
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d22e      	bcs.n	8000f00 <__udivmoddi4+0x2a0>
 8000ea2:	45b8      	cmp	r8, r7
 8000ea4:	d92c      	bls.n	8000f00 <__udivmoddi4+0x2a0>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4427      	add	r7, r4
 8000eaa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eae:	eba7 0708 	sub.w	r7, r7, r8
 8000eb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb6:	454f      	cmp	r7, r9
 8000eb8:	46c6      	mov	lr, r8
 8000eba:	4649      	mov	r1, r9
 8000ebc:	d31a      	bcc.n	8000ef4 <__udivmoddi4+0x294>
 8000ebe:	d017      	beq.n	8000ef0 <__udivmoddi4+0x290>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x27a>
 8000ec2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eca:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ece:	40f2      	lsrs	r2, r6
 8000ed0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed4:	40f7      	lsrs	r7, r6
 8000ed6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e70b      	b.n	8000d00 <__udivmoddi4+0xa0>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e9      	b.n	8000cc0 <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fd      	b.n	8000cec <__udivmoddi4+0x8c>
 8000ef0:	4543      	cmp	r3, r8
 8000ef2:	d2e5      	bcs.n	8000ec0 <__udivmoddi4+0x260>
 8000ef4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef8:	eb69 0104 	sbc.w	r1, r9, r4
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7df      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e7d2      	b.n	8000eaa <__udivmoddi4+0x24a>
 8000f04:	4660      	mov	r0, ip
 8000f06:	e78d      	b.n	8000e24 <__udivmoddi4+0x1c4>
 8000f08:	4681      	mov	r9, r0
 8000f0a:	e7b9      	b.n	8000e80 <__udivmoddi4+0x220>
 8000f0c:	4666      	mov	r6, ip
 8000f0e:	e775      	b.n	8000dfc <__udivmoddi4+0x19c>
 8000f10:	4630      	mov	r0, r6
 8000f12:	e74a      	b.n	8000daa <__udivmoddi4+0x14a>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	4439      	add	r1, r7
 8000f1a:	e713      	b.n	8000d44 <__udivmoddi4+0xe4>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	443c      	add	r4, r7
 8000f20:	e724      	b.n	8000d6c <__udivmoddi4+0x10c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <_ZN13kalman_filterC1Ev>:
 *      Author: weera
 */

#include <kalmanfilter.h>

kalman_filter::kalman_filter() {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b0ac      	sub	sp, #176	; 0xb0
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fb4a 	bl	80015cc <_ZN6matrixC1Ev>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	332c      	adds	r3, #44	; 0x2c
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fb45 	bl	80015cc <_ZN6matrixC1Ev>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3358      	adds	r3, #88	; 0x58
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fb40 	bl	80015cc <_ZN6matrixC1Ev>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3384      	adds	r3, #132	; 0x84
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fb3b 	bl	80015cc <_ZN6matrixC1Ev>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	33b0      	adds	r3, #176	; 0xb0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fb36 	bl	80015cc <_ZN6matrixC1Ev>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	33dc      	adds	r3, #220	; 0xdc
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fb31 	bl	80015cc <_ZN6matrixC1Ev>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fb2b 	bl	80015cc <_ZN6matrixC1Ev>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fb25 	bl	80015cc <_ZN6matrixC1Ev>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fb1f 	bl	80015cc <_ZN6matrixC1Ev>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fb19 	bl	80015cc <_ZN6matrixC1Ev>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fb13 	bl	80015cc <_ZN6matrixC1Ev>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fb0d 	bl	80015cc <_ZN6matrixC1Ev>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fb07 	bl	80015cc <_ZN6matrixC1Ev>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fb01 	bl	80015cc <_ZN6matrixC1Ev>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fafb 	bl	80015cc <_ZN6matrixC1Ev>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 faf5 	bl	80015cc <_ZN6matrixC1Ev>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 faef 	bl	80015cc <_ZN6matrixC1Ev>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fae9 	bl	80015cc <_ZN6matrixC1Ev>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fae3 	bl	80015cc <_ZN6matrixC1Ev>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fadd 	bl	80015cc <_ZN6matrixC1Ev>
	matrix buf1(3, 1);
 8001012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001016:	2201      	movs	r2, #1
 8001018:	2103      	movs	r1, #3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fb06 	bl	800162c <_ZN6matrixC1Eii>
	predictX_old = buf1;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8001026:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001032:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001036:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	matrix buf2(3, 3);
 800103a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800103e:	2203      	movs	r2, #3
 8001040:	2103      	movs	r1, #3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 faf2 	bl	800162c <_ZN6matrixC1Eii>
	P_old = buf2;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f503 740f 	add.w	r4, r3, #572	; 0x23c
 800104e:	f107 0558 	add.w	r5, r7, #88	; 0x58
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800105e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float buf_val[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <_ZN13kalman_filterC1Ev+0x184>)
 8001064:	f107 0408 	add.w	r4, r7, #8
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	6023      	str	r3, [r4, #0]
	matrix buf3(3, 3, buf_val);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800107e:	2203      	movs	r2, #3
 8001080:	2103      	movs	r1, #3
 8001082:	f000 fb07 	bl	8001694 <_ZN6matrixC1EiiPf>
	I33=buf3;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 800108c:	f107 0584 	add.w	r5, r7, #132	; 0x84
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001098:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800109c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4618      	mov	r0, r3
 80010a4:	37b0      	adds	r7, #176	; 0xb0
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	080048b0 	.word	0x080048b0

080010b0 <_ZN13kalman_filter7setAtoDE6matrixS0_S0_S0_>:

void kalman_filter::setAtoD(matrix a_in,matrix b_in,matrix c_in,matrix d_in){
 80010b0:	b084      	sub	sp, #16
 80010b2:	b4b0      	push	{r4, r5, r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	f107 001c 	add.w	r0, r7, #28
 80010be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	A=a_in;B=b_in,C=c_in;D=d_in;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	461d      	mov	r5, r3
 80010c6:	f107 041c 	add.w	r4, r7, #28
 80010ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80010e0:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f103 0458 	add.w	r4, r3, #88	; 0x58
 80010fa:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80010fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800110a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8001114:	f107 05a0 	add.w	r5, r7, #160	; 0xa0
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001120:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bcb0      	pop	{r4, r5, r7}
 8001130:	b004      	add	sp, #16
 8001132:	4770      	bx	lr

08001134 <_ZN13kalman_filter6setQGRE6matrixS0_S0_>:
void kalman_filter::setQGR(matrix q_in,matrix g_in,matrix r_in){
 8001134:	b084      	sub	sp, #16
 8001136:	b4b0      	push	{r4, r5, r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	f107 001c 	add.w	r0, r7, #28
 8001142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Q=q_in;G=g_in;R=r_in;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f503 7484 	add.w	r4, r3, #264	; 0x108
 800114c:	f107 051c 	add.w	r5, r7, #28
 8001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8001166:	f107 0548 	add.w	r5, r7, #72	; 0x48
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001172:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8001180:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8001184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bcb0      	pop	{r4, r5, r7}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <_ZN13kalman_filter3runE6matrixS0_>:

void kalman_filter::run(matrix u_in, matrix y_in) {
 80011a0:	b084      	sub	sp, #16
 80011a2:	b5b0      	push	{r4, r5, r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	f107 001c 	add.w	r0, r7, #28
 80011ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	U = u_in;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 80011b8:	f107 051c 	add.w	r5, r7, #28
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Y = y_in;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80011d2:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	doKalman_gain();
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f835 	bl	8001256 <_ZN13kalman_filter13doKalman_gainEv>
	doPredict_y();
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f888 	bl	8001302 <_ZN13kalman_filter11doPredict_yEv>
	doCorrect_p();
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f8c1 	bl	800137a <_ZN13kalman_filter11doCorrect_pEv>
	doCorrect();
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f8f0 	bl	80013de <_ZN13kalman_filter9doCorrectEv>
	// Correct
	doPredict_x();
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f915 	bl	800142e <_ZN13kalman_filter11doPredict_xEv>
	doPredict_p();
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f942 	bl	800148e <_ZN13kalman_filter11doPredict_pEv>
	doResult();
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f99e 	bl	800154c <_ZN13kalman_filter8doResultEv>
	// Predict
	predictX_old = predictX_new;
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f502 7430 	add.w	r4, r2, #704	; 0x2c0
 8001218:	f503 753b 	add.w	r5, r3, #748	; 0x2ec
 800121c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	P_old = P_new;
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f502 740f 	add.w	r4, r2, #572	; 0x23c
 8001234:	f503 751a 	add.w	r5, r3, #616	; 0x268
 8001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001244:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//update
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001252:	b004      	add	sp, #16
 8001254:	4770      	bx	lr

08001256 <_ZN13kalman_filter13doKalman_gainEv>:

void kalman_filter::doKalman_gain(){
 8001256:	b5b0      	push	{r4, r5, r7, lr}
 8001258:	b0c6      	sub	sp, #280	; 0x118
 800125a:	af00      	add	r7, sp, #0
 800125c:	6378      	str	r0, [r7, #52]	; 0x34
matrix C_tra = C.transpose();
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8001264:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fbc2 	bl	80019f4 <_ZN6matrix9transposeEv>
matrix buf2 = ((C*P_old)*C_tra);
 8001270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001272:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 800127c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fafa 	bl	800187a <_ZN6matrixmlERS_>
 8001286:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800128a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800128e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8001292:	4618      	mov	r0, r3
 8001294:	f000 faf1 	bl	800187a <_ZN6matrixmlERS_>
matrix buf2_5=  buf2+R;
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800129e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012a2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fa31 	bl	800170e <_ZN6matrixplERS_>
gainK = (P_old*C_tra).gain(1/(buf2_5.data[0][0]));
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 80012b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012b6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fadd 	bl	800187a <_ZN6matrixmlERS_>
 80012c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80012c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012cc:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80012ce:	463b      	mov	r3, r7
 80012d0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80012d4:	eeb0 0a47 	vmov.f32	s0, s14
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fbcf 	bl	8001a7e <_ZN6matrix4gainEf>
 80012e0:	463b      	mov	r3, r7
 80012e2:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80012e6:	461d      	mov	r5, r3
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80012f8:	bf00      	nop
 80012fa:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80012fe:	46bd      	mov	sp, r7
 8001300:	bdb0      	pop	{r4, r5, r7, pc}

08001302 <_ZN13kalman_filter11doPredict_yEv>:

void kalman_filter::doPredict_y(){
 8001302:	b5b0      	push	{r4, r5, r7, lr}
 8001304:	b0b0      	sub	sp, #192	; 0xc0
 8001306:	af00      	add	r7, sp, #0
 8001308:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = C*predictX_old;
 800130a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130c:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001312:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8001316:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131a:	4618      	mov	r0, r3
 800131c:	f000 faad 	bl	800187a <_ZN6matrixmlERS_>
matrix buf2 = D*U;
 8001320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001322:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8001326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001328:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 800132c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001330:	4618      	mov	r0, r3
 8001332:	f000 faa2 	bl	800187a <_ZN6matrixmlERS_>
errorY = (Y-buf)+buf2;
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800133c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001340:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fa3d 	bl	80017c4 <_ZN6matrixmiERS_>
 800134a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800134c:	463b      	mov	r3, r7
 800134e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001352:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f9d9 	bl	800170e <_ZN6matrixplERS_>
 800135c:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 8001360:	463d      	mov	r5, r7
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800136e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001372:	bf00      	nop
 8001374:	37c0      	adds	r7, #192	; 0xc0
 8001376:	46bd      	mov	sp, r7
 8001378:	bdb0      	pop	{r4, r5, r7, pc}

0800137a <_ZN13kalman_filter11doCorrect_pEv>:

void kalman_filter::doCorrect_p(){
 800137a:	b5b0      	push	{r4, r5, r7, lr}
 800137c:	b0a4      	sub	sp, #144	; 0x90
 800137e:	af00      	add	r7, sp, #0
 8001380:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = gainK*C;
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800138e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fa71 	bl	800187a <_ZN6matrixmlERS_>
P = (I33-buf)*P_old;
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	f503 71f2 	add.w	r1, r3, #484	; 0x1e4
 800139e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fa0c 	bl	80017c4 <_ZN6matrixmiERS_>
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 80013b2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80013b4:	463b      	mov	r3, r7
 80013b6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fa5d 	bl	800187a <_ZN6matrixmlERS_>
 80013c0:	f504 7404 	add.w	r4, r4, #528	; 0x210
 80013c4:	463d      	mov	r5, r7
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//P_old = (I33-(gainK*C))*P_old;
}
 80013d6:	bf00      	nop
 80013d8:	3790      	adds	r7, #144	; 0x90
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdb0      	pop	{r4, r5, r7, pc}

080013de <_ZN13kalman_filter9doCorrectEv>:

void kalman_filter::doCorrect(){
 80013de:	b5b0      	push	{r4, r5, r7, lr}
 80013e0:	b09a      	sub	sp, #104	; 0x68
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6378      	str	r0, [r7, #52]	; 0x34
	matrix buf1 = (gainK*errorY);
 80013e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e8:	f503 719a 	add.w	r1, r3, #308	; 0x134
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 80013f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fa3f 	bl	800187a <_ZN6matrixmlERS_>
predictX = buf1+predictX_old;
 80013fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fe:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8001402:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001404:	463b      	mov	r3, r7
 8001406:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f97f 	bl	800170e <_ZN6matrixplERS_>
 8001410:	f504 7425 	add.w	r4, r4, #660	; 0x294
 8001414:	463d      	mov	r5, r7
 8001416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001426:	bf00      	nop
 8001428:	3768      	adds	r7, #104	; 0x68
 800142a:	46bd      	mov	sp, r7
 800142c:	bdb0      	pop	{r4, r5, r7, pc}

0800142e <_ZN13kalman_filter11doPredict_xEv>:

void kalman_filter::doPredict_x(){
 800142e:	b5b0      	push	{r4, r5, r7, lr}
 8001430:	b0a4      	sub	sp, #144	; 0x90
 8001432:	af00      	add	r7, sp, #0
 8001434:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = B*U;
 8001436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001438:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8001442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fa17 	bl	800187a <_ZN6matrixmlERS_>
predictX_new = (A*predictX)+buf;
 800144c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001450:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8001454:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fa0e 	bl	800187a <_ZN6matrixmlERS_>
 800145e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001460:	463b      	mov	r3, r7
 8001462:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001466:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f94f 	bl	800170e <_ZN6matrixplERS_>
 8001470:	f504 743b 	add.w	r4, r4, #748	; 0x2ec
 8001474:	463d      	mov	r5, r7
 8001476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//predictX_new = (A*predictX)+(B*U);
}
 8001486:	bf00      	nop
 8001488:	3790      	adds	r7, #144	; 0x90
 800148a:	46bd      	mov	sp, r7
 800148c:	bdb0      	pop	{r4, r5, r7, pc}

0800148e <_ZN13kalman_filter11doPredict_pEv>:

void kalman_filter::doPredict_p(){
 800148e:	b5b0      	push	{r4, r5, r7, lr}
 8001490:	b0c6      	sub	sp, #280	; 0x118
 8001492:	af00      	add	r7, sp, #0
 8001494:	6378      	str	r0, [r7, #52]	; 0x34
matrix A_tran = A.transpose();
 8001496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001498:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 faa8 	bl	80019f4 <_ZN6matrix9transposeEv>
matrix G_tran = G.transpose();
 80014a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a6:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 80014aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fa9f 	bl	80019f4 <_ZN6matrix9transposeEv>
matrix buf = (G*Q);
 80014b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b8:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80014c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f9d7 	bl	800187a <_ZN6matrixmlERS_>
buf = buf*G_tran;
 80014cc:	463b      	mov	r3, r7
 80014ce:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80014d2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f9cf 	bl	800187a <_ZN6matrixmlERS_>
 80014dc:	463b      	mov	r3, r7
 80014de:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80014e2:	461d      	mov	r5, r3
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
matrix buf1 = (A*P)*A_tran;
 80014f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80014fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001500:	4618      	mov	r0, r3
 8001502:	f000 f9ba 	bl	800187a <_ZN6matrixmlERS_>
 8001506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800150a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800150e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f9b1 	bl	800187a <_ZN6matrixmlERS_>
P_new = buf1+buf;
 8001518:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800151a:	463b      	mov	r3, r7
 800151c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001520:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f8f2 	bl	800170e <_ZN6matrixplERS_>
 800152a:	463b      	mov	r3, r7
 800152c:	f504 741a 	add.w	r4, r4, #616	; 0x268
 8001530:	461d      	mov	r5, r3
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800153e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//P_new = ((A*P)*A.transpose())+((G*Q)*G.transpose());
}
 8001542:	bf00      	nop
 8001544:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZN13kalman_filter8doResultEv>:

void kalman_filter::doResult(){
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b0a4      	sub	sp, #144	; 0x90
 8001550:	af00      	add	r7, sp, #0
 8001552:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = D*U;
 8001554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001556:	f103 0184 	add.w	r1, r3, #132	; 0x84
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8001560:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f988 	bl	800187a <_ZN6matrixmlERS_>
resultY = (C*predictX)+buf;
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001572:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8001576:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f97d 	bl	800187a <_ZN6matrixmlERS_>
 8001580:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001582:	463b      	mov	r3, r7
 8001584:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001588:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8be 	bl	800170e <_ZN6matrixplERS_>
 8001592:	f504 7451 	add.w	r4, r4, #836	; 0x344
 8001596:	463d      	mov	r5, r7
 8001598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//resultY = (C*predictX)+(D*U);
resultX = predictX;
 80015a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	f502 7446 	add.w	r4, r2, #792	; 0x318
 80015b0:	f503 7525 	add.w	r5, r3, #660	; 0x294
 80015b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80015c4:	bf00      	nop
 80015c6:	3790      	adds	r7, #144	; 0x90
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}

080015cc <_ZN6matrixC1Ev>:
 *      Author: weera
 */

#include <matrix.h>

matrix::matrix() {
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	d_x = 1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
	d_y = 1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 1; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dc19      	bgt.n	800161e <_ZN6matrixC1Ev+0x52>
		for (int j = 0; j < 1; ++j) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dc10      	bgt.n	8001616 <_ZN6matrixC1Ev+0x4a>
			data[i][j] = 0;
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	4413      	add	r3, r2
 8001602:	3302      	adds	r3, #2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 1; ++j) {
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3301      	adds	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	e7eb      	b.n	80015ee <_ZN6matrixC1Ev+0x22>
	for (int i = 0; i < 1; i++) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e7e2      	b.n	80015e4 <_ZN6matrixC1Ev+0x18>
		}
	};
}
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_ZN6matrixC1Eii>:

matrix::matrix(int x, int y) {
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	d_x = x;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	601a      	str	r2, [r3, #0]
	d_y = y;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	429a      	cmp	r2, r3
 800164e:	da1a      	bge.n	8001686 <_ZN6matrixC1Eii+0x5a>
		for (int j = 0; j < y; ++j) {
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	da10      	bge.n	800167e <_ZN6matrixC1Eii+0x52>
			data[i][j] = 0.0;
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4413      	add	r3, r2
 800166a:	3302      	adds	r3, #2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < y; ++j) {
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	3301      	adds	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	e7ea      	b.n	8001654 <_ZN6matrixC1Eii+0x28>
	for (int i = 0; i < x; i++) {
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e7e0      	b.n	8001648 <_ZN6matrixC1Eii+0x1c>
		}
	};
}
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4618      	mov	r0, r3
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_ZN6matrixC1EiiPf>:
matrix::matrix(int x, int y, float *data_in) {
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
	d_x = x;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]
	d_y = y;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	da22      	bge.n	8001700 <_ZN6matrixC1EiiPf+0x6c>
		for (int j = 0; j < y; ++j) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	da18      	bge.n	80016f8 <_ZN6matrixC1EiiPf+0x64>
			data[i][j] = data_in[i * y + j];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fb02 f203 	mul.w	r2, r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4413      	add	r3, r2
 80016e8:	3302      	adds	r3, #2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4403      	add	r3, r0
 80016ee:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < y; ++j) {
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	3301      	adds	r3, #1
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e7e2      	b.n	80016be <_ZN6matrixC1EiiPf+0x2a>
	for (int i = 0; i < x; i++) {
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e7d8      	b.n	80016b2 <_ZN6matrixC1EiiPf+0x1e>
		}

	};
}
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4618      	mov	r0, r3
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_ZN6matrixplERS_>:

matrix matrix::operator+(matrix &in) {
 800170e:	b580      	push	{r7, lr}
 8001710:	b088      	sub	sp, #32
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
	matrix result;
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff ff56 	bl	80015cc <_ZN6matrixC1Ev>
	result.setx(d_x);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 f911 	bl	800194e <_ZN6matrix4setxEi>
	result.sety(d_y);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4619      	mov	r1, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f919 	bl	800196a <_ZN6matrix4setyEi>

	for (int y = 0; y < d_y; y++) {
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	429a      	cmp	r2, r3
 8001744:	da39      	bge.n	80017ba <_ZN6matrixplERS_+0xac>
		for (int x = 0; x < d_x; x++) {
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	429a      	cmp	r2, r3
 8001752:	da2e      	bge.n	80017b2 <_ZN6matrixplERS_+0xa4>
			float total = 0;
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
			total = data[x][y] + in.data[x][y];
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	3302      	adds	r3, #2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	3302      	adds	r3, #2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178e:	edc7 7a05 	vstr	s15, [r7, #20]

			result.data[x][y] = total;
 8001792:	68f9      	ldr	r1, [r7, #12]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	3302      	adds	r3, #2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	601a      	str	r2, [r3, #0]
		for (int x = 0; x < d_x; x++) {
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	e7cb      	b.n	800174a <_ZN6matrixplERS_+0x3c>
	for (int y = 0; y < d_y; y++) {
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e7c0      	b.n	800173c <_ZN6matrixplERS_+0x2e>
			// printf(" = %d\n",total);
		}
	}
	return result;
 80017ba:	bf00      	nop
}
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_ZN6matrixmiERS_>:

matrix matrix::operator-(matrix &in) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
	matrix result;
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff fefb 	bl	80015cc <_ZN6matrixC1Ev>
	result.setx(d_x);
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f8b6 	bl	800194e <_ZN6matrix4setxEi>
	result.sety(d_y);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4619      	mov	r1, r3
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f8be 	bl	800196a <_ZN6matrix4setyEi>

	for (int y = 0; y < d_y; y++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	da39      	bge.n	8001870 <_ZN6matrixmiERS_+0xac>
		for (int x = 0; x < d_x; x++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	429a      	cmp	r2, r3
 8001808:	da2e      	bge.n	8001868 <_ZN6matrixmiERS_+0xa4>
			float total = 0;
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
			total = data[x][y] - in.data[x][y];
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	3302      	adds	r3, #2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	4413      	add	r3, r2
 8001836:	3302      	adds	r3, #2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	edc7 7a05 	vstr	s15, [r7, #20]

			result.data[x][y] = total;
 8001848:	68f9      	ldr	r1, [r7, #12]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	3302      	adds	r3, #2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	601a      	str	r2, [r3, #0]
		for (int x = 0; x < d_x; x++) {
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	3301      	adds	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	e7cb      	b.n	8001800 <_ZN6matrixmiERS_+0x3c>
	for (int y = 0; y < d_y; y++) {
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	3301      	adds	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e7c0      	b.n	80017f2 <_ZN6matrixmiERS_+0x2e>
			// printf(" = %d\n",total);
		}
	}
	return result;
 8001870:	bf00      	nop
}
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_ZN6matrixmlERS_>:

matrix matrix::operator*(matrix &in) {
 800187a:	b580      	push	{r7, lr}
 800187c:	b088      	sub	sp, #32
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	matrix result;
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff fea0 	bl	80015cc <_ZN6matrixC1Ev>
	result.setx(d_x);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f85b 	bl	800194e <_ZN6matrix4setxEi>
	result.sety(in.d_y);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4619      	mov	r1, r3
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f863 	bl	800196a <_ZN6matrix4setyEi>
	for (int m = 0; m < d_x; m++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	da48      	bge.n	8001944 <_ZN6matrixmlERS_+0xca>
		for (int n = 0; n < in.d_y; n++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	429a      	cmp	r2, r3
 80018be:	da3d      	bge.n	800193c <_ZN6matrixmlERS_+0xc2>
			float total = 0;
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
			for (int k = 0; k < d_y; k++) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	da23      	bge.n	800191c <_ZN6matrixmlERS_+0xa2>
				total = total + data[m][k] * in.data[k][n];
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4413      	add	r3, r2
 80018e2:	3302      	adds	r3, #2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4413      	add	r3, r2
 80018fa:	3302      	adds	r3, #2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001908:	ed97 7a05 	vldr	s14, [r7, #20]
 800190c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001910:	edc7 7a05 	vstr	s15, [r7, #20]
			for (int k = 0; k < d_y; k++) {
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	3301      	adds	r3, #1
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	e7d6      	b.n	80018ca <_ZN6matrixmlERS_+0x50>
			}
			result.data[m][n] = total;
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4413      	add	r3, r2
 800192a:	3302      	adds	r3, #2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < in.d_y; n++) {
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	3301      	adds	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e7bc      	b.n	80018b6 <_ZN6matrixmlERS_+0x3c>
	for (int m = 0; m < d_x; m++) {
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	3301      	adds	r3, #1
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	e7b1      	b.n	80018a8 <_ZN6matrixmlERS_+0x2e>
		}
	}
	return result;
 8001944:	bf00      	nop
}
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_ZN6matrix4setxEi>:

	return result;
}
*/

void matrix::setx(int x) {
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
	d_x = x;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_ZN6matrix4setyEi>:
void matrix::sety(int y) {
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	d_y = y;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	605a      	str	r2, [r3, #4]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_ZN6matrix4readEPf>:
void matrix::read(float *data_in) {
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < d_x; i++) {
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	429a      	cmp	r2, r3
 800199c:	da24      	bge.n	80019e8 <_ZN6matrix4readEPf+0x62>
		for (int j = 0; j < d_y; ++j) {
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	da19      	bge.n	80019e0 <_ZN6matrix4readEPf+0x5a>
			data[i][j] = data_in[i * d_y + j];
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	fb02 f203 	mul.w	r2, r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	4413      	add	r3, r2
 80019d0:	3302      	adds	r3, #2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4403      	add	r3, r0
 80019d6:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < d_y; ++j) {
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3301      	adds	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	e7e0      	b.n	80019a2 <_ZN6matrix4readEPf+0x1c>
	for (int i = 0; i < d_x; i++) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e7d5      	b.n	8001994 <_ZN6matrix4readEPf+0xe>
		}
	};
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_ZN6matrix9transposeEv>:
matrix matrix::transpose() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	matrix result;
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fde4 	bl	80015cc <_ZN6matrixC1Ev>
	result.setx(d_y);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff9f 	bl	800194e <_ZN6matrix4setxEi>
	result.sety(d_x);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa7 	bl	800196a <_ZN6matrix4setyEi>
	for (int m = 0; m < d_x; m++) {
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	da24      	bge.n	8001a74 <_ZN6matrix9transposeEv+0x80>
		for (int n = 0; n < d_y; ++n) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	da19      	bge.n	8001a6c <_ZN6matrix9transposeEv+0x78>
			result.data[n][m] = data[m][n];
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4413      	add	r3, r2
 8001a46:	3302      	adds	r3, #2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	6819      	ldr	r1, [r3, #0]
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4403      	add	r3, r0
 8001a62:	6019      	str	r1, [r3, #0]
		for (int n = 0; n < d_y; ++n) {
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	e7e0      	b.n	8001a2e <_ZN6matrix9transposeEv+0x3a>
	for (int m = 0; m < d_x; m++) {
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e7d5      	b.n	8001a20 <_ZN6matrix9transposeEv+0x2c>
		}
	}
	return result;
 8001a74:	bf00      	nop
}
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZN6matrix4gainEf>:
		det_val = 1;

	return det_val;

}
matrix matrix::gain(float in){
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	ed87 0a01 	vstr	s0, [r7, #4]
	matrix result;
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff fd9d 	bl	80015cc <_ZN6matrixC1Ev>
	result.setx(d_x);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff ff58 	bl	800194e <_ZN6matrix4setxEi>
	result.sety(d_y);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f7ff ff60 	bl	800196a <_ZN6matrix4setyEi>
	for (int m = 0; m < d_x; m++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	da2a      	bge.n	8001b0e <_ZN6matrix4gainEf+0x90>
		for (int n = 0; n < d_y; n++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	da1f      	bge.n	8001b06 <_ZN6matrix4gainEf+0x88>
			result.data[m][n] = data[m][n]*in;
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	ed93 7a00 	vldr	s14, [r3]
 8001ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	3302      	adds	r3, #2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < d_y; n++) {
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	3301      	adds	r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	e7da      	b.n	8001abc <_ZN6matrix4gainEf+0x3e>
	for (int m = 0; m < d_x; m++) {
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e7cf      	b.n	8001aae <_ZN6matrix4gainEf+0x30>
		}
	}
	return result;
 8001b0e:	bf00      	nop
}
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b1c:	b0c5      	sub	sp, #276	; 0x114
 8001b1e:	af2a      	add	r7, sp, #168	; 0xa8
	/* USER CODE BEGIN 1 */
	float dt = 0.001;
 8001b20:	4ba9      	ldr	r3, [pc, #676]	; (8001dc8 <main+0x2b0>)
 8001b22:	667b      	str	r3, [r7, #100]	; 0x64
//	dt=1;
	float data_A[9] = { 1, dt, dt * dt / 2, 0, 1, dt, 0, 0, 1 };
 8001b24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b28:	2224      	movs	r2, #36	; 0x24
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 feab 	bl	8004888 <memset>
 8001b32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
 8001b48:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001b4c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b5e:	653b      	str	r3, [r7, #80]	; 0x50
	float data_B[3] = { 0, 0, 0 };
 8001b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
	float data_C[3] = { 1, 0, 0 };
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
	float data_R[1] = { 0.1 };
 8001b7e:	4b93      	ldr	r3, [pc, #588]	; (8001dcc <main+0x2b4>)
 8001b80:	623b      	str	r3, [r7, #32]
	float buf_g = (dt * dt) / 2;
 8001b82:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001b86:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float data_G[3] = { buf_g, dt, 1.0 };
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bae:	61bb      	str	r3, [r7, #24]
	float data_Q[1] = { 0.000001 };
 8001bb0:	4b87      	ldr	r3, [pc, #540]	; (8001dd0 <main+0x2b8>)
 8001bb2:	613b      	str	r3, [r7, #16]
	float data_D[1] = { 0 };
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]

	float data_y[1] = { 0.001 };
 8001bba:	4b83      	ldr	r3, [pc, #524]	; (8001dc8 <main+0x2b0>)
 8001bbc:	60bb      	str	r3, [r7, #8]
	float data_u[1] = { 0 };
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]

	A.read(data_A);
 8001bc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4882      	ldr	r0, [pc, #520]	; (8001dd4 <main+0x2bc>)
 8001bcc:	f7ff fedb 	bl	8001986 <_ZN6matrix4readEPf>
	B.read(data_B);
 8001bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4880      	ldr	r0, [pc, #512]	; (8001dd8 <main+0x2c0>)
 8001bd8:	f7ff fed5 	bl	8001986 <_ZN6matrix4readEPf>
	C.read(data_C);
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	4619      	mov	r1, r3
 8001be2:	487e      	ldr	r0, [pc, #504]	; (8001ddc <main+0x2c4>)
 8001be4:	f7ff fecf 	bl	8001986 <_ZN6matrix4readEPf>
	D.read(data_D);
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	4619      	mov	r1, r3
 8001bee:	487c      	ldr	r0, [pc, #496]	; (8001de0 <main+0x2c8>)
 8001bf0:	f7ff fec9 	bl	8001986 <_ZN6matrix4readEPf>

	G.read(data_G);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	487a      	ldr	r0, [pc, #488]	; (8001de4 <main+0x2cc>)
 8001bfc:	f7ff fec3 	bl	8001986 <_ZN6matrix4readEPf>
	Q.read(data_Q);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4878      	ldr	r0, [pc, #480]	; (8001de8 <main+0x2d0>)
 8001c08:	f7ff febd 	bl	8001986 <_ZN6matrix4readEPf>
	R.read(data_R);
 8001c0c:	f107 0320 	add.w	r3, r7, #32
 8001c10:	4619      	mov	r1, r3
 8001c12:	4876      	ldr	r0, [pc, #472]	; (8001dec <main+0x2d4>)
 8001c14:	f7ff feb7 	bl	8001986 <_ZN6matrix4readEPf>
	u.read(data_u);
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4874      	ldr	r0, [pc, #464]	; (8001df0 <main+0x2d8>)
 8001c1e:	f7ff feb2 	bl	8001986 <_ZN6matrix4readEPf>
	y.read(data_y);
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	4619      	mov	r1, r3
 8001c28:	4872      	ldr	r0, [pc, #456]	; (8001df4 <main+0x2dc>)
 8001c2a:	f7ff feac 	bl	8001986 <_ZN6matrix4readEPf>

	filter.setAtoD(A, B, C, D);
 8001c2e:	4e69      	ldr	r6, [pc, #420]	; (8001dd4 <main+0x2bc>)
 8001c30:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <main+0x2c8>)
 8001c32:	ac1e      	add	r4, sp, #120	; 0x78
 8001c34:	461d      	mov	r5, r3
 8001c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <main+0x2c4>)
 8001c48:	ac13      	add	r4, sp, #76	; 0x4c
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <main+0x2c0>)
 8001c5e:	ac08      	add	r4, sp, #32
 8001c60:	461d      	mov	r5, r3
 8001c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c72:	466d      	mov	r5, sp
 8001c74:	f106 040c 	add.w	r4, r6, #12
 8001c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c84:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c88:	485b      	ldr	r0, [pc, #364]	; (8001df8 <main+0x2e0>)
 8001c8a:	f7ff fa11 	bl	80010b0 <_ZN13kalman_filter7setAtoDE6matrixS0_S0_S0_>
	filter.setQGR(Q, G, R);
 8001c8e:	4e56      	ldr	r6, [pc, #344]	; (8001de8 <main+0x2d0>)
 8001c90:	4b56      	ldr	r3, [pc, #344]	; (8001dec <main+0x2d4>)
 8001c92:	ac13      	add	r4, sp, #76	; 0x4c
 8001c94:	461d      	mov	r5, r3
 8001c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ca6:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <main+0x2cc>)
 8001ca8:	ac08      	add	r4, sp, #32
 8001caa:	461d      	mov	r5, r3
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cbc:	466d      	mov	r5, sp
 8001cbe:	f106 040c 	add.w	r4, r6, #12
 8001cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001cce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001cd2:	4849      	ldr	r0, [pc, #292]	; (8001df8 <main+0x2e0>)
 8001cd4:	f7ff fa2e 	bl	8001134 <_ZN13kalman_filter6setQGRE6matrixS0_S0_>

	timeStamp = 0;
 8001cd8:	4948      	ldr	r1, [pc, #288]	; (8001dfc <main+0x2e4>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ce6:	f000 fe3f 	bl	8002968 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001cea:	f000 f895 	bl	8001e18 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001cee:	f000 fa4f 	bl	8002190 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8001cf2:	f000 fa1f 	bl	8002134 <_ZL19MX_USART2_UART_Initv>
	MX_TIM1_Init();
 8001cf6:	f000 f901 	bl	8001efc <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 8001cfa:	f000 f961 	bl	8001fc0 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 8001cfe:	f000 f9bb 	bl	8002078 <_ZL12MX_TIM3_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001d02:	213c      	movs	r1, #60	; 0x3c
 8001d04:	483e      	ldr	r0, [pc, #248]	; (8001e00 <main+0x2e8>)
 8001d06:	f001 ff1d 	bl	8003b44 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d0a:	483e      	ldr	r0, [pc, #248]	; (8001e04 <main+0x2ec>)
 8001d0c:	f001 fe12 	bl	8003934 <HAL_TIM_Base_Start_IT>
//			filter.run(u, y);
//			pos = filter.resultX.data[0][0];
//			speed = filter.resultX.data[1][0];
//			acc = filter.resultX.data[2][0];
//		}
		DegRel[0] = read_pos();
 8001d10:	f000 fad6 	bl	80022c0 <_Z8read_posv>
 8001d14:	eef0 7a40 	vmov.f32	s15, s0
 8001d18:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <main+0x2f0>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
		if(micros()-timeStamp>=dt)
 8001d1e:	f000 fb7f 	bl	8002420 <_Z6microsv>
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <main+0x2e4>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	ebb0 0802 	subs.w	r8, r0, r2
 8001d2c:	eb61 0903 	sbc.w	r9, r1, r3
 8001d30:	4640      	mov	r0, r8
 8001d32:	4649      	mov	r1, r9
 8001d34:	f7fe ff36 	bl	8000ba4 <__aeabi_ul2f>
 8001d38:	ee07 0a10 	vmov	s14, r0
 8001d3c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	bf94      	ite	ls
 8001d4a:	2301      	movls	r3, #1
 8001d4c:	2300      	movhi	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0dd      	beq.n	8001d10 <main+0x1f8>
		{
			timeStamp = micros();
 8001d54:	f000 fb64 	bl	8002420 <_Z6microsv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4927      	ldr	r1, [pc, #156]	; (8001dfc <main+0x2e4>)
 8001d5e:	e9c1 2300 	strd	r2, r3, [r1]

			y.read(DegRel);
 8001d62:	4929      	ldr	r1, [pc, #164]	; (8001e08 <main+0x2f0>)
 8001d64:	4823      	ldr	r0, [pc, #140]	; (8001df4 <main+0x2dc>)
 8001d66:	f7ff fe0e 	bl	8001986 <_ZN6matrix4readEPf>
			filter.run(u, y);
 8001d6a:	4e21      	ldr	r6, [pc, #132]	; (8001df0 <main+0x2d8>)
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <main+0x2dc>)
 8001d6e:	ac08      	add	r4, sp, #32
 8001d70:	461d      	mov	r5, r3
 8001d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d82:	466d      	mov	r5, sp
 8001d84:	f106 040c 	add.w	r4, r6, #12
 8001d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d98:	4817      	ldr	r0, [pc, #92]	; (8001df8 <main+0x2e0>)
 8001d9a:	f7ff fa01 	bl	80011a0 <_ZN13kalman_filter3runE6matrixS0_>
			pos = filter.resultX.data[0][0];
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <main+0x2e0>)
 8001da0:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8001da4:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <main+0x2f4>)
 8001da6:	6013      	str	r3, [r2, #0]
			speed = filter.resultX.data[1][0]*5;
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <main+0x2e0>)
 8001daa:	edd3 7acb 	vldr	s15, [r3, #812]	; 0x32c
 8001dae:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <main+0x2f8>)
 8001db8:	edc3 7a00 	vstr	s15, [r3]
			acc = filter.resultX.data[2][0];
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <main+0x2e0>)
 8001dbe:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <main+0x2fc>)
 8001dc4:	6013      	str	r3, [r2, #0]
		DegRel[0] = read_pos();
 8001dc6:	e7a3      	b.n	8001d10 <main+0x1f8>
 8001dc8:	3a83126f 	.word	0x3a83126f
 8001dcc:	3dcccccd 	.word	0x3dcccccd
 8001dd0:	358637bd 	.word	0x358637bd
 8001dd4:	20000160 	.word	0x20000160
 8001dd8:	2000018c 	.word	0x2000018c
 8001ddc:	200001b8 	.word	0x200001b8
 8001de0:	200001e4 	.word	0x200001e4
 8001de4:	2000023c 	.word	0x2000023c
 8001de8:	20000268 	.word	0x20000268
 8001dec:	20000210 	.word	0x20000210
 8001df0:	200002c0 	.word	0x200002c0
 8001df4:	20000294 	.word	0x20000294
 8001df8:	20000580 	.word	0x20000580
 8001dfc:	20000150 	.word	0x20000150
 8001e00:	200000c4 	.word	0x200000c4
 8001e04:	2000007c 	.word	0x2000007c
 8001e08:	200008f0 	.word	0x200008f0
 8001e0c:	200008f4 	.word	0x200008f4
 8001e10:	20000908 	.word	0x20000908
 8001e14:	2000090c 	.word	0x2000090c

08001e18 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b094      	sub	sp, #80	; 0x50
 8001e1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2230      	movs	r2, #48	; 0x30
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 fd2e 	bl	8004888 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <_Z18SystemClock_Configv+0xdc>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <_Z18SystemClock_Configv+0xdc>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <_Z18SystemClock_Configv+0xdc>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <_Z18SystemClock_Configv+0xe0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <_Z18SystemClock_Configv+0xe0>)
 8001e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <_Z18SystemClock_Configv+0xe0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e80:	2302      	movs	r3, #2
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001e8c:	2364      	movs	r3, #100	; 0x64
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 f885 	bl	8002fac <HAL_RCC_OscConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 8001eb2:	f000 facf 	bl	8002454 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	2103      	movs	r1, #3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fae2 	bl	800349c <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf14      	ite	ne
 8001ede:	2301      	movne	r3, #1
 8001ee0:	2300      	moveq	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <_Z18SystemClock_Configv+0xd4>
		Error_Handler();
 8001ee8:	f000 fab4 	bl	8002454 <Error_Handler>
	}
}
 8001eec:	bf00      	nop
 8001eee:	3750      	adds	r7, #80	; 0x50
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fcbc 	bl	8004888 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f1a:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <_ZL12MX_TIM1_Initv+0xc0>)
 8001f1c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3071;
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f2c:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001f30:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4812      	ldr	r0, [pc, #72]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f70:	f001 fd42 	bl	80039f8 <HAL_TIM_Encoder_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <_ZL12MX_TIM1_Initv+0x8c>
		Error_Handler();
 8001f84:	f000 fa66 	bl	8002454 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f96:	f002 f9bb 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <_ZL12MX_TIM1_Initv+0xb2>
		Error_Handler();
 8001faa:	f000 fa53 	bl	8002454 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3730      	adds	r7, #48	; 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000034 	.word	0x20000034
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fe6:	2263      	movs	r2, #99	; 0x63
 8001fe8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002004:	481b      	ldr	r0, [pc, #108]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8002006:	f001 fc45 	bl	8003894 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <_ZL12MX_TIM2_Initv+0x5e>
		Error_Handler();
 800201a:	f000 fa1b 	bl	8002454 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002022:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	4619      	mov	r1, r3
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 800202c:	f001 ff40 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <_ZL12MX_TIM2_Initv+0x84>
		Error_Handler();
 8002040:	f000 fa08 	bl	8002454 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	4808      	ldr	r0, [pc, #32]	; (8002074 <_ZL12MX_TIM2_Initv+0xb4>)
 8002052:	f002 f95d 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <_ZL12MX_TIM2_Initv+0xaa>
		Error_Handler();
 8002066:	f000 f9f5 	bl	8002454 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000007c 	.word	0x2000007c

08002078 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	2224      	movs	r2, #36	; 0x24
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f002 fbfe 	bl	8004888 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 8002096:	4a26      	ldr	r2, [pc, #152]	; (8002130 <_ZL12MX_TIM3_Initv+0xb8>)
 8002098:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3071;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 80020a8:	f640 32ff 	movw	r2, #3071	; 0xbff
 80020ac:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c2:	2301      	movs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d2:	2301      	movs	r3, #1
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	4811      	ldr	r0, [pc, #68]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 80020e6:	f001 fc87 	bl	80039f8 <HAL_TIM_Encoder_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf14      	ite	ne
 80020f0:	2301      	movne	r3, #1
 80020f2:	2300      	moveq	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 80020fa:	f000 f9ab 	bl	8002454 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <_ZL12MX_TIM3_Initv+0xb4>)
 800210c:	f002 f900 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8002110:	4603      	mov	r3, r0
			!= HAL_OK) {
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 8002120:	f000 f998 	bl	8002454 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3730      	adds	r7, #48	; 0x30
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200000c4 	.word	0x200000c4
 8002130:	40000400 	.word	0x40000400

08002134 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <_ZL19MX_USART2_UART_Initv+0x58>)
 800213c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800216a:	4807      	ldr	r0, [pc, #28]	; (8002188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800216c:	f002 f952 	bl	8004414 <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8002180:	f000 f968 	bl	8002454 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000010c 	.word	0x2000010c
 800218c:	40004400 	.word	0x40004400

08002190 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a32      	ldr	r2, [pc, #200]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a24      	ldr	r2, [pc, #144]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <_ZL12MX_GPIO_Initv+0xe8>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	2120      	movs	r1, #32
 800221a:	4818      	ldr	r0, [pc, #96]	; (800227c <_ZL12MX_GPIO_Initv+0xec>)
 800221c:	f000 feac 	bl	8002f78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002224:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002226:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800222a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	4812      	ldr	r0, [pc, #72]	; (8002280 <_ZL12MX_GPIO_Initv+0xf0>)
 8002238:	f000 fd1a 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800223c:	2303      	movs	r3, #3
 800223e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002244:	2301      	movs	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	480b      	ldr	r0, [pc, #44]	; (800227c <_ZL12MX_GPIO_Initv+0xec>)
 8002250:	f000 fd0e 	bl	8002c70 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002254:	2320      	movs	r3, #32
 8002256:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4804      	ldr	r0, [pc, #16]	; (800227c <_ZL12MX_GPIO_Initv+0xec>)
 800226c:	f000 fd00 	bl	8002c70 <HAL_GPIO_Init>

}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020800 	.word	0x40020800

08002284 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002284:	b4b0      	push	{r4, r5, r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d109      	bne.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x24>
		_micros += 4294967295;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f112 34ff 	adds.w	r4, r2, #4294967295
 800229e:	f143 0500 	adc.w	r5, r3, #0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80022a4:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bcb0      	pop	{r4, r5, r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2000007c 	.word	0x2000007c
 80022b8:	20000158 	.word	0x20000158
 80022bc:	00000000 	.word	0x00000000

080022c0 <_Z8read_posv>:
float read_pos() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0

	  angle =  ((float)htim3.Instance->CNT)/(1536.0)*(2.0*3.141592);
 80022c4:	4b4e      	ldr	r3, [pc, #312]	; (8002400 <_Z8read_posv+0x140>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d2:	ee17 0a90 	vmov	r0, s15
 80022d6:	f7fe f8e3 	bl	80004a0 <__aeabi_f2d>
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <_Z8read_posv+0x144>)
 80022e0:	f7fe fa60 	bl	80007a4 <__aeabi_ddiv>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	a340      	add	r3, pc, #256	; (adr r3, 80023f0 <_Z8read_posv+0x130>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f92d 	bl	8000550 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fb39 	bl	8000974 <__aeabi_d2f>
 8002302:	4603      	mov	r3, r0
 8002304:	4a40      	ldr	r2, [pc, #256]	; (8002408 <_Z8read_posv+0x148>)
 8002306:	6013      	str	r3, [r2, #0]

	  if(angle_old != -1){
 8002308:	4b40      	ldr	r3, [pc, #256]	; (800240c <_Z8read_posv+0x14c>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002312:	eef4 7a47 	vcmp.f32	s15, s14
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	d048      	beq.n	80023ae <_Z8read_posv+0xee>
		  if(angle-angle_old <= -treshold){
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <_Z8read_posv+0x148>)
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <_Z8read_posv+0x14c>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <_Z8read_posv+0x150>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	eef1 7a67 	vneg.f32	s15, s15
 8002336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d813      	bhi.n	8002368 <_Z8read_posv+0xa8>
			  angle_oppset=angle_oppset+(4*3.141592);
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <_Z8read_posv+0x154>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f8ab 	bl	80004a0 <__aeabi_f2d>
 800234a:	a32b      	add	r3, pc, #172	; (adr r3, 80023f8 <_Z8read_posv+0x138>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fd ff48 	bl	80001e4 <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fb0a 	bl	8000974 <__aeabi_d2f>
 8002360:	4603      	mov	r3, r0
 8002362:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <_Z8read_posv+0x154>)
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e022      	b.n	80023ae <_Z8read_posv+0xee>
		  }else if (angle-angle_old >= treshold) {
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <_Z8read_posv+0x148>)
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <_Z8read_posv+0x14c>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <_Z8read_posv+0x150>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	db12      	blt.n	80023ae <_Z8read_posv+0xee>
			  angle_oppset=angle_oppset-(4*3.141592);
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <_Z8read_posv+0x154>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f887 	bl	80004a0 <__aeabi_f2d>
 8002392:	a319      	add	r3, pc, #100	; (adr r3, 80023f8 <_Z8read_posv+0x138>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fd ff22 	bl	80001e0 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7fe fae6 	bl	8000974 <__aeabi_d2f>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <_Z8read_posv+0x154>)
 80023ac:	6013      	str	r3, [r2, #0]
		  }

	  }

	  angle_total=angle+angle_oppset;
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <_Z8read_posv+0x148>)
 80023b0:	ed93 7a00 	vldr	s14, [r3]
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <_Z8read_posv+0x154>)
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <_Z8read_posv+0x158>)
 80023c0:	edc3 7a00 	vstr	s15, [r3]
	  delta=angle-angle_old;
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_Z8read_posv+0x148>)
 80023c6:	ed93 7a00 	vldr	s14, [r3]
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_Z8read_posv+0x14c>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <_Z8read_posv+0x15c>)
 80023d6:	edc3 7a00 	vstr	s15, [r3]
	  angle_old=angle;
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <_Z8read_posv+0x148>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <_Z8read_posv+0x14c>)
 80023e0:	6013      	str	r3, [r2, #0]
	return angle_total;
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <_Z8read_posv+0x158>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	ee07 3a90 	vmov	s15, r3
}
 80023ea:	eeb0 0a67 	vmov.f32	s0, s15
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	fc8b007a 	.word	0xfc8b007a
 80023f4:	401921fa 	.word	0x401921fa
 80023f8:	fc8b007a 	.word	0xfc8b007a
 80023fc:	402921fa 	.word	0x402921fa
 8002400:	200000c4 	.word	0x200000c4
 8002404:	40980000 	.word	0x40980000
 8002408:	200008f8 	.word	0x200008f8
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004
 8002414:	200008fc 	.word	0x200008fc
 8002418:	20000900 	.word	0x20000900
 800241c:	20000904 	.word	0x20000904

08002420 <_Z6microsv>:
uint64_t micros() {
 8002420:	b4b0      	push	{r4, r5, r7}
 8002422:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <_Z6microsv+0x2c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	4618      	mov	r0, r3
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_Z6microsv+0x30>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	1884      	adds	r4, r0, r2
 8002438:	eb41 0503 	adc.w	r5, r1, r3
 800243c:	4622      	mov	r2, r4
 800243e:	462b      	mov	r3, r5
}
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bcb0      	pop	{r4, r5, r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	2000007c 	.word	0x2000007c
 8002450:	20000158 	.word	0x20000158

08002454 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800245c:	e7fe      	b.n	800245c <Error_Handler+0x8>
	...

08002460 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d161      	bne.n	8002534 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002476:	4293      	cmp	r3, r2
 8002478:	d15c      	bne.n	8002534 <_Z41__static_initialization_and_destruction_0ii+0xd4>
matrix A(3,3);
 800247a:	2203      	movs	r2, #3
 800247c:	2103      	movs	r1, #3
 800247e:	482f      	ldr	r0, [pc, #188]	; (800253c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002480:	f7ff f8d4 	bl	800162c <_ZN6matrixC1Eii>
matrix B(3,1);
 8002484:	2201      	movs	r2, #1
 8002486:	2103      	movs	r1, #3
 8002488:	482d      	ldr	r0, [pc, #180]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800248a:	f7ff f8cf 	bl	800162c <_ZN6matrixC1Eii>
matrix C(1,3);
 800248e:	2203      	movs	r2, #3
 8002490:	2101      	movs	r1, #1
 8002492:	482c      	ldr	r0, [pc, #176]	; (8002544 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002494:	f7ff f8ca 	bl	800162c <_ZN6matrixC1Eii>
matrix D(1,1);
 8002498:	2201      	movs	r2, #1
 800249a:	2101      	movs	r1, #1
 800249c:	482a      	ldr	r0, [pc, #168]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800249e:	f7ff f8c5 	bl	800162c <_ZN6matrixC1Eii>
matrix R(1,1);
 80024a2:	2201      	movs	r2, #1
 80024a4:	2101      	movs	r1, #1
 80024a6:	4829      	ldr	r0, [pc, #164]	; (800254c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80024a8:	f7ff f8c0 	bl	800162c <_ZN6matrixC1Eii>
matrix G(3,1);
 80024ac:	2201      	movs	r2, #1
 80024ae:	2103      	movs	r1, #3
 80024b0:	4827      	ldr	r0, [pc, #156]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80024b2:	f7ff f8bb 	bl	800162c <_ZN6matrixC1Eii>
matrix Q(1,1);
 80024b6:	2201      	movs	r2, #1
 80024b8:	2101      	movs	r1, #1
 80024ba:	4826      	ldr	r0, [pc, #152]	; (8002554 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80024bc:	f7ff f8b6 	bl	800162c <_ZN6matrixC1Eii>
matrix y(1,1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2101      	movs	r1, #1
 80024c4:	4824      	ldr	r0, [pc, #144]	; (8002558 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80024c6:	f7ff f8b1 	bl	800162c <_ZN6matrixC1Eii>
matrix u(1,1);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2101      	movs	r1, #1
 80024ce:	4823      	ldr	r0, [pc, #140]	; (800255c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80024d0:	f7ff f8ac 	bl	800162c <_ZN6matrixC1Eii>
matrix gainK, errorY, U, Y, I33;
 80024d4:	4822      	ldr	r0, [pc, #136]	; (8002560 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80024d6:	f7ff f879 	bl	80015cc <_ZN6matrixC1Ev>
 80024da:	4822      	ldr	r0, [pc, #136]	; (8002564 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80024dc:	f7ff f876 	bl	80015cc <_ZN6matrixC1Ev>
 80024e0:	4821      	ldr	r0, [pc, #132]	; (8002568 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80024e2:	f7ff f873 	bl	80015cc <_ZN6matrixC1Ev>
 80024e6:	4821      	ldr	r0, [pc, #132]	; (800256c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80024e8:	f7ff f870 	bl	80015cc <_ZN6matrixC1Ev>
 80024ec:	4820      	ldr	r0, [pc, #128]	; (8002570 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80024ee:	f7ff f86d 	bl	80015cc <_ZN6matrixC1Ev>
matrix P, P_old, P_new;
 80024f2:	4820      	ldr	r0, [pc, #128]	; (8002574 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80024f4:	f7ff f86a 	bl	80015cc <_ZN6matrixC1Ev>
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80024fa:	f7ff f867 	bl	80015cc <_ZN6matrixC1Ev>
 80024fe:	481f      	ldr	r0, [pc, #124]	; (800257c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8002500:	f7ff f864 	bl	80015cc <_ZN6matrixC1Ev>
matrix predictX, predictX_old, predictX_new;
 8002504:	481e      	ldr	r0, [pc, #120]	; (8002580 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8002506:	f7ff f861 	bl	80015cc <_ZN6matrixC1Ev>
 800250a:	481e      	ldr	r0, [pc, #120]	; (8002584 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800250c:	f7ff f85e 	bl	80015cc <_ZN6matrixC1Ev>
 8002510:	481d      	ldr	r0, [pc, #116]	; (8002588 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8002512:	f7ff f85b 	bl	80015cc <_ZN6matrixC1Ev>
matrix resultX, resultY;
 8002516:	481d      	ldr	r0, [pc, #116]	; (800258c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8002518:	f7ff f858 	bl	80015cc <_ZN6matrixC1Ev>
 800251c:	481c      	ldr	r0, [pc, #112]	; (8002590 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800251e:	f7ff f855 	bl	80015cc <_ZN6matrixC1Ev>
matrix testInv;//test
 8002522:	481c      	ldr	r0, [pc, #112]	; (8002594 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002524:	f7ff f852 	bl	80015cc <_ZN6matrixC1Ev>
matrix testTrans;//test
 8002528:	481b      	ldr	r0, [pc, #108]	; (8002598 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800252a:	f7ff f84f 	bl	80015cc <_ZN6matrixC1Ev>
kalman_filter filter;
 800252e:	481b      	ldr	r0, [pc, #108]	; (800259c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002530:	f7fe fcfa 	bl	8000f28 <_ZN13kalman_filterC1Ev>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000160 	.word	0x20000160
 8002540:	2000018c 	.word	0x2000018c
 8002544:	200001b8 	.word	0x200001b8
 8002548:	200001e4 	.word	0x200001e4
 800254c:	20000210 	.word	0x20000210
 8002550:	2000023c 	.word	0x2000023c
 8002554:	20000268 	.word	0x20000268
 8002558:	20000294 	.word	0x20000294
 800255c:	200002c0 	.word	0x200002c0
 8002560:	200002ec 	.word	0x200002ec
 8002564:	20000318 	.word	0x20000318
 8002568:	20000344 	.word	0x20000344
 800256c:	20000370 	.word	0x20000370
 8002570:	2000039c 	.word	0x2000039c
 8002574:	200003c8 	.word	0x200003c8
 8002578:	200003f4 	.word	0x200003f4
 800257c:	20000420 	.word	0x20000420
 8002580:	2000044c 	.word	0x2000044c
 8002584:	20000478 	.word	0x20000478
 8002588:	200004a4 	.word	0x200004a4
 800258c:	200004d0 	.word	0x200004d0
 8002590:	200004fc 	.word	0x200004fc
 8002594:	20000528 	.word	0x20000528
 8002598:	20000554 	.word	0x20000554
 800259c:	20000580 	.word	0x20000580

080025a0 <_GLOBAL__sub_I_htim1>:
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff ff59 	bl	8002460 <_Z41__static_initialization_and_destruction_0ii>
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_MspInit+0x4c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_MspInit+0x4c>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_MspInit+0x4c>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_MspInit+0x4c>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a08      	ldr	r2, [pc, #32]	; (80025fc <HAL_MspInit+0x4c>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_MspInit+0x4c>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025ee:	2007      	movs	r0, #7
 80025f0:	f000 fafc 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800

08002600 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_TIM_Encoder_MspInit+0x138>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d14d      	bne.n	80026be <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	4b45      	ldr	r3, [pc, #276]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a44      	ldr	r2, [pc, #272]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a3d      	ldr	r2, [pc, #244]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800265a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800266c:	2301      	movs	r3, #1
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	4832      	ldr	r0, [pc, #200]	; (8002740 <HAL_TIM_Encoder_MspInit+0x140>)
 8002678:	f000 fafa 	bl	8002c70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	2100      	movs	r1, #0
 8002680:	2018      	movs	r0, #24
 8002682:	f000 fabe 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002686:	2018      	movs	r0, #24
 8002688:	f000 fad7 	bl	8002c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	2019      	movs	r0, #25
 8002692:	f000 fab6 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002696:	2019      	movs	r0, #25
 8002698:	f000 facf 	bl	8002c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	201a      	movs	r0, #26
 80026a2:	f000 faae 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026a6:	201a      	movs	r0, #26
 80026a8:	f000 fac7 	bl	8002c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	201b      	movs	r0, #27
 80026b2:	f000 faa6 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026b6:	201b      	movs	r0, #27
 80026b8:	f000 fabf 	bl	8002c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026bc:	e038      	b.n	8002730 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_TIM_Encoder_MspInit+0x144>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d133      	bne.n	8002730 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	4a1a      	ldr	r2, [pc, #104]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	6413      	str	r3, [r2, #64]	; 0x40
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a13      	ldr	r2, [pc, #76]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002710:	2302      	movs	r3, #2
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	4619      	mov	r1, r3
 800271a:	4809      	ldr	r0, [pc, #36]	; (8002740 <HAL_TIM_Encoder_MspInit+0x140>)
 800271c:	f000 faa8 	bl	8002c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	201d      	movs	r0, #29
 8002726:	f000 fa6c 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800272a:	201d      	movs	r0, #29
 800272c:	f000 fa85 	bl	8002c3a <HAL_NVIC_EnableIRQ>
}
 8002730:	bf00      	nop
 8002732:	3730      	adds	r7, #48	; 0x30
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40010000 	.word	0x40010000
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000
 8002744:	40000400 	.word	0x40000400

08002748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d115      	bne.n	8002786 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_TIM_Base_MspInit+0x48>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <HAL_TIM_Base_MspInit+0x48>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_TIM_Base_MspInit+0x48>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	201c      	movs	r0, #28
 800277c:	f000 fa41 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002780:	201c      	movs	r0, #28
 8002782:	f000 fa5a 	bl	8002c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_UART_MspInit+0x84>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12b      	bne.n	800280e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_UART_MspInit+0x88>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <HAL_UART_MspInit+0x88>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_UART_MspInit+0x88>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_UART_MspInit+0x88>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_UART_MspInit+0x88>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_UART_MspInit+0x88>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ee:	230c      	movs	r3, #12
 80027f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fe:	2307      	movs	r3, #7
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4805      	ldr	r0, [pc, #20]	; (8002820 <HAL_UART_MspInit+0x8c>)
 800280a:	f000 fa31 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40004400 	.word	0x40004400
 800281c:	40023800 	.word	0x40023800
 8002820:	40020000 	.word	0x40020000

08002824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <NMI_Handler+0x4>

0800282a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <HardFault_Handler+0x4>

08002830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <MemManage_Handler+0x4>

08002836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283a:	e7fe      	b.n	800283a <BusFault_Handler+0x4>

0800283c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <UsageFault_Handler+0x4>

08002842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002870:	f000 f8cc 	bl	8002a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800287e:	f001 fa0f 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000034 	.word	0x20000034

0800288c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002892:	f001 fa05 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000034 	.word	0x20000034

080028a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80028a6:	f001 f9fb 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000034 	.word	0x20000034

080028b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <TIM1_CC_IRQHandler+0x10>)
 80028ba:	f001 f9f1 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000034 	.word	0x20000034

080028c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <TIM2_IRQHandler+0x10>)
 80028ce:	f001 f9e7 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000007c 	.word	0x2000007c

080028dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <TIM3_IRQHandler+0x10>)
 80028e2:	f001 f9dd 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200000c4 	.word	0x200000c4

080028f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <SystemInit+0x20>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <SystemInit+0x20>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800294c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800291a:	490e      	ldr	r1, [pc, #56]	; (8002954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002930:	4c0b      	ldr	r4, [pc, #44]	; (8002960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800293e:	f7ff ffd7 	bl	80028f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f001 ff7d 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002946:	f7ff f8e7 	bl	8001b18 <main>
  bx  lr    
 800294a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800294c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002954:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002958:	08004900 	.word	0x08004900
  ldr r2, =_sbss
 800295c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002960:	20000914 	.word	0x20000914

08002964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC_IRQHandler>
	...

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <HAL_Init+0x40>)
 8002972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_Init+0x40>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_Init+0x40>)
 800298a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 f92b 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	2000      	movs	r0, #0
 8002998:	f000 f808 	bl	80029ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299c:	f7ff fe08 	bl	80025b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00

080029ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x54>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_InitTick+0x58>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f943 	bl	8002c56 <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00e      	b.n	80029f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d80a      	bhi.n	80029f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f000 f90b 	bl	8002c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_InitTick+0x5c>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000008 	.word	0x20000008
 8002a04:	20000010 	.word	0x20000010
 8002a08:	2000000c 	.word	0x2000000c

08002a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x20>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x24>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_IncTick+0x24>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	20000910 	.word	0x20000910

08002a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_GetTick+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000910 	.word	0x20000910

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f7ff ff8e 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff29 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c14:	f7ff ff3e 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff8e 	bl	8002b40 <NVIC_EncodePriority>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff5d 	bl	8002aec <__NVIC_SetPriority>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff31 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ffa2 	bl	8002ba8 <SysTick_Config>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e159      	b.n	8002f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8148 	bne.w	8002f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d005      	beq.n	8002cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d130      	bne.n	8002d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	2203      	movs	r2, #3
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0201 	and.w	r2, r3, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d017      	beq.n	8002d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d123      	bne.n	8002db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0203 	and.w	r2, r3, #3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a2 	beq.w	8002f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b54      	ldr	r3, [pc, #336]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_GPIO_Init+0x2ec>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a49      	ldr	r2, [pc, #292]	; (8002f60 <HAL_GPIO_Init+0x2f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_GPIO_Init+0x202>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <HAL_GPIO_Init+0x2f4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_GPIO_Init+0x1fe>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a47      	ldr	r2, [pc, #284]	; (8002f68 <HAL_GPIO_Init+0x2f8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00d      	beq.n	8002e6a <HAL_GPIO_Init+0x1fa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a46      	ldr	r2, [pc, #280]	; (8002f6c <HAL_GPIO_Init+0x2fc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <HAL_GPIO_Init+0x1f6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a45      	ldr	r2, [pc, #276]	; (8002f70 <HAL_GPIO_Init+0x300>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_GPIO_Init+0x1f2>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e008      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e62:	2307      	movs	r3, #7
 8002e64:	e006      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e66:	2303      	movs	r3, #3
 8002e68:	e004      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e002      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e72:	2300      	movs	r3, #0
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	f002 0203 	and.w	r2, r2, #3
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	4093      	lsls	r3, r2
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e84:	4935      	ldr	r1, [pc, #212]	; (8002f5c <HAL_GPIO_Init+0x2ec>)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	f67f aea2 	bls.w	8002c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40020800 	.word	0x40020800
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e264      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d075      	beq.n	80030b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	4ba3      	ldr	r3, [pc, #652]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4ba0      	ldr	r3, [pc, #640]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4b9d      	ldr	r3, [pc, #628]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b99      	ldr	r3, [pc, #612]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d157      	bne.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e23f      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x74>
 8003012:	4b91      	ldr	r3, [pc, #580]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a90      	ldr	r2, [pc, #576]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b8b      	ldr	r3, [pc, #556]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a8a      	ldr	r2, [pc, #552]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a87      	ldr	r2, [pc, #540]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003044:	4b84      	ldr	r3, [pc, #528]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a83      	ldr	r2, [pc, #524]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a80      	ldr	r2, [pc, #512]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fce6 	bl	8002a34 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff fce2 	bl	8002a34 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e204      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b76      	ldr	r3, [pc, #472]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xc0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7ff fcd2 	bl	8002a34 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7ff fcce 	bl	8002a34 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1f0      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0xe8>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1c4      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b56      	ldr	r3, [pc, #344]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4952      	ldr	r1, [pc, #328]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e03a      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <HAL_RCC_OscConfig+0x2b0>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7ff fc87 	bl	8002a34 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7ff fc83 	bl	8002a34 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e1a5      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4940      	ldr	r1, [pc, #256]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e015      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_OscConfig+0x2b0>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7ff fc66 	bl	8002a34 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7ff fc62 	bl	8002a34 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e184      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d030      	beq.n	80031f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_RCC_OscConfig+0x2b4>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7ff fc46 	bl	8002a34 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7ff fc42 	bl	8002a34 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e164      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x200>
 80031ca:	e015      	b.n	80031f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_OscConfig+0x2b4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7ff fc2f 	bl	8002a34 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7ff fc2b 	bl	8002a34 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e14d      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a0 	beq.w	8003346 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_OscConfig+0x2b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d121      	bne.n	8003286 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_OscConfig+0x2b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_RCC_OscConfig+0x2b8>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7ff fbf1 	bl	8002a34 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	e011      	b.n	800327a <HAL_RCC_OscConfig+0x2ce>
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
 8003264:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7ff fbe4 	bl	8002a34 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e106      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b85      	ldr	r3, [pc, #532]	; (8003490 <HAL_RCC_OscConfig+0x4e4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x2f0>
 800328e:	4b81      	ldr	r3, [pc, #516]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a80      	ldr	r2, [pc, #512]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	e01c      	b.n	80032d6 <HAL_RCC_OscConfig+0x32a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x312>
 80032a4:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a7a      	ldr	r2, [pc, #488]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	4b78      	ldr	r3, [pc, #480]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a77      	ldr	r2, [pc, #476]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0x32a>
 80032be:	4b75      	ldr	r3, [pc, #468]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a74      	ldr	r2, [pc, #464]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	4b72      	ldr	r3, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a71      	ldr	r2, [pc, #452]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7ff fba9 	bl	8002a34 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7ff fba5 	bl	8002a34 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0c5      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ee      	beq.n	80032e6 <HAL_RCC_OscConfig+0x33a>
 8003308:	e014      	b.n	8003334 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7ff fb93 	bl	8002a34 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7ff fb8f 	bl	8002a34 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0af      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ee      	bne.n	8003312 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b56      	ldr	r3, [pc, #344]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a55      	ldr	r2, [pc, #340]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 809b 	beq.w	8003486 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d05c      	beq.n	8003416 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d141      	bne.n	80033e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003364:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7ff fb63 	bl	8002a34 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003372:	f7ff fb5f 	bl	8002a34 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e081      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003384:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	019b      	lsls	r3, r3, #6
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	4937      	ldr	r1, [pc, #220]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff fb38 	bl	8002a34 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7ff fb34 	bl	8002a34 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e056      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x41c>
 80033e6:	e04e      	b.n	8003486 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7ff fb21 	bl	8002a34 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f6:	f7ff fb1d 	bl	8002a34 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e03f      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x44a>
 8003414:	e037      	b.n	8003486 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e032      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <HAL_RCC_OscConfig+0x4e8>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d028      	beq.n	8003482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d121      	bne.n	8003482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d11a      	bne.n	8003482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003452:	4013      	ands	r3, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003458:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800345a:	4293      	cmp	r3, r2
 800345c:	d111      	bne.n	8003482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	3b01      	subs	r3, #1
 800346c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d107      	bne.n	8003482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40007000 	.word	0x40007000
 8003494:	40023800 	.word	0x40023800
 8003498:	42470060 	.word	0x42470060

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0cc      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e067      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7ff fa52 	bl	8002a34 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7ff fa4e 	bl	8002a34 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f821 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490a      	ldr	r1, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff f9b2 	bl	80029ac <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023c00 	.word	0x40023c00
 8003658:	40023800 	.word	0x40023800
 800365c:	080048d4 	.word	0x080048d4
 8003660:	20000008 	.word	0x20000008
 8003664:	2000000c 	.word	0x2000000c

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	2300      	movs	r3, #0
 800367a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003680:	4b67      	ldr	r3, [pc, #412]	; (8003820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d00d      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x40>
 800368c:	2b08      	cmp	r3, #8
 800368e:	f200 80bd 	bhi.w	800380c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003696:	2b04      	cmp	r3, #4
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800369a:	e0b7      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b61      	ldr	r3, [pc, #388]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800369e:	60bb      	str	r3, [r7, #8]
       break;
 80036a0:	e0b7      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a2:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036a4:	60bb      	str	r3, [r7, #8]
      break;
 80036a6:	e0b4      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4b5d      	ldr	r3, [pc, #372]	; (8003820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b2:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d04d      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b58      	ldr	r3, [pc, #352]	; (8003820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	461a      	mov	r2, r3
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ce:	f04f 0100 	mov.w	r1, #0
 80036d2:	ea02 0800 	and.w	r8, r2, r0
 80036d6:	ea03 0901 	and.w	r9, r3, r1
 80036da:	4640      	mov	r0, r8
 80036dc:	4649      	mov	r1, r9
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	014b      	lsls	r3, r1, #5
 80036e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036ec:	0142      	lsls	r2, r0, #5
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	ebb0 0008 	subs.w	r0, r0, r8
 80036f6:	eb61 0109 	sbc.w	r1, r1, r9
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	018b      	lsls	r3, r1, #6
 8003704:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003708:	0182      	lsls	r2, r0, #6
 800370a:	1a12      	subs	r2, r2, r0
 800370c:	eb63 0301 	sbc.w	r3, r3, r1
 8003710:	f04f 0000 	mov.w	r0, #0
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	00d9      	lsls	r1, r3, #3
 800371a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800371e:	00d0      	lsls	r0, r2, #3
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	eb12 0208 	adds.w	r2, r2, r8
 8003728:	eb43 0309 	adc.w	r3, r3, r9
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0259      	lsls	r1, r3, #9
 8003736:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800373a:	0250      	lsls	r0, r2, #9
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	461a      	mov	r2, r3
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	f7fd fa70 	bl	8000c30 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4613      	mov	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e04a      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	461a      	mov	r2, r3
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	ea02 0400 	and.w	r4, r2, r0
 8003772:	ea03 0501 	and.w	r5, r3, r1
 8003776:	4620      	mov	r0, r4
 8003778:	4629      	mov	r1, r5
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	014b      	lsls	r3, r1, #5
 8003784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003788:	0142      	lsls	r2, r0, #5
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	1b00      	subs	r0, r0, r4
 8003790:	eb61 0105 	sbc.w	r1, r1, r5
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	018b      	lsls	r3, r1, #6
 800379e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037a2:	0182      	lsls	r2, r0, #6
 80037a4:	1a12      	subs	r2, r2, r0
 80037a6:	eb63 0301 	sbc.w	r3, r3, r1
 80037aa:	f04f 0000 	mov.w	r0, #0
 80037ae:	f04f 0100 	mov.w	r1, #0
 80037b2:	00d9      	lsls	r1, r3, #3
 80037b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b8:	00d0      	lsls	r0, r2, #3
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	1912      	adds	r2, r2, r4
 80037c0:	eb45 0303 	adc.w	r3, r5, r3
 80037c4:	f04f 0000 	mov.w	r0, #0
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	0299      	lsls	r1, r3, #10
 80037ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037d2:	0290      	lsls	r0, r2, #10
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	461a      	mov	r2, r3
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	f7fd fa24 	bl	8000c30 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	3301      	adds	r3, #1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	60bb      	str	r3, [r7, #8]
      break;
 800380a:	e002      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800380e:	60bb      	str	r3, [r7, #8]
      break;
 8003810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003812:	68bb      	ldr	r3, [r7, #8]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	00f42400 	.word	0x00f42400
 8003828:	007a1200 	.word	0x007a1200

0800382c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_GetHCLKFreq+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000008 	.word	0x20000008

08003844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003848:	f7ff fff0 	bl	800382c <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	080048e4 	.word	0x080048e4

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003870:	f7ff ffdc 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0b5b      	lsrs	r3, r3, #13
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	080048e4 	.word	0x080048e4

08003894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e041      	b.n	800392a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe ff44 	bl	8002748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f000 fbdc 	bl	8004090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e044      	b.n	80039d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1e      	ldr	r2, [pc, #120]	; (80039e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d013      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a19      	ldr	r2, [pc, #100]	; (80039ec <HAL_TIM_Base_Start_IT+0xb8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d111      	bne.n	80039c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d010      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c2:	e007      	b.n	80039d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40014000 	.word	0x40014000

080039f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e097      	b.n	8003b3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fe fded 	bl	8002600 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	f023 0307 	bic.w	r3, r3, #7
 8003a40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f000 fb1f 	bl	8004090 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a98:	f023 030c 	bic.w	r3, r3, #12
 8003a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	011a      	lsls	r2, r3, #4
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	031b      	lsls	r3, r3, #12
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4313      	orrs	r3, r2
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d110      	bne.n	8003b96 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d102      	bne.n	8003b80 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b7a:	7b7b      	ldrb	r3, [r7, #13]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d001      	beq.n	8003b84 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e089      	b.n	8003c98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b94:	e031      	b.n	8003bfa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d110      	bne.n	8003bbe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b9c:	7bbb      	ldrb	r3, [r7, #14]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ba2:	7b3b      	ldrb	r3, [r7, #12]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e075      	b.n	8003c98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bbc:	e01d      	b.n	8003bfa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d108      	bne.n	8003bd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bc4:	7bbb      	ldrb	r3, [r7, #14]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bca:	7b7b      	ldrb	r3, [r7, #13]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bd0:	7b3b      	ldrb	r3, [r7, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e05e      	b.n	8003c98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d010      	beq.n	8003c28 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003c06:	e01f      	b.n	8003c48 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fb57 	bl	80042c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0202 	orr.w	r2, r2, #2
 8003c24:	60da      	str	r2, [r3, #12]
      break;
 8003c26:	e02e      	b.n	8003c86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	2104      	movs	r1, #4
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fb47 	bl	80042c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0204 	orr.w	r2, r2, #4
 8003c44:	60da      	str	r2, [r3, #12]
      break;
 8003c46:	e01e      	b.n	8003c86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fb37 	bl	80042c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2104      	movs	r1, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fb30 	bl	80042c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0202 	orr.w	r2, r2, #2
 8003c72:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0204 	orr.w	r2, r2, #4
 8003c82:	60da      	str	r2, [r3, #12]
      break;
 8003c84:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d122      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d11b      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0202 	mvn.w	r2, #2
 8003ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9b5 	bl	8004052 <HAL_TIM_IC_CaptureCallback>
 8003ce8:	e005      	b.n	8003cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f9a7 	bl	800403e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f9b8 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0204 	mvn.w	r2, #4
 8003d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f98b 	bl	8004052 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f97d 	bl	800403e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f98e 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0208 	mvn.w	r2, #8
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f961 	bl	8004052 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f953 	bl	800403e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f964 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b10      	cmp	r3, #16
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0210 	mvn.w	r2, #16
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f937 	bl	8004052 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f929 	bl	800403e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f93a 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d10e      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0201 	mvn.w	r2, #1
 8003e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe fa30 	bl	8002284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b80      	cmp	r3, #128	; 0x80
 8003e30:	d10e      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b80      	cmp	r3, #128	; 0x80
 8003e3e:	d107      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fad8 	bl	8004400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8ff 	bl	800407a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0220 	mvn.w	r2, #32
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 faa2 	bl	80043ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIM_ConfigClockSource+0x1c>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0b4      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x186>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f04:	d03e      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xd4>
 8003f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0a:	f200 8087 	bhi.w	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	f000 8086 	beq.w	8004022 <HAL_TIM_ConfigClockSource+0x172>
 8003f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1a:	d87f      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b70      	cmp	r3, #112	; 0x70
 8003f1e:	d01a      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0xa6>
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d87b      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b60      	cmp	r3, #96	; 0x60
 8003f26:	d050      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x11a>
 8003f28:	2b60      	cmp	r3, #96	; 0x60
 8003f2a:	d877      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b50      	cmp	r3, #80	; 0x50
 8003f2e:	d03c      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xfa>
 8003f30:	2b50      	cmp	r3, #80	; 0x50
 8003f32:	d873      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d058      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x13a>
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d86f      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b30      	cmp	r3, #48	; 0x30
 8003f3e:	d064      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b30      	cmp	r3, #48	; 0x30
 8003f42:	d86b      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d060      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d867      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d05a      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	e062      	b.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f000 f98d 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	609a      	str	r2, [r3, #8]
      break;
 8003f82:	e04f      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f000 f976 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa6:	609a      	str	r2, [r3, #8]
      break;
 8003fa8:	e03c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 f8ea 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2150      	movs	r1, #80	; 0x50
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f943 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e02c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 f909 	bl	80041ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2160      	movs	r1, #96	; 0x60
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f933 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e01c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 f8ca 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f923 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8004008:	e00c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f000 f91a 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 800401a:	e003      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
      break;
 8004020:	e000      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a34      	ldr	r2, [pc, #208]	; (8004174 <TIM_Base_SetConfig+0xe4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00f      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d00b      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a31      	ldr	r2, [pc, #196]	; (8004178 <TIM_Base_SetConfig+0xe8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a30      	ldr	r2, [pc, #192]	; (800417c <TIM_Base_SetConfig+0xec>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0x38>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a2f      	ldr	r2, [pc, #188]	; (8004180 <TIM_Base_SetConfig+0xf0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a25      	ldr	r2, [pc, #148]	; (8004174 <TIM_Base_SetConfig+0xe4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01b      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d017      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a22      	ldr	r2, [pc, #136]	; (8004178 <TIM_Base_SetConfig+0xe8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a21      	ldr	r2, [pc, #132]	; (800417c <TIM_Base_SetConfig+0xec>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00f      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a20      	ldr	r2, [pc, #128]	; (8004180 <TIM_Base_SetConfig+0xf0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00b      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <TIM_Base_SetConfig+0xf4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <TIM_Base_SetConfig+0xf8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <TIM_Base_SetConfig+0xfc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <TIM_Base_SetConfig+0xe4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d103      	bne.n	8004160 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	615a      	str	r2, [r3, #20]
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 030a 	bic.w	r3, r3, #10
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0210 	bic.w	r2, r3, #16
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	f043 0307 	orr.w	r3, r3, #7
 8004270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	021a      	lsls	r2, r3, #8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2201      	movs	r2, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004324:	2302      	movs	r3, #2
 8004326:	e050      	b.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d013      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a18      	ldr	r2, [pc, #96]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10c      	bne.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40014000 	.word	0x40014000

080043ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e03f      	b.n	80044a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fe f9aa 	bl	8002794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f829 	bl	80044b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800446c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800447c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800448c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	b09f      	sub	sp, #124	; 0x7c
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	68d9      	ldr	r1, [r3, #12]
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	ea40 0301 	orr.w	r3, r0, r1
 80044d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f4:	f021 010c 	bic.w	r1, r1, #12
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044fe:	430b      	orrs	r3, r1
 8004500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	6999      	ldr	r1, [r3, #24]
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	ea40 0301 	orr.w	r3, r0, r1
 8004518:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4bc5      	ldr	r3, [pc, #788]	; (8004834 <UART_SetConfig+0x384>)
 8004520:	429a      	cmp	r2, r3
 8004522:	d004      	beq.n	800452e <UART_SetConfig+0x7e>
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4bc3      	ldr	r3, [pc, #780]	; (8004838 <UART_SetConfig+0x388>)
 800452a:	429a      	cmp	r2, r3
 800452c:	d103      	bne.n	8004536 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800452e:	f7ff f99d 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8004532:	6778      	str	r0, [r7, #116]	; 0x74
 8004534:	e002      	b.n	800453c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004536:	f7ff f985 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 800453a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004544:	f040 80b6 	bne.w	80046b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454a:	461c      	mov	r4, r3
 800454c:	f04f 0500 	mov.w	r5, #0
 8004550:	4622      	mov	r2, r4
 8004552:	462b      	mov	r3, r5
 8004554:	1891      	adds	r1, r2, r2
 8004556:	6439      	str	r1, [r7, #64]	; 0x40
 8004558:	415b      	adcs	r3, r3
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
 800455c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004560:	1912      	adds	r2, r2, r4
 8004562:	eb45 0303 	adc.w	r3, r5, r3
 8004566:	f04f 0000 	mov.w	r0, #0
 800456a:	f04f 0100 	mov.w	r1, #0
 800456e:	00d9      	lsls	r1, r3, #3
 8004570:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004574:	00d0      	lsls	r0, r2, #3
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	1911      	adds	r1, r2, r4
 800457c:	6639      	str	r1, [r7, #96]	; 0x60
 800457e:	416b      	adcs	r3, r5
 8004580:	667b      	str	r3, [r7, #100]	; 0x64
 8004582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	461a      	mov	r2, r3
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	1891      	adds	r1, r2, r2
 800458e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004590:	415b      	adcs	r3, r3
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004598:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800459c:	f7fc fb48 	bl	8000c30 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4ba5      	ldr	r3, [pc, #660]	; (800483c <UART_SetConfig+0x38c>)
 80045a6:	fba3 2302 	umull	r2, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	011e      	lsls	r6, r3, #4
 80045ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b0:	461c      	mov	r4, r3
 80045b2:	f04f 0500 	mov.w	r5, #0
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	6339      	str	r1, [r7, #48]	; 0x30
 80045be:	415b      	adcs	r3, r3
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
 80045c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045c6:	1912      	adds	r2, r2, r4
 80045c8:	eb45 0303 	adc.w	r3, r5, r3
 80045cc:	f04f 0000 	mov.w	r0, #0
 80045d0:	f04f 0100 	mov.w	r1, #0
 80045d4:	00d9      	lsls	r1, r3, #3
 80045d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045da:	00d0      	lsls	r0, r2, #3
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	1911      	adds	r1, r2, r4
 80045e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80045e4:	416b      	adcs	r3, r5
 80045e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80045f6:	415b      	adcs	r3, r3
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004602:	f7fc fb15 	bl	8000c30 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4b8c      	ldr	r3, [pc, #560]	; (800483c <UART_SetConfig+0x38c>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a87      	ldr	r2, [pc, #540]	; (800483c <UART_SetConfig+0x38c>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800462c:	441e      	add	r6, r3
 800462e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004630:	4618      	mov	r0, r3
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	1894      	adds	r4, r2, r2
 800463c:	623c      	str	r4, [r7, #32]
 800463e:	415b      	adcs	r3, r3
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004646:	1812      	adds	r2, r2, r0
 8004648:	eb41 0303 	adc.w	r3, r1, r3
 800464c:	f04f 0400 	mov.w	r4, #0
 8004650:	f04f 0500 	mov.w	r5, #0
 8004654:	00dd      	lsls	r5, r3, #3
 8004656:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800465a:	00d4      	lsls	r4, r2, #3
 800465c:	4622      	mov	r2, r4
 800465e:	462b      	mov	r3, r5
 8004660:	1814      	adds	r4, r2, r0
 8004662:	653c      	str	r4, [r7, #80]	; 0x50
 8004664:	414b      	adcs	r3, r1
 8004666:	657b      	str	r3, [r7, #84]	; 0x54
 8004668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	461a      	mov	r2, r3
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	1891      	adds	r1, r2, r2
 8004674:	61b9      	str	r1, [r7, #24]
 8004676:	415b      	adcs	r3, r3
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004682:	f7fc fad5 	bl	8000c30 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4b6c      	ldr	r3, [pc, #432]	; (800483c <UART_SetConfig+0x38c>)
 800468c:	fba3 1302 	umull	r1, r3, r3, r2
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	2164      	movs	r1, #100	; 0x64
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	3332      	adds	r3, #50	; 0x32
 800469e:	4a67      	ldr	r2, [pc, #412]	; (800483c <UART_SetConfig+0x38c>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	f003 0207 	and.w	r2, r3, #7
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4432      	add	r2, r6
 80046b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046b2:	e0b9      	b.n	8004828 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b6:	461c      	mov	r4, r3
 80046b8:	f04f 0500 	mov.w	r5, #0
 80046bc:	4622      	mov	r2, r4
 80046be:	462b      	mov	r3, r5
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	6139      	str	r1, [r7, #16]
 80046c4:	415b      	adcs	r3, r3
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046cc:	1912      	adds	r2, r2, r4
 80046ce:	eb45 0303 	adc.w	r3, r5, r3
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	00d9      	lsls	r1, r3, #3
 80046dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046e0:	00d0      	lsls	r0, r2, #3
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	eb12 0804 	adds.w	r8, r2, r4
 80046ea:	eb43 0905 	adc.w	r9, r3, r5
 80046ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	008b      	lsls	r3, r1, #2
 8004702:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004706:	0082      	lsls	r2, r0, #2
 8004708:	4640      	mov	r0, r8
 800470a:	4649      	mov	r1, r9
 800470c:	f7fc fa90 	bl	8000c30 <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4b49      	ldr	r3, [pc, #292]	; (800483c <UART_SetConfig+0x38c>)
 8004716:	fba3 2302 	umull	r2, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	011e      	lsls	r6, r3, #4
 800471e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004720:	4618      	mov	r0, r3
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	1894      	adds	r4, r2, r2
 800472c:	60bc      	str	r4, [r7, #8]
 800472e:	415b      	adcs	r3, r3
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004736:	1812      	adds	r2, r2, r0
 8004738:	eb41 0303 	adc.w	r3, r1, r3
 800473c:	f04f 0400 	mov.w	r4, #0
 8004740:	f04f 0500 	mov.w	r5, #0
 8004744:	00dd      	lsls	r5, r3, #3
 8004746:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800474a:	00d4      	lsls	r4, r2, #3
 800474c:	4622      	mov	r2, r4
 800474e:	462b      	mov	r3, r5
 8004750:	1814      	adds	r4, r2, r0
 8004752:	64bc      	str	r4, [r7, #72]	; 0x48
 8004754:	414b      	adcs	r3, r1
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	f04f 0100 	mov.w	r1, #0
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	008b      	lsls	r3, r1, #2
 800476c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004770:	0082      	lsls	r2, r0, #2
 8004772:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004776:	f7fc fa5b 	bl	8000c30 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <UART_SetConfig+0x38c>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a2a      	ldr	r2, [pc, #168]	; (800483c <UART_SetConfig+0x38c>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800479e:	441e      	add	r6, r3
 80047a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a2:	4618      	mov	r0, r3
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	1894      	adds	r4, r2, r2
 80047ae:	603c      	str	r4, [r7, #0]
 80047b0:	415b      	adcs	r3, r3
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b8:	1812      	adds	r2, r2, r0
 80047ba:	eb41 0303 	adc.w	r3, r1, r3
 80047be:	f04f 0400 	mov.w	r4, #0
 80047c2:	f04f 0500 	mov.w	r5, #0
 80047c6:	00dd      	lsls	r5, r3, #3
 80047c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047cc:	00d4      	lsls	r4, r2, #3
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	eb12 0a00 	adds.w	sl, r2, r0
 80047d6:	eb43 0b01 	adc.w	fp, r3, r1
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	008b      	lsls	r3, r1, #2
 80047ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047f2:	0082      	lsls	r2, r0, #2
 80047f4:	4650      	mov	r0, sl
 80047f6:	4659      	mov	r1, fp
 80047f8:	f7fc fa1a 	bl	8000c30 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <UART_SetConfig+0x38c>)
 8004802:	fba3 1302 	umull	r1, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2164      	movs	r1, #100	; 0x64
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	3332      	adds	r3, #50	; 0x32
 8004814:	4a09      	ldr	r2, [pc, #36]	; (800483c <UART_SetConfig+0x38c>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	f003 020f 	and.w	r2, r3, #15
 8004820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4432      	add	r2, r6
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	377c      	adds	r7, #124	; 0x7c
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004832:	bf00      	nop
 8004834:	40011000 	.word	0x40011000
 8004838:	40011400 	.word	0x40011400
 800483c:	51eb851f 	.word	0x51eb851f

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4d0d      	ldr	r5, [pc, #52]	; (8004878 <__libc_init_array+0x38>)
 8004844:	4c0d      	ldr	r4, [pc, #52]	; (800487c <__libc_init_array+0x3c>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	2600      	movs	r6, #0
 800484c:	42a6      	cmp	r6, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	4d0b      	ldr	r5, [pc, #44]	; (8004880 <__libc_init_array+0x40>)
 8004852:	4c0c      	ldr	r4, [pc, #48]	; (8004884 <__libc_init_array+0x44>)
 8004854:	f000 f820 	bl	8004898 <_init>
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	2600      	movs	r6, #0
 800485e:	42a6      	cmp	r6, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f855 3b04 	ldr.w	r3, [r5], #4
 8004868:	4798      	blx	r3
 800486a:	3601      	adds	r6, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004872:	4798      	blx	r3
 8004874:	3601      	adds	r6, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	080048f4 	.word	0x080048f4
 800487c:	080048f4 	.word	0x080048f4
 8004880:	080048f4 	.word	0x080048f4
 8004884:	080048fc 	.word	0x080048fc

08004888 <memset>:
 8004888:	4402      	add	r2, r0
 800488a:	4603      	mov	r3, r0
 800488c:	4293      	cmp	r3, r2
 800488e:	d100      	bne.n	8004892 <memset+0xa>
 8004890:	4770      	bx	lr
 8004892:	f803 1b01 	strb.w	r1, [r3], #1
 8004896:	e7f9      	b.n	800488c <memset+0x4>

08004898 <_init>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr

080048a4 <_fini>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	bf00      	nop
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr
