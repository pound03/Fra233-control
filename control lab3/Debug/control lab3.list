
control lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000441c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f0  080045f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045f8  080045f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  20000010  08004610  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  08004610  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e692  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed9  00000000  00000000  0002e6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  000305a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017330  00000000  00000000  00031e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cee9  00000000  00000000  00049150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a950  00000000  00000000  00056039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0989  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003664  00000000  00000000  000e09dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800459c 	.word	0x0800459c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800459c 	.word	0x0800459c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96e 	b.w	8000d08 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8083 	bne.w	8000b5a <__udivmoddi4+0x116>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d947      	bls.n	8000aea <__udivmoddi4+0xa6>
 8000a5a:	fab2 f282 	clz	r2, r2
 8000a5e:	b142      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	f1c2 0020 	rsb	r0, r2, #32
 8000a64:	fa24 f000 	lsr.w	r0, r4, r0
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	4097      	lsls	r7, r2
 8000a6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbbc f6f8 	udiv	r6, ip, r8
 8000a7c:	fa1f fe87 	uxth.w	lr, r7
 8000a80:	fb08 c116 	mls	r1, r8, r6, ip
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f10e 	mul.w	r1, r6, lr
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a96:	f080 8119 	bcs.w	8000ccc <__udivmoddi4+0x288>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8116 	bls.w	8000ccc <__udivmoddi4+0x288>
 8000aa0:	3e02      	subs	r6, #2
 8000aa2:	443b      	add	r3, r7
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aac:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab8:	45a6      	cmp	lr, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8105 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000ac6:	45a6      	cmp	lr, r4
 8000ac8:	f240 8102 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000acc:	3802      	subs	r0, #2
 8000ace:	443c      	add	r4, r7
 8000ad0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad4:	eba4 040e 	sub.w	r4, r4, lr
 8000ad8:	2600      	movs	r6, #0
 8000ada:	b11d      	cbz	r5, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	b902      	cbnz	r2, 8000aee <__udivmoddi4+0xaa>
 8000aec:	deff      	udf	#255	; 0xff
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d150      	bne.n	8000b98 <__udivmoddi4+0x154>
 8000af6:	1bcb      	subs	r3, r1, r7
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	fa1f f887 	uxth.w	r8, r7
 8000b00:	2601      	movs	r6, #1
 8000b02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b06:	0c21      	lsrs	r1, r4, #16
 8000b08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b10:	fb08 f30c 	mul.w	r3, r8, ip
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000b18:	1879      	adds	r1, r7, r1
 8000b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0xe2>
 8000b20:	428b      	cmp	r3, r1
 8000b22:	f200 80e9 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b26:	4684      	mov	ip, r0
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	b2a3      	uxth	r3, r4
 8000b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b38:	fb08 f800 	mul.w	r8, r8, r0
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x10c>
 8000b40:	193c      	adds	r4, r7, r4
 8000b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x10a>
 8000b48:	45a0      	cmp	r8, r4
 8000b4a:	f200 80d9 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b4e:	4618      	mov	r0, r3
 8000b50:	eba4 0408 	sub.w	r4, r4, r8
 8000b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b58:	e7bf      	b.n	8000ada <__udivmoddi4+0x96>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0x12e>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	f000 80b1 	beq.w	8000cc6 <__udivmoddi4+0x282>
 8000b64:	2600      	movs	r6, #0
 8000b66:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f683 	clz	r6, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d14a      	bne.n	8000c10 <__udivmoddi4+0x1cc>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0x140>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80b8 	bhi.w	8000cf4 <__udivmoddi4+0x2b0>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0103 	sbc.w	r1, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d0a8      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b96:	e7a5      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b98:	f1c2 0320 	rsb	r3, r2, #32
 8000b9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ba0:	4097      	lsls	r7, r2
 8000ba2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ba6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000baa:	40d9      	lsrs	r1, r3
 8000bac:	4330      	orrs	r0, r6
 8000bae:	0c03      	lsrs	r3, r0, #16
 8000bb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bb4:	fa1f f887 	uxth.w	r8, r7
 8000bb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb06 f108 	mul.w	r1, r6, r8
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x19c>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bd2:	f080 808d 	bcs.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 808a 	bls.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b281      	uxth	r1, r0
 8000be4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf0:	fb00 f308 	mul.w	r3, r0, r8
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x1c4>
 8000bf8:	1879      	adds	r1, r7, r1
 8000bfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bfe:	d273      	bcs.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d971      	bls.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c04:	3802      	subs	r0, #2
 8000c06:	4439      	add	r1, r7
 8000c08:	1acb      	subs	r3, r1, r3
 8000c0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c0e:	e778      	b.n	8000b02 <__udivmoddi4+0xbe>
 8000c10:	f1c6 0c20 	rsb	ip, r6, #32
 8000c14:	fa03 f406 	lsl.w	r4, r3, r6
 8000c18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c1c:	431c      	orrs	r4, r3
 8000c1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c22:	fa01 f306 	lsl.w	r3, r1, r6
 8000c26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c36:	fa1f f884 	uxth.w	r8, r4
 8000c3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c42:	fb09 fa08 	mul.w	sl, r9, r8
 8000c46:	458a      	cmp	sl, r1
 8000c48:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x220>
 8000c52:	1861      	adds	r1, r4, r1
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	d248      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000c5a:	458a      	cmp	sl, r1
 8000c5c:	d946      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4421      	add	r1, r4
 8000c64:	eba1 010a 	sub.w	r1, r1, sl
 8000c68:	b2bf      	uxth	r7, r7
 8000c6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c76:	fb00 f808 	mul.w	r8, r0, r8
 8000c7a:	45b8      	cmp	r8, r7
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x24a>
 8000c7e:	19e7      	adds	r7, r4, r7
 8000c80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c84:	d22e      	bcs.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c86:	45b8      	cmp	r8, r7
 8000c88:	d92c      	bls.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4427      	add	r7, r4
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	eba7 0708 	sub.w	r7, r7, r8
 8000c96:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9a:	454f      	cmp	r7, r9
 8000c9c:	46c6      	mov	lr, r8
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	d31a      	bcc.n	8000cd8 <__udivmoddi4+0x294>
 8000ca2:	d017      	beq.n	8000cd4 <__udivmoddi4+0x290>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x27a>
 8000ca6:	ebb3 020e 	subs.w	r2, r3, lr
 8000caa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cb2:	40f2      	lsrs	r2, r6
 8000cb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb8:	40f7      	lsrs	r7, r6
 8000cba:	e9c5 2700 	strd	r2, r7, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e70b      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e9      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6fd      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd4:	4543      	cmp	r3, r8
 8000cd6:	d2e5      	bcs.n	8000ca4 <__udivmoddi4+0x260>
 8000cd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7df      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e7d2      	b.n	8000c8e <__udivmoddi4+0x24a>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e78d      	b.n	8000c08 <__udivmoddi4+0x1c4>
 8000cec:	4681      	mov	r9, r0
 8000cee:	e7b9      	b.n	8000c64 <__udivmoddi4+0x220>
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	e775      	b.n	8000be0 <__udivmoddi4+0x19c>
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e74a      	b.n	8000b8e <__udivmoddi4+0x14a>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	4439      	add	r1, r7
 8000cfe:	e713      	b.n	8000b28 <__udivmoddi4+0xe4>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	e724      	b.n	8000b50 <__udivmoddi4+0x10c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <_ZN13kalman_filterC1Ev>:
 *      Author: weera
 */

#include <kalmanfilter.h>

kalman_filter::kalman_filter() {
 8000d0c:	b5b0      	push	{r4, r5, r7, lr}
 8000d0e:	b0ac      	sub	sp, #176	; 0xb0
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fb5b 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	332c      	adds	r3, #44	; 0x2c
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fb56 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3358      	adds	r3, #88	; 0x58
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fb51 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3384      	adds	r3, #132	; 0x84
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fb4c 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	33b0      	adds	r3, #176	; 0xb0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fb47 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	33dc      	adds	r3, #220	; 0xdc
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fb42 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fb3c 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fb36 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fb30 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fb2a 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fb24 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fb1e 	bl	80013d2 <_ZN6matrixC1Ev>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fb18 	bl	80013d2 <_ZN6matrixC1Ev>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fb12 	bl	80013d2 <_ZN6matrixC1Ev>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fb0c 	bl	80013d2 <_ZN6matrixC1Ev>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fb06 	bl	80013d2 <_ZN6matrixC1Ev>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fb00 	bl	80013d2 <_ZN6matrixC1Ev>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fafa 	bl	80013d2 <_ZN6matrixC1Ev>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 faf4 	bl	80013d2 <_ZN6matrixC1Ev>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 faee 	bl	80013d2 <_ZN6matrixC1Ev>
	matrix buf1(3, 1);
 8000df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fb17 	bl	8001432 <_ZN6matrixC1Eii>
	predictX_old = buf1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8000e0a:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8000e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	matrix buf2(3, 3);
 8000e1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e22:	2203      	movs	r2, #3
 8000e24:	2103      	movs	r1, #3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fb03 	bl	8001432 <_ZN6matrixC1Eii>
	P_old = buf2;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 740f 	add.w	r4, r3, #572	; 0x23c
 8000e32:	f107 0558 	add.w	r5, r7, #88	; 0x58
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float buf_val[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <_ZN13kalman_filterC1Ev+0x184>)
 8000e48:	f107 0408 	add.w	r4, r7, #8
 8000e4c:	461d      	mov	r5, r3
 8000e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e56:	682b      	ldr	r3, [r5, #0]
 8000e58:	6023      	str	r3, [r4, #0]
	matrix buf3(3, 3, buf_val);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000e62:	2203      	movs	r2, #3
 8000e64:	2103      	movs	r1, #3
 8000e66:	f000 fb18 	bl	800149a <_ZN6matrixC1EiiPf>
	I33=buf3;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8000e70:	f107 0584 	add.w	r5, r7, #132	; 0x84
 8000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	37b0      	adds	r7, #176	; 0xb0
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	080045b4 	.word	0x080045b4

08000e94 <_ZN13kalman_filter7setAtoDE6matrixS0_S0_S0_>:

void kalman_filter::setAtoD(matrix a_in,matrix b_in,matrix c_in,matrix d_in){
 8000e94:	b084      	sub	sp, #16
 8000e96:	b4b0      	push	{r4, r5, r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	f107 001c 	add.w	r0, r7, #28
 8000ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	A=a_in;B=b_in,C=c_in;D=d_in;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	461d      	mov	r5, r3
 8000eaa:	f107 041c 	add.w	r4, r7, #28
 8000eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000eba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000ec4:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8000ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ed4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8000ede:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8000ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8000ef8:	f107 05a0 	add.w	r5, r7, #160	; 0xa0
 8000efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bcb0      	pop	{r4, r5, r7}
 8000f14:	b004      	add	sp, #16
 8000f16:	4770      	bx	lr

08000f18 <_ZN13kalman_filter6setQGRE6matrixS0_S0_>:
void kalman_filter::setQGR(matrix q_in,matrix g_in,matrix r_in){
 8000f18:	b084      	sub	sp, #16
 8000f1a:	b4b0      	push	{r4, r5, r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	f107 001c 	add.w	r0, r7, #28
 8000f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Q=q_in;G=g_in;R=r_in;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8000f30:	f107 051c 	add.w	r5, r7, #28
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8000f4a:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8000f64:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8000f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bcb0      	pop	{r4, r5, r7}
 8000f80:	b004      	add	sp, #16
 8000f82:	4770      	bx	lr

08000f84 <_ZN13kalman_filter3runE6matrixS0_>:

void kalman_filter::run(matrix u_in, matrix y_in) {
 8000f84:	b084      	sub	sp, #16
 8000f86:	b5b0      	push	{r4, r5, r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	f107 001c 	add.w	r0, r7, #28
 8000f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	U = u_in;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8000f9c:	f107 051c 	add.w	r5, r7, #28
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Y = y_in;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8000fb6:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	doKalman_gain();
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f835 	bl	800103a <_ZN13kalman_filter13doKalman_gainEv>
	doPredict_y();
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f894 	bl	80010fe <_ZN13kalman_filter11doPredict_yEv>
	doCorrect_p();
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f8cd 	bl	8001176 <_ZN13kalman_filter11doCorrect_pEv>
	doCorrect();
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f8fc 	bl	80011da <_ZN13kalman_filter9doCorrectEv>
	// Correct
	doPredict_x();
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f921 	bl	800122a <_ZN13kalman_filter11doPredict_xEv>
	doPredict_p();
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f94e 	bl	800128a <_ZN13kalman_filter11doPredict_pEv>
	doResult();
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f9af 	bl	8001352 <_ZN13kalman_filter8doResultEv>
	// Predict
	predictX_old = predictX_new;
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f502 7430 	add.w	r4, r2, #704	; 0x2c0
 8000ffc:	f503 753b 	add.w	r5, r3, #748	; 0x2ec
 8001000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800100c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	P_old = P_new;
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f502 740f 	add.w	r4, r2, #572	; 0x23c
 8001018:	f503 751a 	add.w	r5, r3, #616	; 0x268
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//update
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001036:	b004      	add	sp, #16
 8001038:	4770      	bx	lr

0800103a <_ZN13kalman_filter13doKalman_gainEv>:

void kalman_filter::doKalman_gain(){
 800103a:	b5b0      	push	{r4, r5, r7, lr}
 800103c:	b0c6      	sub	sp, #280	; 0x118
 800103e:	af00      	add	r7, sp, #0
 8001040:	6378      	str	r0, [r7, #52]	; 0x34
matrix C_tra = C.transpose();
 8001042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001044:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8001048:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fbeb 	bl	800182a <_ZN6matrix9transposeEv>
matrix buf2 = ((C*P_old)*C_tra)+R;
 8001054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001056:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 8001060:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fb19 	bl	800169c <_ZN6matrixmlERS_>
 800106a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800106e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001072:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fb10 	bl	800169c <_ZN6matrixmlERS_>
 800107c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001082:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001086:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fa42 	bl	8001514 <_ZN6matrixplERS_>
buf2=buf2.inv();
 8001090:	463b      	mov	r3, r7
 8001092:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fcad 	bl	80019f8 <_ZN6matrix3invEv>
 800109e:	463b      	mov	r3, r7
 80010a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
gainK = (P_old*C_tra)*buf2;
 80010b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b8:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 80010bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80010c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fae9 	bl	800169c <_ZN6matrixmlERS_>
 80010ca:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80010cc:	463b      	mov	r3, r7
 80010ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80010d2:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fae0 	bl	800169c <_ZN6matrixmlERS_>
 80010dc:	463b      	mov	r3, r7
 80010de:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80010e2:	461d      	mov	r5, r3
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010f4:	bf00      	nop
 80010f6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}

080010fe <_ZN13kalman_filter11doPredict_yEv>:

void kalman_filter::doPredict_y(){
 80010fe:	b5b0      	push	{r4, r5, r7, lr}
 8001100:	b0b0      	sub	sp, #192	; 0xc0
 8001102:	af00      	add	r7, sp, #0
 8001104:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = C*predictX_old;
 8001106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001108:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110e:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8001112:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fac0 	bl	800169c <_ZN6matrixmlERS_>
matrix buf2 = D*U;
 800111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111e:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8001128:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fab5 	bl	800169c <_ZN6matrixmlERS_>
errorY = (Y-buf)+buf2;
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8001138:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800113c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fa49 	bl	80015d8 <_ZN6matrixmiERS_>
 8001146:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001148:	463b      	mov	r3, r7
 800114a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800114e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f9de 	bl	8001514 <_ZN6matrixplERS_>
 8001158:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 800115c:	463d      	mov	r5, r7
 800115e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001166:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800116a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800116e:	bf00      	nop
 8001170:	37c0      	adds	r7, #192	; 0xc0
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}

08001176 <_ZN13kalman_filter11doCorrect_pEv>:

void kalman_filter::doCorrect_p(){
 8001176:	b5b0      	push	{r4, r5, r7, lr}
 8001178:	b0a4      	sub	sp, #144	; 0x90
 800117a:	af00      	add	r7, sp, #0
 800117c:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = gainK*C;
 800117e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001180:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8001184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001186:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800118a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fa84 	bl	800169c <_ZN6matrixmlERS_>
P_old = (I33-buf)*P_old;
 8001194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001196:	f503 71f2 	add.w	r1, r3, #484	; 0x1e4
 800119a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800119e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fa18 	bl	80015d8 <_ZN6matrixmiERS_>
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 80011ae:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80011b0:	463b      	mov	r3, r7
 80011b2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fa70 	bl	800169c <_ZN6matrixmlERS_>
 80011bc:	f504 740f 	add.w	r4, r4, #572	; 0x23c
 80011c0:	463d      	mov	r5, r7
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//P_old = (I33-(gainK*C))*P_old;
}
 80011d2:	bf00      	nop
 80011d4:	3790      	adds	r7, #144	; 0x90
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}

080011da <_ZN13kalman_filter9doCorrectEv>:

void kalman_filter::doCorrect(){
 80011da:	b5b0      	push	{r4, r5, r7, lr}
 80011dc:	b09a      	sub	sp, #104	; 0x68
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6378      	str	r0, [r7, #52]	; 0x34
predictX = (gainK*errorY)+predictX_old;
 80011e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e4:	f503 719a 	add.w	r1, r3, #308	; 0x134
 80011e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ea:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 80011ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fa52 	bl	800169c <_ZN6matrixmlERS_>
 80011f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fa:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 80011fe:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001200:	463b      	mov	r3, r7
 8001202:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f984 	bl	8001514 <_ZN6matrixplERS_>
 800120c:	f504 7425 	add.w	r4, r4, #660	; 0x294
 8001210:	463d      	mov	r5, r7
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001222:	bf00      	nop
 8001224:	3768      	adds	r7, #104	; 0x68
 8001226:	46bd      	mov	sp, r7
 8001228:	bdb0      	pop	{r4, r5, r7, pc}

0800122a <_ZN13kalman_filter11doPredict_xEv>:

void kalman_filter::doPredict_x(){
 800122a:	b5b0      	push	{r4, r5, r7, lr}
 800122c:	b0a4      	sub	sp, #144	; 0x90
 800122e:	af00      	add	r7, sp, #0
 8001230:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = B*U;
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 800123e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fa2a 	bl	800169c <_ZN6matrixmlERS_>
predictX_new = (A*predictX)+buf;
 8001248:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124c:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8001250:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fa21 	bl	800169c <_ZN6matrixmlERS_>
 800125a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800125c:	463b      	mov	r3, r7
 800125e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001262:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f954 	bl	8001514 <_ZN6matrixplERS_>
 800126c:	f504 743b 	add.w	r4, r4, #748	; 0x2ec
 8001270:	463d      	mov	r5, r7
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//predictX_new = (A*predictX)+(B*U);
}
 8001282:	bf00      	nop
 8001284:	3790      	adds	r7, #144	; 0x90
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}

0800128a <_ZN13kalman_filter11doPredict_pEv>:

void kalman_filter::doPredict_p(){
 800128a:	b5b0      	push	{r4, r5, r7, lr}
 800128c:	b0d0      	sub	sp, #320	; 0x140
 800128e:	af00      	add	r7, sp, #0
 8001290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001294:	6018      	str	r0, [r3, #0]
matrix A_tran = A.transpose();
 8001296:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fac1 	bl	800182a <_ZN6matrix9transposeEv>
matrix Q_tran = G.transpose();
 80012a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 80012b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fab6 	bl	800182a <_ZN6matrix9transposeEv>
matrix buf = (G*Q)*Q_tran;
 80012be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 80012c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80012d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f9e0 	bl	800169c <_ZN6matrixmlERS_>
 80012dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012e4:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f9d7 	bl	800169c <_ZN6matrixmlERS_>
P_new = ((A*P)*A_tran)+buf;
 80012ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80012fe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f9ca 	bl	800169c <_ZN6matrixmlERS_>
 8001308:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800130c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001310:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f9c1 	bl	800169c <_ZN6matrixmlERS_>
 800131a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800131e:	681c      	ldr	r4, [r3, #0]
 8001320:	463b      	mov	r3, r7
 8001322:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001326:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f8f2 	bl	8001514 <_ZN6matrixplERS_>
 8001330:	463b      	mov	r3, r7
 8001332:	f504 741a 	add.w	r4, r4, #616	; 0x268
 8001336:	461d      	mov	r5, r3
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001340:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//P_new = ((A*P)*A.transpose())+((G*Q)*G.transpose());
}
 8001348:	bf00      	nop
 800134a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800134e:	46bd      	mov	sp, r7
 8001350:	bdb0      	pop	{r4, r5, r7, pc}

08001352 <_ZN13kalman_filter8doResultEv>:

void kalman_filter::doResult(){
 8001352:	b5b0      	push	{r4, r5, r7, lr}
 8001354:	b0a4      	sub	sp, #144	; 0x90
 8001356:	af00      	add	r7, sp, #0
 8001358:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = D*U;
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8001360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001362:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8001366:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f996 	bl	800169c <_ZN6matrixmlERS_>
resultY = (C*predictX)+buf;
 8001370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001372:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001378:	f503 7225 	add.w	r2, r3, #660	; 0x294
 800137c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f98b 	bl	800169c <_ZN6matrixmlERS_>
 8001386:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001388:	463b      	mov	r3, r7
 800138a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800138e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f8be 	bl	8001514 <_ZN6matrixplERS_>
 8001398:	f504 7451 	add.w	r4, r4, #836	; 0x344
 800139c:	463d      	mov	r5, r7
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//resultY = (C*predictX)+(D*U);
resultX = predictX;
 80013ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b2:	f502 7446 	add.w	r4, r2, #792	; 0x318
 80013b6:	f503 7525 	add.w	r5, r3, #660	; 0x294
 80013ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80013ca:	bf00      	nop
 80013cc:	3790      	adds	r7, #144	; 0x90
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdb0      	pop	{r4, r5, r7, pc}

080013d2 <_ZN6matrixC1Ev>:
 *      Author: weera
 */

#include <matrix.h>

matrix::matrix() {
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	d_x = 1;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]
	d_y = 1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 1; i++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dc19      	bgt.n	8001424 <_ZN6matrixC1Ev+0x52>
		for (int j = 0; j < 1; ++j) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dc10      	bgt.n	800141c <_ZN6matrixC1Ev+0x4a>
			data[i][j] = 0.0;
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	4413      	add	r3, r2
 8001408:	3302      	adds	r3, #2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 1; ++j) {
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3301      	adds	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	e7eb      	b.n	80013f4 <_ZN6matrixC1Ev+0x22>
	for (int i = 0; i < 1; i++) {
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e7e2      	b.n	80013ea <_ZN6matrixC1Ev+0x18>
		}
	};
}
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_ZN6matrixC1Eii>:

matrix::matrix(int x, int y) {
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
	d_x = x;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	601a      	str	r2, [r3, #0]
	d_y = y;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	429a      	cmp	r2, r3
 8001454:	da1a      	bge.n	800148c <_ZN6matrixC1Eii+0x5a>
		for (int j = 0; j < y; ++j) {
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	da10      	bge.n	8001484 <_ZN6matrixC1Eii+0x52>
			data[i][j] = 0.0;
 8001462:	68f9      	ldr	r1, [r7, #12]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4413      	add	r3, r2
 8001470:	3302      	adds	r3, #2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < y; ++j) {
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	3301      	adds	r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	e7ea      	b.n	800145a <_ZN6matrixC1Eii+0x28>
	for (int i = 0; i < x; i++) {
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e7e0      	b.n	800144e <_ZN6matrixC1Eii+0x1c>
		}
	};
}
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4618      	mov	r0, r3
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_ZN6matrixC1EiiPf>:
matrix::matrix(int x, int y, float *data_in) {
 800149a:	b480      	push	{r7}
 800149c:	b087      	sub	sp, #28
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	603b      	str	r3, [r7, #0]
	d_x = x;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	601a      	str	r2, [r3, #0]
	d_y = y;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	da22      	bge.n	8001506 <_ZN6matrixC1EiiPf+0x6c>
		for (int j = 0; j < y; ++j) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	da18      	bge.n	80014fe <_ZN6matrixC1EiiPf+0x64>
			data[i][j] = data_in[i * y + j];
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	fb02 f203 	mul.w	r2, r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	3302      	adds	r3, #2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4403      	add	r3, r0
 80014f4:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < y; ++j) {
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	3301      	adds	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	e7e2      	b.n	80014c4 <_ZN6matrixC1EiiPf+0x2a>
	for (int i = 0; i < x; i++) {
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e7d8      	b.n	80014b8 <_ZN6matrixC1EiiPf+0x1e>
		}

	};
}
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN6matrixplERS_>:

matrix matrix::operator+(matrix &in) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	matrix result;
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff ff56 	bl	80013d2 <_ZN6matrixC1Ev>
	result.setx(d_y);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f929 	bl	8001784 <_ZN6matrix4setxEi>
	result.sety(d_x);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f931 	bl	80017a0 <_ZN6matrix4setyEi>

	for (int y = 0; y < d_y; y++) {
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	429a      	cmp	r2, r3
 800154a:	da40      	bge.n	80015ce <_ZN6matrixplERS_+0xba>
		for (int x = 0; x < d_x; x++) {
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	429a      	cmp	r2, r3
 8001558:	da35      	bge.n	80015c6 <_ZN6matrixplERS_+0xb2>
			int total = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
			total = data[x][y] + in.data[x][y];
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	3302      	adds	r3, #2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	ed93 7a00 	vldr	s14, [r3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	3302      	adds	r3, #2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001596:	ee17 3a90 	vmov	r3, s15
 800159a:	617b      	str	r3, [r7, #20]

			result.data[x][y] = total;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	68f9      	ldr	r1, [r7, #12]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	3302      	adds	r3, #2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	edc3 7a00 	vstr	s15, [r3]
		for (int x = 0; x < d_x; x++) {
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	e7c4      	b.n	8001550 <_ZN6matrixplERS_+0x3c>
	for (int y = 0; y < d_y; y++) {
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e7b9      	b.n	8001542 <_ZN6matrixplERS_+0x2e>
			// printf(" = %d\n",total);
		}
	}
	return result;
 80015ce:	bf00      	nop
}
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZN6matrixmiERS_>:

matrix matrix::operator-(matrix &in) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
	matrix result;
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fef4 	bl	80013d2 <_ZN6matrixC1Ev>
	result.setx(d_y);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4619      	mov	r1, r3
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 f8c7 	bl	8001784 <_ZN6matrix4setxEi>
	result.sety(d_x);
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f8cf 	bl	80017a0 <_ZN6matrix4setyEi>

	for (int y = 0; y < d_y; y++) {
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	429a      	cmp	r2, r3
 800160e:	da40      	bge.n	8001692 <_ZN6matrixmiERS_+0xba>
		for (int x = 0; x < d_x; x++) {
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	429a      	cmp	r2, r3
 800161c:	da35      	bge.n	800168a <_ZN6matrixmiERS_+0xb2>
			int total = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
			total = data[x][y] - in.data[x][y];
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	3302      	adds	r3, #2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	4413      	add	r3, r2
 8001648:	3302      	adds	r3, #2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165a:	ee17 3a90 	vmov	r3, s15
 800165e:	617b      	str	r3, [r7, #20]

			result.data[x][y] = total;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166a:	68f9      	ldr	r1, [r7, #12]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	3302      	adds	r3, #2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	edc3 7a00 	vstr	s15, [r3]
		for (int x = 0; x < d_x; x++) {
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	3301      	adds	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	e7c4      	b.n	8001614 <_ZN6matrixmiERS_+0x3c>
	for (int y = 0; y < d_y; y++) {
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	e7b9      	b.n	8001606 <_ZN6matrixmiERS_+0x2e>
			// printf(" = %d\n",total);
		}
	}
	return result;
 8001692:	bf00      	nop
}
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZN6matrixmlERS_>:

matrix matrix::operator*(matrix &in) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
	matrix result;
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fe92 	bl	80013d2 <_ZN6matrixC1Ev>
	result.setx(d_x);
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f865 	bl	8001784 <_ZN6matrix4setxEi>
	result.sety(in.d_y);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4619      	mov	r1, r3
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f86d 	bl	80017a0 <_ZN6matrix4setyEi>
	for (int m = 0; m < d_x; m++) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	da52      	bge.n	800177a <_ZN6matrixmlERS_+0xde>
		for (int n = 0; n < in.d_y; n++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	429a      	cmp	r2, r3
 80016e0:	da47      	bge.n	8001772 <_ZN6matrixmlERS_+0xd6>
			int total = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
			for (int k = 0; k < d_y; k++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	da29      	bge.n	8001748 <_ZN6matrixmlERS_+0xac>
				total = total + data[m][k] * in.data[k][n];
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	3302      	adds	r3, #2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	edd3 6a00 	vldr	s13, [r3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4413      	add	r3, r2
 8001724:	3302      	adds	r3, #2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173a:	ee17 3a90 	vmov	r3, s15
 800173e:	617b      	str	r3, [r7, #20]
			for (int k = 0; k < d_y; k++) {
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	3301      	adds	r3, #1
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	e7d0      	b.n	80016ea <_ZN6matrixmlERS_+0x4e>
			}
			result.data[m][n] = total;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4413      	add	r3, r2
 8001760:	3302      	adds	r3, #2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < in.d_y; n++) {
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	3301      	adds	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	e7b2      	b.n	80016d8 <_ZN6matrixmlERS_+0x3c>
	for (int m = 0; m < d_x; m++) {
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	e7a7      	b.n	80016ca <_ZN6matrixmlERS_+0x2e>
		}
	}
	return result;
 800177a:	bf00      	nop
}
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZN6matrix4setxEi>:

	return result;
}
*/

void matrix::setx(int x) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	d_x = x;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	601a      	str	r2, [r3, #0]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZN6matrix4setyEi>:
void matrix::sety(int y) {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	d_y = y;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	605a      	str	r2, [r3, #4]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_ZN6matrix4readEPf>:
void matrix::read(float *data_in) {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < d_x; i++) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	da24      	bge.n	800181e <_ZN6matrix4readEPf+0x62>
		for (int j = 0; j < d_y; ++j) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	429a      	cmp	r2, r3
 80017e0:	da19      	bge.n	8001816 <_ZN6matrix4readEPf+0x5a>
			data[i][j] = data_in[i * d_y + j];
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	fb02 f203 	mul.w	r2, r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4413      	add	r3, r2
 8001806:	3302      	adds	r3, #2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4403      	add	r3, r0
 800180c:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < d_y; ++j) {
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3301      	adds	r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	e7e0      	b.n	80017d8 <_ZN6matrix4readEPf+0x1c>
	for (int i = 0; i < d_x; i++) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e7d5      	b.n	80017ca <_ZN6matrix4readEPf+0xe>
		}
	};
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_ZN6matrix9transposeEv>:
matrix matrix::transpose() {
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
	matrix result;
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fdcc 	bl	80013d2 <_ZN6matrixC1Ev>
	result.setx(d_y);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff9f 	bl	8001784 <_ZN6matrix4setxEi>
	result.sety(d_x);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ffa7 	bl	80017a0 <_ZN6matrix4setyEi>
	for (int i = 0; i < d_x; i++) {
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	da24      	bge.n	80018aa <_ZN6matrix9transposeEv+0x80>
		for (int j = 0; j < d_y; ++j) {
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	da19      	bge.n	80018a2 <_ZN6matrix9transposeEv+0x78>
			result.data[j][i] = data[i][j];
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	3302      	adds	r3, #2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	3302      	adds	r3, #2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4403      	add	r3, r0
 8001898:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < d_y; ++j) {
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3301      	adds	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	e7e0      	b.n	8001864 <_ZN6matrix9transposeEv+0x3a>
	for (int i = 0; i < d_x; i++) {
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e7d5      	b.n	8001856 <_ZN6matrix9transposeEv+0x2c>
		}
	}
	return result;
 80018aa:	bf00      	nop
}
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN6matrix3detEv>:
float matrix::det() {
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	float det_val = 0;
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
	if (d_x == 3 && d_y == 3) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d167      	bne.n	800199a <_ZN6matrix3detEv+0xe6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d163      	bne.n	800199a <_ZN6matrix3detEv+0xe6>
		for (int i = 0; i < 3; i++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	dc7f      	bgt.n	80019dc <_ZN6matrix3detEv+0x128>
			det_val = det_val
					+ (data[0][i]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3302      	adds	r3, #2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	ed93 7a00 	vldr	s14, [r3]
							* (data[1][(i + 1) % 3] * data[2][(i + 2) % 3]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c59      	adds	r1, r3, #1
 80018ee:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <_ZN6matrix3detEv+0x140>)
 80018f0:	fb83 3201 	smull	r3, r2, r3, r1
 80018f4:	17cb      	asrs	r3, r1, #31
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	1aca      	subs	r2, r1, r3
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	1d53      	adds	r3, r2, #5
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	edd3 6a00 	vldr	s13, [r3]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c99      	adds	r1, r3, #2
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <_ZN6matrix3detEv+0x140>)
 8001912:	fb83 3201 	smull	r3, r2, r3, r1
 8001916:	17cb      	asrs	r3, r1, #31
 8001918:	1ad2      	subs	r2, r2, r3
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	1aca      	subs	r2, r1, r3
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f102 0308 	add.w	r3, r2, #8
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee66 6aa7 	vmul.f32	s13, s13, s15
									- data[1][(i + 2) % 3]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c99      	adds	r1, r3, #2
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <_ZN6matrix3detEv+0x140>)
 800193a:	fb83 3201 	smull	r3, r2, r3, r1
 800193e:	17cb      	asrs	r3, r1, #31
 8001940:	1ad2      	subs	r2, r2, r3
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	1aca      	subs	r2, r1, r3
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	1d53      	adds	r3, r2, #5
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	ed93 6a00 	vldr	s12, [r3]
											* data[2][(i + 1) % 3]));
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1c59      	adds	r1, r3, #1
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <_ZN6matrix3detEv+0x140>)
 800195c:	fb83 3201 	smull	r3, r2, r3, r1
 8001960:	17cb      	asrs	r3, r1, #31
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	1aca      	subs	r2, r1, r3
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	f102 0308 	add.w	r3, r2, #8
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee66 7a27 	vmul.f32	s15, s12, s15
									- data[1][(i + 2) % 3]
 800197e:	ee76 7ae7 	vsub.f32	s15, s13, s15
							* (data[1][(i + 1) % 3] * data[2][(i + 2) % 3]
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
			det_val = det_val
 8001986:	ed97 7a03 	vldr	s14, [r7, #12]
 800198a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198e:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < 3; i++) {
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3301      	adds	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	e79d      	b.n	80018d6 <_ZN6matrix3detEv+0x22>
		}
	} else if (d_x == 2 && d_y == 2) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d118      	bne.n	80019d4 <_ZN6matrix3detEv+0x120>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d114      	bne.n	80019d4 <_ZN6matrix3detEv+0x120>
		det_val = (data[0][0] * data[1][1]) - (data[0][1] * data[1][0]);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80019b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ce:	edc7 7a03 	vstr	s15, [r7, #12]
 80019d2:	e004      	b.n	80019de <_ZN6matrix3detEv+0x12a>
	} else
		det_val = 1;
 80019d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e000      	b.n	80019de <_ZN6matrix3detEv+0x12a>
		}
 80019dc:	bf00      	nop

	return det_val;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	ee07 3a90 	vmov	s15, r3

}
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	55555556 	.word	0x55555556

080019f8 <_ZN6matrix3invEv>:
			result.data[m][n] = data[m][n]*in;
		}
	}
	return result;
}
matrix matrix::inv() {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	float det = matrix::det();
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f7ff ff56 	bl	80018b4 <_ZN6matrix3detEv>
 8001a08:	ed87 0a03 	vstr	s0, [r7, #12]
	matrix result(3, 3);
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	2103      	movs	r1, #3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fd0e 	bl	8001432 <_ZN6matrixC1Eii>
	if (d_x == 3 && d_y == 3) {
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	f040 80af 	bne.w	8001b7e <_ZN6matrix3invEv+0x186>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	f040 80aa 	bne.w	8001b7e <_ZN6matrix3invEv+0x186>
		for (int i = 0; i < 3; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	f300 80a4 	bgt.w	8001b7e <_ZN6matrix3invEv+0x186>
			for (int j = 0; j < 3; j++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	f300 809a 	bgt.w	8001b76 <_ZN6matrix3invEv+0x17e>
				result.data[j][i] = ((data[(i + 1) % 3][(j + 1) % 3]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001a48:	fb83 3201 	smull	r3, r2, r3, r1
 8001a4c:	17cb      	asrs	r3, r1, #31
 8001a4e:	1ad2      	subs	r2, r2, r3
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	1aca      	subs	r2, r1, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1c58      	adds	r0, r3, #1
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001a5e:	fb83 3100 	smull	r3, r1, r3, r0
 8001a62:	17c3      	asrs	r3, r0, #31
 8001a64:	1ac9      	subs	r1, r1, r3
 8001a66:	460b      	mov	r3, r1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	440b      	add	r3, r1
 8001a6c:	1ac1      	subs	r1, r0, r3
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	3302      	adds	r3, #2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4403      	add	r3, r0
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
						* data[(i + 2) % 3][(j + 2) % 3])
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	1c99      	adds	r1, r3, #2
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001a88:	fb83 3201 	smull	r3, r2, r3, r1
 8001a8c:	17cb      	asrs	r3, r1, #31
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	1aca      	subs	r2, r1, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1c98      	adds	r0, r3, #2
 8001a9c:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001a9e:	fb83 3100 	smull	r3, r1, r3, r0
 8001aa2:	17c3      	asrs	r3, r0, #31
 8001aa4:	1ac9      	subs	r1, r1, r3
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	440b      	add	r3, r1
 8001aac:	1ac1      	subs	r1, r0, r3
 8001aae:	6838      	ldr	r0, [r7, #0]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3302      	adds	r3, #2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4403      	add	r3, r0
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
						- (data[(i + 1) % 3][(j + 2) % 3]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1c59      	adds	r1, r3, #1
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001acc:	fb83 3201 	smull	r3, r2, r3, r1
 8001ad0:	17cb      	asrs	r3, r1, #31
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	1aca      	subs	r2, r1, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1c98      	adds	r0, r3, #2
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001ae2:	fb83 3100 	smull	r3, r1, r3, r0
 8001ae6:	17c3      	asrs	r3, r0, #31
 8001ae8:	1ac9      	subs	r1, r1, r3
 8001aea:	460b      	mov	r3, r1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	440b      	add	r3, r1
 8001af0:	1ac1      	subs	r1, r0, r3
 8001af2:	6838      	ldr	r0, [r7, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	3302      	adds	r3, #2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4403      	add	r3, r0
 8001b02:	edd3 6a00 	vldr	s13, [r3]
								* data[(i + 2) % 3][(j + 1) % 3])) / det;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	1c99      	adds	r1, r3, #2
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001b0c:	fb83 3201 	smull	r3, r2, r3, r1
 8001b10:	17cb      	asrs	r3, r1, #31
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	1aca      	subs	r2, r1, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1c58      	adds	r0, r3, #1
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <_ZN6matrix3invEv+0x190>)
 8001b22:	fb83 3100 	smull	r3, r1, r3, r0
 8001b26:	17c3      	asrs	r3, r0, #31
 8001b28:	1ac9      	subs	r1, r1, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	440b      	add	r3, r1
 8001b30:	1ac1      	subs	r1, r0, r3
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4403      	add	r3, r0
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
						- (data[(i + 1) % 3][(j + 2) % 3]
 8001b4a:	ee77 6a67 	vsub.f32	s13, s14, s15
								* data[(i + 2) % 3][(j + 1) % 3])) / det;
 8001b4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
				result.data[j][i] = ((data[(i + 1) % 3][(j + 1) % 3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4413      	add	r3, r2
 8001b64:	3302      	adds	r3, #2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 0; j < 3; j++) {
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	3301      	adds	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	e761      	b.n	8001a3a <_ZN6matrix3invEv+0x42>
		for (int i = 0; i < 3; i++) {
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e757      	b.n	8001a2e <_ZN6matrix3invEv+0x36>
			}
		}
	}
	return result;
 8001b7e:	bf00      	nop
}
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	55555556 	.word	0x55555556

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8e:	b0c5      	sub	sp, #276	; 0x114
 8001b90:	af2a      	add	r7, sp, #168	; 0xa8
  /* USER CODE BEGIN 1 */

	float dt = 0.0001;
 8001b92:	4b99      	ldr	r3, [pc, #612]	; (8001df8 <main+0x26c>)
 8001b94:	667b      	str	r3, [r7, #100]	; 0x64
	float data_A[9] = {1,dt,dt*dt/2,0,1,dt,0,0,1};
 8001b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 fcf4 	bl	800458c <memset>
 8001ba4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001baa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bba:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001bbe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8001bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data_B[3] = {0,0,0};
 8001bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
	float data_C[3] = {1,0,0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bee:	623b      	str	r3, [r7, #32]
	float data_R[1] = {0.001};
 8001bf0:	4b82      	ldr	r3, [pc, #520]	; (8001dfc <main+0x270>)
 8001bf2:	61fb      	str	r3, [r7, #28]
	float buf_g=(dt*dt)/2;
 8001bf4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001bf8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c04:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float data_G[3] = {buf_g,dt,1.0};
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c20:	617b      	str	r3, [r7, #20]
	float data_Q[1] = {0.001};
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <main+0x270>)
 8001c24:	60fb      	str	r3, [r7, #12]
	float data_D[1] = {0};
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]

	float data_y[1] = {0.001};
 8001c2c:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <main+0x270>)
 8001c2e:	607b      	str	r3, [r7, #4]
	float data_u[1] = {0};
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]

	A.read(data_A);
 8001c36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4870      	ldr	r0, [pc, #448]	; (8001e00 <main+0x274>)
 8001c3e:	f7ff fdbd 	bl	80017bc <_ZN6matrix4readEPf>
	B.read(data_B);
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	486e      	ldr	r0, [pc, #440]	; (8001e04 <main+0x278>)
 8001c4a:	f7ff fdb7 	bl	80017bc <_ZN6matrix4readEPf>
	C.read(data_C);
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	4619      	mov	r1, r3
 8001c54:	486c      	ldr	r0, [pc, #432]	; (8001e08 <main+0x27c>)
 8001c56:	f7ff fdb1 	bl	80017bc <_ZN6matrix4readEPf>
	D.read(data_D);
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	486a      	ldr	r0, [pc, #424]	; (8001e0c <main+0x280>)
 8001c62:	f7ff fdab 	bl	80017bc <_ZN6matrix4readEPf>

	G.read(data_G);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4868      	ldr	r0, [pc, #416]	; (8001e10 <main+0x284>)
 8001c6e:	f7ff fda5 	bl	80017bc <_ZN6matrix4readEPf>
	Q.read(data_Q);
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4619      	mov	r1, r3
 8001c78:	4866      	ldr	r0, [pc, #408]	; (8001e14 <main+0x288>)
 8001c7a:	f7ff fd9f 	bl	80017bc <_ZN6matrix4readEPf>
	R.read(data_R);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4864      	ldr	r0, [pc, #400]	; (8001e18 <main+0x28c>)
 8001c86:	f7ff fd99 	bl	80017bc <_ZN6matrix4readEPf>
	u.read(data_u);
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4863      	ldr	r0, [pc, #396]	; (8001e1c <main+0x290>)
 8001c90:	f7ff fd94 	bl	80017bc <_ZN6matrix4readEPf>
	y.read(data_y);
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4861      	ldr	r0, [pc, #388]	; (8001e20 <main+0x294>)
 8001c9a:	f7ff fd8f 	bl	80017bc <_ZN6matrix4readEPf>


	filter.setAtoD(A, B, C, D);
 8001c9e:	4e58      	ldr	r6, [pc, #352]	; (8001e00 <main+0x274>)
 8001ca0:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <main+0x280>)
 8001ca2:	ac1e      	add	r4, sp, #120	; 0x78
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cb6:	4b54      	ldr	r3, [pc, #336]	; (8001e08 <main+0x27c>)
 8001cb8:	ac13      	add	r4, sp, #76	; 0x4c
 8001cba:	461d      	mov	r5, r3
 8001cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <main+0x278>)
 8001cce:	ac08      	add	r4, sp, #32
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ce2:	466d      	mov	r5, sp
 8001ce4:	f106 040c 	add.w	r4, r6, #12
 8001ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001cf4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001cf8:	484a      	ldr	r0, [pc, #296]	; (8001e24 <main+0x298>)
 8001cfa:	f7ff f8cb 	bl	8000e94 <_ZN13kalman_filter7setAtoDE6matrixS0_S0_S0_>
	filter.setQGR(Q, G, R);
 8001cfe:	4e45      	ldr	r6, [pc, #276]	; (8001e14 <main+0x288>)
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <main+0x28c>)
 8001d02:	ac13      	add	r4, sp, #76	; 0x4c
 8001d04:	461d      	mov	r5, r3
 8001d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <main+0x284>)
 8001d18:	ac08      	add	r4, sp, #32
 8001d1a:	461d      	mov	r5, r3
 8001d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d2c:	466d      	mov	r5, sp
 8001d2e:	f106 040c 	add.w	r4, r6, #12
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d3e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d42:	4838      	ldr	r0, [pc, #224]	; (8001e24 <main+0x298>)
 8001d44:	f7ff f8e8 	bl	8000f18 <_ZN13kalman_filter6setQGRE6matrixS0_S0_>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d48:	f000 fc8c 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d4c:	f000 f878 	bl	8001e40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d50:	f000 f9d4 	bl	80020fc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001d54:	f000 f9a4 	bl	80020a0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8001d58:	f000 f8e4 	bl	8001f24 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001d5c:	f000 f944 	bl	8001fe8 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001d60:	4831      	ldr	r0, [pc, #196]	; (8001e28 <main+0x29c>)
 8001d62:	f001 fc89 	bl	8003678 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d66:	213c      	movs	r1, #60	; 0x3c
 8001d68:	4830      	ldr	r0, [pc, #192]	; (8001e2c <main+0x2a0>)
 8001d6a:	f001 fd8d 	bl	8003888 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 fcea 	bl	8002748 <HAL_Delay>
	float RawRead = read_pos();
 8001d74:	f000 fa6c 	bl	8002250 <_Z8read_posv>
 8001d78:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	DegRel[0] = (RawRead/3072.0)*360.0;
 8001d7c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001d7e:	f7fe fb8f 	bl	80004a0 <__aeabi_f2d>
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <main+0x2a4>)
 8001d88:	f7fe fd0c 	bl	80007a4 <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <main+0x2a8>)
 8001d9a:	f7fe fbd9 	bl	8000550 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fde5 	bl	8000974 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <main+0x2ac>)
 8001dae:	6013      	str	r3, [r2, #0]
	y.read(DegRel);
 8001db0:	4921      	ldr	r1, [pc, #132]	; (8001e38 <main+0x2ac>)
 8001db2:	481b      	ldr	r0, [pc, #108]	; (8001e20 <main+0x294>)
 8001db4:	f7ff fd02 	bl	80017bc <_ZN6matrix4readEPf>
	  filter.run(u, y);
 8001db8:	4e18      	ldr	r6, [pc, #96]	; (8001e1c <main+0x290>)
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <main+0x294>)
 8001dbc:	ac08      	add	r4, sp, #32
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001dd0:	466d      	mov	r5, sp
 8001dd2:	f106 040c 	add.w	r4, r6, #12
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001de2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001de6:	480f      	ldr	r0, [pc, #60]	; (8001e24 <main+0x298>)
 8001de8:	f7ff f8cc 	bl	8000f84 <_ZN13kalman_filter3runE6matrixS0_>
	  pos = filter.resultX.data[0][0];
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <main+0x298>)
 8001dee:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <main+0x2b0>)
 8001df4:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001df6:	e7ba      	b.n	8001d6e <main+0x1e2>
 8001df8:	38d1b717 	.word	0x38d1b717
 8001dfc:	3a83126f 	.word	0x3a83126f
 8001e00:	20000108 	.word	0x20000108
 8001e04:	20000134 	.word	0x20000134
 8001e08:	20000160 	.word	0x20000160
 8001e0c:	2000018c 	.word	0x2000018c
 8001e10:	200001e4 	.word	0x200001e4
 8001e14:	20000210 	.word	0x20000210
 8001e18:	200001b8 	.word	0x200001b8
 8001e1c:	20000268 	.word	0x20000268
 8001e20:	2000023c 	.word	0x2000023c
 8001e24:	200004d0 	.word	0x200004d0
 8001e28:	20000074 	.word	0x20000074
 8001e2c:	2000002c 	.word	0x2000002c
 8001e30:	40a80000 	.word	0x40a80000
 8001e34:	40768000 	.word	0x40768000
 8001e38:	20000840 	.word	0x20000840
 8001e3c:	20000844 	.word	0x20000844

08001e40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b094      	sub	sp, #80	; 0x50
 8001e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	2230      	movs	r2, #48	; 0x30
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fb9c 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <_Z18SystemClock_Configv+0xdc>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <_Z18SystemClock_Configv+0xdc>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <_Z18SystemClock_Configv+0xdc>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <_Z18SystemClock_Configv+0xe0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a25      	ldr	r2, [pc, #148]	; (8001f20 <_Z18SystemClock_Configv+0xe0>)
 8001e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <_Z18SystemClock_Configv+0xe0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 ff13 	bl	8002cf0 <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001eda:	f000 f9d1 	bl	8002280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2103      	movs	r1, #3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 f970 	bl	80031e0 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001f10:	f000 f9b6 	bl	8002280 <Error_Handler>
  }
}
 8001f14:	bf00      	nop
 8001f16:	3750      	adds	r7, #80	; 0x50
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000

08001f24 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fb2a 	bl	800458c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f42:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <_ZL12MX_TIM1_Initv+0xc0>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f54:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001f58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4619      	mov	r1, r3
 8001f96:	4812      	ldr	r0, [pc, #72]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001f98:	f001 fbd0 	bl	800373c <HAL_TIM_Encoder_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bf14      	ite	ne
 8001fa2:	2301      	movne	r3, #1
 8001fa4:	2300      	moveq	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8001fac:	f000 f968 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <_ZL12MX_TIM1_Initv+0xbc>)
 8001fbe:	f002 f829 	bl	8004014 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8001fd2:	f000 f955 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	3730      	adds	r7, #48	; 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000002c 	.word	0x2000002c
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 8002006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 800200e:	2263      	movs	r2, #99	; 0x63
 8002010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 800201a:	f04f 32ff 	mov.w	r2, #4294967295
 800201e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800202c:	481b      	ldr	r0, [pc, #108]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 800202e:	f001 fad3 	bl	80035d8 <HAL_TIM_Base_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8002042:	f000 f91d 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	4619      	mov	r1, r3
 8002052:	4812      	ldr	r0, [pc, #72]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 8002054:	f001 fdae 	bl	8003bb4 <HAL_TIM_ConfigClockSource>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8002068:	f000 f90a 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	4619      	mov	r1, r3
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <_ZL12MX_TIM2_Initv+0xb4>)
 800207a:	f001 ffcb 	bl	8004014 <HAL_TIMEx_MasterConfigSynchronization>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 800208e:	f000 f8f7 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000074 	.word	0x20000074

080020a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020a6:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d6:	4807      	ldr	r0, [pc, #28]	; (80020f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020d8:	f002 f81e 	bl	8004118 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80020ec:	f000 f8c8 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200000bc 	.word	0x200000bc
 80020f8:	40004400 	.word	0x40004400

080020fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a32      	ldr	r2, [pc, #200]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2120      	movs	r1, #32
 8002186:	4818      	ldr	r0, [pc, #96]	; (80021e8 <_ZL12MX_GPIO_Initv+0xec>)
 8002188:	f000 fd98 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800218c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002192:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4812      	ldr	r0, [pc, #72]	; (80021ec <_ZL12MX_GPIO_Initv+0xf0>)
 80021a4:	f000 fc06 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021a8:	2303      	movs	r3, #3
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	480b      	ldr	r0, [pc, #44]	; (80021e8 <_ZL12MX_GPIO_Initv+0xec>)
 80021bc:	f000 fbfa 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021c0:	2320      	movs	r3, #32
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4804      	ldr	r0, [pc, #16]	; (80021e8 <_ZL12MX_GPIO_Initv+0xec>)
 80021d8:	f000 fbec 	bl	80029b4 <HAL_GPIO_Init>

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020800 	.word	0x40020800

080021f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b4b0      	push	{r4, r5, r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d109      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f112 34ff 	adds.w	r4, r2, #4294967295
 800220a:	f143 0500 	adc.w	r5, r3, #0
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002210:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d109      	bne.n	8002230 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		pos_stack += 3071;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800224c <HAL_TIM_PeriodElapsedCallback+0x5c>
 8002226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800222c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bcb0      	pop	{r4, r5, r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000074 	.word	0x20000074
 8002240:	20000100 	.word	0x20000100
 8002244:	2000002c 	.word	0x2000002c
 8002248:	20000848 	.word	0x20000848
 800224c:	453ff000 	.word	0x453ff000

08002250 <_Z8read_posv>:
float read_pos(){
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	return pos_stack + htim1.Instance->CNT;
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <_Z8read_posv+0x28>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <_Z8read_posv+0x2c>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800226c:	eeb0 0a67 	vmov.f32	s0, s15
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	2000002c 	.word	0x2000002c
 800227c:	20000848 	.word	0x20000848

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002288:	e7fe      	b.n	8002288 <Error_Handler+0x8>
	...

0800228c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d15b      	bne.n	8002354 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d156      	bne.n	8002354 <_Z41__static_initialization_and_destruction_0ii+0xc8>
matrix A(3,3);
 80022a6:	2203      	movs	r2, #3
 80022a8:	2103      	movs	r1, #3
 80022aa:	482c      	ldr	r0, [pc, #176]	; (800235c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80022ac:	f7ff f8c1 	bl	8001432 <_ZN6matrixC1Eii>
matrix B(3,3);
 80022b0:	2203      	movs	r2, #3
 80022b2:	2103      	movs	r1, #3
 80022b4:	482a      	ldr	r0, [pc, #168]	; (8002360 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80022b6:	f7ff f8bc 	bl	8001432 <_ZN6matrixC1Eii>
matrix C(3,1);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2103      	movs	r1, #3
 80022be:	4829      	ldr	r0, [pc, #164]	; (8002364 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80022c0:	f7ff f8b7 	bl	8001432 <_ZN6matrixC1Eii>
matrix D(1,1);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2101      	movs	r1, #1
 80022c8:	4827      	ldr	r0, [pc, #156]	; (8002368 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80022ca:	f7ff f8b2 	bl	8001432 <_ZN6matrixC1Eii>
matrix R(1,1);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2101      	movs	r1, #1
 80022d2:	4826      	ldr	r0, [pc, #152]	; (800236c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80022d4:	f7ff f8ad 	bl	8001432 <_ZN6matrixC1Eii>
matrix G(1,3);
 80022d8:	2203      	movs	r2, #3
 80022da:	2101      	movs	r1, #1
 80022dc:	4824      	ldr	r0, [pc, #144]	; (8002370 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80022de:	f7ff f8a8 	bl	8001432 <_ZN6matrixC1Eii>
matrix Q(1,1);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2101      	movs	r1, #1
 80022e6:	4823      	ldr	r0, [pc, #140]	; (8002374 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80022e8:	f7ff f8a3 	bl	8001432 <_ZN6matrixC1Eii>
matrix y(1,1);
 80022ec:	2201      	movs	r2, #1
 80022ee:	2101      	movs	r1, #1
 80022f0:	4821      	ldr	r0, [pc, #132]	; (8002378 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80022f2:	f7ff f89e 	bl	8001432 <_ZN6matrixC1Eii>
matrix u(1,1);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2101      	movs	r1, #1
 80022fa:	4820      	ldr	r0, [pc, #128]	; (800237c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80022fc:	f7ff f899 	bl	8001432 <_ZN6matrixC1Eii>
matrix gainK,errorY,U,Y,I33;
 8002300:	481f      	ldr	r0, [pc, #124]	; (8002380 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002302:	f7ff f866 	bl	80013d2 <_ZN6matrixC1Ev>
 8002306:	481f      	ldr	r0, [pc, #124]	; (8002384 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002308:	f7ff f863 	bl	80013d2 <_ZN6matrixC1Ev>
 800230c:	481e      	ldr	r0, [pc, #120]	; (8002388 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800230e:	f7ff f860 	bl	80013d2 <_ZN6matrixC1Ev>
 8002312:	481e      	ldr	r0, [pc, #120]	; (800238c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002314:	f7ff f85d 	bl	80013d2 <_ZN6matrixC1Ev>
 8002318:	481d      	ldr	r0, [pc, #116]	; (8002390 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800231a:	f7ff f85a 	bl	80013d2 <_ZN6matrixC1Ev>
matrix P,P_old,P_new;
 800231e:	481d      	ldr	r0, [pc, #116]	; (8002394 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002320:	f7ff f857 	bl	80013d2 <_ZN6matrixC1Ev>
 8002324:	481c      	ldr	r0, [pc, #112]	; (8002398 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8002326:	f7ff f854 	bl	80013d2 <_ZN6matrixC1Ev>
 800232a:	481c      	ldr	r0, [pc, #112]	; (800239c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800232c:	f7ff f851 	bl	80013d2 <_ZN6matrixC1Ev>
matrix predictX,predictX_old,predictX_new;
 8002330:	481b      	ldr	r0, [pc, #108]	; (80023a0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8002332:	f7ff f84e 	bl	80013d2 <_ZN6matrixC1Ev>
 8002336:	481b      	ldr	r0, [pc, #108]	; (80023a4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8002338:	f7ff f84b 	bl	80013d2 <_ZN6matrixC1Ev>
 800233c:	481a      	ldr	r0, [pc, #104]	; (80023a8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800233e:	f7ff f848 	bl	80013d2 <_ZN6matrixC1Ev>
matrix resultX,resultY;
 8002342:	481a      	ldr	r0, [pc, #104]	; (80023ac <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8002344:	f7ff f845 	bl	80013d2 <_ZN6matrixC1Ev>
 8002348:	4819      	ldr	r0, [pc, #100]	; (80023b0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800234a:	f7ff f842 	bl	80013d2 <_ZN6matrixC1Ev>
kalman_filter filter;
 800234e:	4819      	ldr	r0, [pc, #100]	; (80023b4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8002350:	f7fe fcdc 	bl	8000d0c <_ZN13kalman_filterC1Ev>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000108 	.word	0x20000108
 8002360:	20000134 	.word	0x20000134
 8002364:	20000160 	.word	0x20000160
 8002368:	2000018c 	.word	0x2000018c
 800236c:	200001b8 	.word	0x200001b8
 8002370:	200001e4 	.word	0x200001e4
 8002374:	20000210 	.word	0x20000210
 8002378:	2000023c 	.word	0x2000023c
 800237c:	20000268 	.word	0x20000268
 8002380:	20000294 	.word	0x20000294
 8002384:	200002c0 	.word	0x200002c0
 8002388:	200002ec 	.word	0x200002ec
 800238c:	20000318 	.word	0x20000318
 8002390:	20000344 	.word	0x20000344
 8002394:	20000370 	.word	0x20000370
 8002398:	2000039c 	.word	0x2000039c
 800239c:	200003c8 	.word	0x200003c8
 80023a0:	200003f4 	.word	0x200003f4
 80023a4:	20000420 	.word	0x20000420
 80023a8:	2000044c 	.word	0x2000044c
 80023ac:	20000478 	.word	0x20000478
 80023b0:	200004a4 	.word	0x200004a4
 80023b4:	200004d0 	.word	0x200004d0

080023b8 <_GLOBAL__sub_I_htim1>:
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff ff63 	bl	800228c <_Z41__static_initialization_and_destruction_0ii>
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <HAL_MspInit+0x4c>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_MspInit+0x4c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_MspInit+0x4c>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_MspInit+0x4c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002406:	2007      	movs	r0, #7
 8002408:	f000 fa92 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	; (800249c <HAL_TIM_Encoder_MspInit+0x84>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d12c      	bne.n	8002494 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002472:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002484:	2301      	movs	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002490:	f000 fa90 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40010000 	.word	0x40010000
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020000 	.word	0x40020000

080024a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d115      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	201c      	movs	r0, #28
 80024dc:	f000 fa33 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e0:	201c      	movs	r0, #28
 80024e2:	f000 fa4c 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800

080024f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_UART_MspInit+0x84>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d12b      	bne.n	800256e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_UART_MspInit+0x88>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_UART_MspInit+0x88>)
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_UART_MspInit+0x88>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_UART_MspInit+0x88>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_UART_MspInit+0x88>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_UART_MspInit+0x88>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800254e:	230c      	movs	r3, #12
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800255e:	2307      	movs	r3, #7
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	; (8002580 <HAL_UART_MspInit+0x8c>)
 800256a:	f000 fa23 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40004400 	.word	0x40004400
 800257c:	40023800 	.word	0x40023800
 8002580:	40020000 	.word	0x40020000

08002584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <NMI_Handler+0x4>

0800258a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <MemManage_Handler+0x4>

08002596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <BusFault_Handler+0x4>

0800259c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <UsageFault_Handler+0x4>

080025a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d0:	f000 f89a 	bl	8002708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM2_IRQHandler+0x10>)
 80025de:	f001 f9e1 	bl	80039a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000074 	.word	0x20000074

080025ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <SystemInit+0x20>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <SystemInit+0x20>)
 80025f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002614:	480d      	ldr	r0, [pc, #52]	; (800264c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002618:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800261c:	e002      	b.n	8002624 <LoopCopyDataInit>

0800261e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002622:	3304      	adds	r3, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002628:	d3f9      	bcc.n	800261e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800262c:	4c0b      	ldr	r4, [pc, #44]	; (800265c <LoopFillZerobss+0x26>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002630:	e001      	b.n	8002636 <LoopFillZerobss>

08002632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002634:	3204      	adds	r2, #4

08002636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002638:	d3fb      	bcc.n	8002632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800263a:	f7ff ffd7 	bl	80025ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263e:	f001 ff81 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002642:	f7ff faa3 	bl	8001b8c <main>
  bx  lr    
 8002646:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002654:	08004604 	.word	0x08004604
  ldr r2, =_sbss
 8002658:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800265c:	20000850 	.word	0x20000850

08002660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_Init+0x40>)
 800266e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_Init+0x40>)
 800267a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_Init+0x40>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268c:	2003      	movs	r0, #3
 800268e:	f000 f94f 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002692:	2000      	movs	r0, #0
 8002694:	f000 f808 	bl	80026a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002698:	f7ff fe96 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x54>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x58>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f967 	bl	800299a <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00e      	b.n	80026f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d80a      	bhi.n	80026f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f000 f92f 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e8:	4a06      	ldr	r2, [pc, #24]	; (8002704 <HAL_InitTick+0x5c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000008 	.word	0x20000008
 8002704:	20000004 	.word	0x20000004

08002708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x20>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x24>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_IncTick+0x24>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000008 	.word	0x20000008
 800272c:	2000084c 	.word	0x2000084c

08002730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000084c 	.word	0x2000084c

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffde 	bl	8002730 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008

08002790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff3e 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff31 	bl	80027f4 <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e159      	b.n	8002c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8148 	bne.w	8002c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d005      	beq.n	8002a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d130      	bne.n	8002a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0201 	and.w	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d017      	beq.n	8002aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d123      	bne.n	8002af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a2 	beq.w	8002c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x202>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_GPIO_Init+0x2f4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x1fe>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a47      	ldr	r2, [pc, #284]	; (8002cac <HAL_GPIO_Init+0x2f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x1fa>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_GPIO_Init+0x2fc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x1f6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <HAL_GPIO_Init+0x300>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x1f2>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c78:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f aea2 	bls.w	80029d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e264      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4ba3      	ldr	r3, [pc, #652]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4ba0      	ldr	r3, [pc, #640]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b9d      	ldr	r3, [pc, #628]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b99      	ldr	r3, [pc, #612]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e23f      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b91      	ldr	r3, [pc, #580]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b8b      	ldr	r3, [pc, #556]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a8a      	ldr	r2, [pc, #552]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a87      	ldr	r2, [pc, #540]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b84      	ldr	r3, [pc, #528]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a83      	ldr	r2, [pc, #524]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b81      	ldr	r3, [pc, #516]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff fcc2 	bl	8002730 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff fcbe 	bl	8002730 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e204      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fcae 	bl	8002730 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff fcaa 	bl	8002730 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f0      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b6c      	ldr	r3, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b65      	ldr	r3, [pc, #404]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b62      	ldr	r3, [pc, #392]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b5f      	ldr	r3, [pc, #380]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c4      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4952      	ldr	r1, [pc, #328]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <HAL_RCC_OscConfig+0x2b0>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7ff fc63 	bl	8002730 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff fc5f 	bl	8002730 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a5      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4940      	ldr	r1, [pc, #256]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <HAL_RCC_OscConfig+0x2b0>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fc42 	bl	8002730 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fc3e 	bl	8002730 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e184      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d030      	beq.n	8002f3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x2b4>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7ff fc22 	bl	8002730 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff fc1e 	bl	8002730 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e164      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e015      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_RCC_OscConfig+0x2b4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7ff fc0b 	bl	8002730 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7ff fc07 	bl	8002730 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e14d      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a0 	beq.w	800308a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x2b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_RCC_OscConfig+0x2b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_RCC_OscConfig+0x2b8>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7ff fbcd 	bl	8002730 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e011      	b.n	8002fbe <HAL_RCC_OscConfig+0x2ce>
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
 8002fa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7ff fbc0 	bl	8002730 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e106      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b85      	ldr	r3, [pc, #532]	; (80031d4 <HAL_RCC_OscConfig+0x4e4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d106      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x2f0>
 8002fd2:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	e01c      	b.n	800301a <HAL_RCC_OscConfig+0x32a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x312>
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a7a      	ldr	r2, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a77      	ldr	r2, [pc, #476]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x32a>
 8003002:	4b75      	ldr	r3, [pc, #468]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a74      	ldr	r2, [pc, #464]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b72      	ldr	r3, [pc, #456]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a71      	ldr	r2, [pc, #452]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d015      	beq.n	800304e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7ff fb85 	bl	8002730 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7ff fb81 	bl	8002730 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0c5      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ee      	beq.n	800302a <HAL_RCC_OscConfig+0x33a>
 800304c:	e014      	b.n	8003078 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7ff fb6f 	bl	8002730 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7ff fb6b 	bl	8002730 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0af      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ee      	bne.n	8003056 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d105      	bne.n	800308a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a55      	ldr	r2, [pc, #340]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 809b 	beq.w	80031ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d05c      	beq.n	800315a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d141      	bne.n	800312c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7ff fb3f 	bl	8002730 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7ff fb3b 	bl	8002730 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e081      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c8:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	019b      	lsls	r3, r3, #6
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	061b      	lsls	r3, r3, #24
 80030f8:	4937      	ldr	r1, [pc, #220]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7ff fb14 	bl	8002730 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310c:	f7ff fb10 	bl	8002730 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e056      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x41c>
 800312a:	e04e      	b.n	80031ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7ff fafd 	bl	8002730 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7ff faf9 	bl	8002730 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e03f      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x44a>
 8003158:	e037      	b.n	80031ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e032      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d028      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d121      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d11a      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003196:	4013      	ands	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40007000 	.word	0x40007000
 80031d8:	40023800 	.word	0x40023800
 80031dc:	42470060 	.word	0x42470060

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7ff fa2e 	bl	8002730 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7ff fa2a 	bl	8002730 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f98e 	bl	80026a8 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	080045d8 	.word	0x080045d8
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b67      	ldr	r3, [pc, #412]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80bd 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x1a4>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e0b7      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033e2:	60bb      	str	r3, [r7, #8]
       break;
 80033e4:	e0b7      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80033e8:	60bb      	str	r3, [r7, #8]
      break;
 80033ea:	e0b4      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f6:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d04d      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b58      	ldr	r3, [pc, #352]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	461a      	mov	r2, r3
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	ea02 0800 	and.w	r8, r2, r0
 800341a:	ea03 0901 	and.w	r9, r3, r1
 800341e:	4640      	mov	r0, r8
 8003420:	4649      	mov	r1, r9
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	014b      	lsls	r3, r1, #5
 800342c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003430:	0142      	lsls	r2, r0, #5
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	ebb0 0008 	subs.w	r0, r0, r8
 800343a:	eb61 0109 	sbc.w	r1, r1, r9
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	018b      	lsls	r3, r1, #6
 8003448:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800344c:	0182      	lsls	r2, r0, #6
 800344e:	1a12      	subs	r2, r2, r0
 8003450:	eb63 0301 	sbc.w	r3, r3, r1
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	00d9      	lsls	r1, r3, #3
 800345e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003462:	00d0      	lsls	r0, r2, #3
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	eb12 0208 	adds.w	r2, r2, r8
 800346c:	eb43 0309 	adc.w	r3, r3, r9
 8003470:	f04f 0000 	mov.w	r0, #0
 8003474:	f04f 0100 	mov.w	r1, #0
 8003478:	0259      	lsls	r1, r3, #9
 800347a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800347e:	0250      	lsls	r0, r2, #9
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	f7fd fac0 	bl	8000a14 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4613      	mov	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e04a      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	099b      	lsrs	r3, r3, #6
 80034a4:	461a      	mov	r2, r3
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	ea02 0400 	and.w	r4, r2, r0
 80034b6:	ea03 0501 	and.w	r5, r3, r1
 80034ba:	4620      	mov	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	014b      	lsls	r3, r1, #5
 80034c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034cc:	0142      	lsls	r2, r0, #5
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	1b00      	subs	r0, r0, r4
 80034d4:	eb61 0105 	sbc.w	r1, r1, r5
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	018b      	lsls	r3, r1, #6
 80034e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034e6:	0182      	lsls	r2, r0, #6
 80034e8:	1a12      	subs	r2, r2, r0
 80034ea:	eb63 0301 	sbc.w	r3, r3, r1
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	00d9      	lsls	r1, r3, #3
 80034f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034fc:	00d0      	lsls	r0, r2, #3
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	1912      	adds	r2, r2, r4
 8003504:	eb45 0303 	adc.w	r3, r5, r3
 8003508:	f04f 0000 	mov.w	r0, #0
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	0299      	lsls	r1, r3, #10
 8003512:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003516:	0290      	lsls	r0, r2, #10
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	461a      	mov	r2, r3
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f7fd fa74 	bl	8000a14 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	60bb      	str	r3, [r7, #8]
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003552:	60bb      	str	r3, [r7, #8]
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	68bb      	ldr	r3, [r7, #8]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	080045e8 	.word	0x080045e8

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b4:	f7ff ffdc 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0b5b      	lsrs	r3, r3, #13
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	080045e8 	.word	0x080045e8

080035d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e041      	b.n	800366e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe ff52 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4610      	mov	r0, r2
 8003618:	f000 fbbc 	bl	8003d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e044      	b.n	800371a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_TIM_Base_Start_IT+0xb0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d013      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <HAL_TIM_Base_Start_IT+0xb4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_TIM_Base_Start_IT+0xb8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_TIM_Base_Start_IT+0xbc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_TIM_Base_Start_IT+0xc0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d111      	bne.n	8003708 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d010      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	e007      	b.n	8003718 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40014000 	.word	0x40014000

0800373c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e097      	b.n	8003880 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fe fe57 	bl	8002418 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003780:	f023 0307 	bic.w	r3, r3, #7
 8003784:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f000 faff 	bl	8003d94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	4313      	orrs	r3, r2
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037dc:	f023 030c 	bic.w	r3, r3, #12
 80037e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	4313      	orrs	r3, r2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	011a      	lsls	r2, r3, #4
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	031b      	lsls	r3, r3, #12
 800380c:	4313      	orrs	r3, r2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4313      	orrs	r3, r2
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003898:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d110      	bne.n	80038da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038be:	7b7b      	ldrb	r3, [r7, #13]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e069      	b.n	800399c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d8:	e031      	b.n	800393e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d110      	bne.n	8003902 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038e6:	7b3b      	ldrb	r3, [r7, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d001      	beq.n	80038f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e055      	b.n	800399c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003900:	e01d      	b.n	800393e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d108      	bne.n	800391a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800390e:	7b7b      	ldrb	r3, [r7, #13]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d102      	bne.n	800391a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003914:	7b3b      	ldrb	r3, [r7, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e03e      	b.n	800399c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_TIM_Encoder_Start+0xc4>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d008      	beq.n	800395c <HAL_TIM_Encoder_Start+0xd4>
 800394a:	e00f      	b.n	800396c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2201      	movs	r2, #1
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fb37 	bl	8003fc8 <TIM_CCxChannelCmd>
      break;
 800395a:	e016      	b.n	800398a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	2104      	movs	r1, #4
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fb2f 	bl	8003fc8 <TIM_CCxChannelCmd>
      break;
 800396a:	e00e      	b.n	800398a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fb27 	bl	8003fc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	2104      	movs	r1, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb20 	bl	8003fc8 <TIM_CCxChannelCmd>
      break;
 8003988:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0202 	mvn.w	r2, #2
 80039d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f9b5 	bl	8003d56 <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f9a7 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f9b8 	bl	8003d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d122      	bne.n	8003a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d11b      	bne.n	8003a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0204 	mvn.w	r2, #4
 8003a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f98b 	bl	8003d56 <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f97d 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f98e 	bl	8003d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d122      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0208 	mvn.w	r2, #8
 8003a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f961 	bl	8003d56 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f953 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f964 	bl	8003d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d122      	bne.n	8003afc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0210 	mvn.w	r2, #16
 8003acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f937 	bl	8003d56 <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f929 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f93a 	bl	8003d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10e      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0201 	mvn.w	r2, #1
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe fb64 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d10e      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d107      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fad8 	bl	8004104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8ff 	bl	8003d7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d10e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d107      	bne.n	8003bac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0220 	mvn.w	r2, #32
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 faa2 	bl	80040f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0b4      	b.n	8003d3a <HAL_TIM_ConfigClockSource+0x186>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c08:	d03e      	beq.n	8003c88 <HAL_TIM_ConfigClockSource+0xd4>
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0e:	f200 8087 	bhi.w	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	f000 8086 	beq.w	8003d26 <HAL_TIM_ConfigClockSource+0x172>
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1e:	d87f      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c20:	2b70      	cmp	r3, #112	; 0x70
 8003c22:	d01a      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xa6>
 8003c24:	2b70      	cmp	r3, #112	; 0x70
 8003c26:	d87b      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b60      	cmp	r3, #96	; 0x60
 8003c2a:	d050      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x11a>
 8003c2c:	2b60      	cmp	r3, #96	; 0x60
 8003c2e:	d877      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b50      	cmp	r3, #80	; 0x50
 8003c32:	d03c      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0xfa>
 8003c34:	2b50      	cmp	r3, #80	; 0x50
 8003c36:	d873      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d058      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x13a>
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d86f      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b30      	cmp	r3, #48	; 0x30
 8003c42:	d064      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x15a>
 8003c44:	2b30      	cmp	r3, #48	; 0x30
 8003c46:	d86b      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d060      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x15a>
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d867      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d05c      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x15a>
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d05a      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x15a>
 8003c58:	e062      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f000 f98d 	bl	8003f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	609a      	str	r2, [r3, #8]
      break;
 8003c86:	e04f      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6899      	ldr	r1, [r3, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f000 f976 	bl	8003f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003caa:	609a      	str	r2, [r3, #8]
      break;
 8003cac:	e03c      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f000 f8ea 	bl	8003e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2150      	movs	r1, #80	; 0x50
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f943 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e02c      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f000 f909 	bl	8003ef2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2160      	movs	r1, #96	; 0x60
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f933 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e01c      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 f8ca 	bl	8003e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f923 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e00c      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f000 f91a 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003d1e:	e003      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      break;
 8003d24:	e000      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a34      	ldr	r2, [pc, #208]	; (8003e78 <TIM_Base_SetConfig+0xe4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00f      	beq.n	8003dcc <TIM_Base_SetConfig+0x38>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d00b      	beq.n	8003dcc <TIM_Base_SetConfig+0x38>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a31      	ldr	r2, [pc, #196]	; (8003e7c <TIM_Base_SetConfig+0xe8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <TIM_Base_SetConfig+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <TIM_Base_SetConfig+0xec>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_Base_SetConfig+0x38>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2f      	ldr	r2, [pc, #188]	; (8003e84 <TIM_Base_SetConfig+0xf0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d108      	bne.n	8003dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <TIM_Base_SetConfig+0xe4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01b      	beq.n	8003e1e <TIM_Base_SetConfig+0x8a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d017      	beq.n	8003e1e <TIM_Base_SetConfig+0x8a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <TIM_Base_SetConfig+0xe8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <TIM_Base_SetConfig+0xec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <TIM_Base_SetConfig+0x8a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <TIM_Base_SetConfig+0xf0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_Base_SetConfig+0x8a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <TIM_Base_SetConfig+0xf4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_Base_SetConfig+0x8a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <TIM_Base_SetConfig+0xf8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <TIM_Base_SetConfig+0xfc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a08      	ldr	r2, [pc, #32]	; (8003e78 <TIM_Base_SetConfig+0xe4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d103      	bne.n	8003e64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	615a      	str	r2, [r3, #20]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40014000 	.word	0x40014000
 8003e8c:	40014400 	.word	0x40014400
 8003e90:	40014800 	.word	0x40014800

08003e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 030a 	bic.w	r3, r3, #10
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b087      	sub	sp, #28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0210 	bic.w	r2, r3, #16
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	031b      	lsls	r3, r3, #12
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f043 0307 	orr.w	r3, r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	021a      	lsls	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2201      	movs	r2, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1a      	ldr	r2, [r3, #32]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004028:	2302      	movs	r3, #2
 800402a:	e050      	b.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d013      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10c      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40014000 	.word	0x40014000

080040f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e03f      	b.n	80041aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fe f9d8 	bl	80024f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f829 	bl	80041b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b8:	b09f      	sub	sp, #124	; 0x7c
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	68d9      	ldr	r1, [r3, #12]
 80041cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	ea40 0301 	orr.w	r3, r0, r1
 80041d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	431a      	orrs	r2, r3
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041f8:	f021 010c 	bic.w	r1, r1, #12
 80041fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004202:	430b      	orrs	r3, r1
 8004204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	6999      	ldr	r1, [r3, #24]
 8004214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	ea40 0301 	orr.w	r3, r0, r1
 800421c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800421e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4bc5      	ldr	r3, [pc, #788]	; (8004538 <UART_SetConfig+0x384>)
 8004224:	429a      	cmp	r2, r3
 8004226:	d004      	beq.n	8004232 <UART_SetConfig+0x7e>
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4bc3      	ldr	r3, [pc, #780]	; (800453c <UART_SetConfig+0x388>)
 800422e:	429a      	cmp	r2, r3
 8004230:	d103      	bne.n	800423a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004232:	f7ff f9bd 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8004236:	6778      	str	r0, [r7, #116]	; 0x74
 8004238:	e002      	b.n	8004240 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800423a:	f7ff f9a5 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 800423e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004248:	f040 80b6 	bne.w	80043b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800424c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424e:	461c      	mov	r4, r3
 8004250:	f04f 0500 	mov.w	r5, #0
 8004254:	4622      	mov	r2, r4
 8004256:	462b      	mov	r3, r5
 8004258:	1891      	adds	r1, r2, r2
 800425a:	6439      	str	r1, [r7, #64]	; 0x40
 800425c:	415b      	adcs	r3, r3
 800425e:	647b      	str	r3, [r7, #68]	; 0x44
 8004260:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004264:	1912      	adds	r2, r2, r4
 8004266:	eb45 0303 	adc.w	r3, r5, r3
 800426a:	f04f 0000 	mov.w	r0, #0
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	00d9      	lsls	r1, r3, #3
 8004274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004278:	00d0      	lsls	r0, r2, #3
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	1911      	adds	r1, r2, r4
 8004280:	6639      	str	r1, [r7, #96]	; 0x60
 8004282:	416b      	adcs	r3, r5
 8004284:	667b      	str	r3, [r7, #100]	; 0x64
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	1891      	adds	r1, r2, r2
 8004292:	63b9      	str	r1, [r7, #56]	; 0x38
 8004294:	415b      	adcs	r3, r3
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800429c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042a0:	f7fc fbb8 	bl	8000a14 <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4ba5      	ldr	r3, [pc, #660]	; (8004540 <UART_SetConfig+0x38c>)
 80042aa:	fba3 2302 	umull	r2, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	011e      	lsls	r6, r3, #4
 80042b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b4:	461c      	mov	r4, r3
 80042b6:	f04f 0500 	mov.w	r5, #0
 80042ba:	4622      	mov	r2, r4
 80042bc:	462b      	mov	r3, r5
 80042be:	1891      	adds	r1, r2, r2
 80042c0:	6339      	str	r1, [r7, #48]	; 0x30
 80042c2:	415b      	adcs	r3, r3
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
 80042c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042ca:	1912      	adds	r2, r2, r4
 80042cc:	eb45 0303 	adc.w	r3, r5, r3
 80042d0:	f04f 0000 	mov.w	r0, #0
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	00d9      	lsls	r1, r3, #3
 80042da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042de:	00d0      	lsls	r0, r2, #3
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	1911      	adds	r1, r2, r4
 80042e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80042e8:	416b      	adcs	r3, r5
 80042ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	1891      	adds	r1, r2, r2
 80042f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80042fa:	415b      	adcs	r3, r3
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004302:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004306:	f7fc fb85 	bl	8000a14 <__aeabi_uldivmod>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4b8c      	ldr	r3, [pc, #560]	; (8004540 <UART_SetConfig+0x38c>)
 8004310:	fba3 1302 	umull	r1, r3, r3, r2
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	2164      	movs	r1, #100	; 0x64
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	3332      	adds	r3, #50	; 0x32
 8004322:	4a87      	ldr	r2, [pc, #540]	; (8004540 <UART_SetConfig+0x38c>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004330:	441e      	add	r6, r3
 8004332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004334:	4618      	mov	r0, r3
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	1894      	adds	r4, r2, r2
 8004340:	623c      	str	r4, [r7, #32]
 8004342:	415b      	adcs	r3, r3
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
 8004346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800434a:	1812      	adds	r2, r2, r0
 800434c:	eb41 0303 	adc.w	r3, r1, r3
 8004350:	f04f 0400 	mov.w	r4, #0
 8004354:	f04f 0500 	mov.w	r5, #0
 8004358:	00dd      	lsls	r5, r3, #3
 800435a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800435e:	00d4      	lsls	r4, r2, #3
 8004360:	4622      	mov	r2, r4
 8004362:	462b      	mov	r3, r5
 8004364:	1814      	adds	r4, r2, r0
 8004366:	653c      	str	r4, [r7, #80]	; 0x50
 8004368:	414b      	adcs	r3, r1
 800436a:	657b      	str	r3, [r7, #84]	; 0x54
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	461a      	mov	r2, r3
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	1891      	adds	r1, r2, r2
 8004378:	61b9      	str	r1, [r7, #24]
 800437a:	415b      	adcs	r3, r3
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004382:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004386:	f7fc fb45 	bl	8000a14 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4b6c      	ldr	r3, [pc, #432]	; (8004540 <UART_SetConfig+0x38c>)
 8004390:	fba3 1302 	umull	r1, r3, r3, r2
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	2164      	movs	r1, #100	; 0x64
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	3332      	adds	r3, #50	; 0x32
 80043a2:	4a67      	ldr	r2, [pc, #412]	; (8004540 <UART_SetConfig+0x38c>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	f003 0207 	and.w	r2, r3, #7
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4432      	add	r2, r6
 80043b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043b6:	e0b9      	b.n	800452c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ba:	461c      	mov	r4, r3
 80043bc:	f04f 0500 	mov.w	r5, #0
 80043c0:	4622      	mov	r2, r4
 80043c2:	462b      	mov	r3, r5
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	6139      	str	r1, [r7, #16]
 80043c8:	415b      	adcs	r3, r3
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043d0:	1912      	adds	r2, r2, r4
 80043d2:	eb45 0303 	adc.w	r3, r5, r3
 80043d6:	f04f 0000 	mov.w	r0, #0
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	00d9      	lsls	r1, r3, #3
 80043e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e4:	00d0      	lsls	r0, r2, #3
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	eb12 0804 	adds.w	r8, r2, r4
 80043ee:	eb43 0905 	adc.w	r9, r3, r5
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	008b      	lsls	r3, r1, #2
 8004406:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800440a:	0082      	lsls	r2, r0, #2
 800440c:	4640      	mov	r0, r8
 800440e:	4649      	mov	r1, r9
 8004410:	f7fc fb00 	bl	8000a14 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b49      	ldr	r3, [pc, #292]	; (8004540 <UART_SetConfig+0x38c>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011e      	lsls	r6, r3, #4
 8004422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004424:	4618      	mov	r0, r3
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	1894      	adds	r4, r2, r2
 8004430:	60bc      	str	r4, [r7, #8]
 8004432:	415b      	adcs	r3, r3
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800443a:	1812      	adds	r2, r2, r0
 800443c:	eb41 0303 	adc.w	r3, r1, r3
 8004440:	f04f 0400 	mov.w	r4, #0
 8004444:	f04f 0500 	mov.w	r5, #0
 8004448:	00dd      	lsls	r5, r3, #3
 800444a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800444e:	00d4      	lsls	r4, r2, #3
 8004450:	4622      	mov	r2, r4
 8004452:	462b      	mov	r3, r5
 8004454:	1814      	adds	r4, r2, r0
 8004456:	64bc      	str	r4, [r7, #72]	; 0x48
 8004458:	414b      	adcs	r3, r1
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4618      	mov	r0, r3
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	008b      	lsls	r3, r1, #2
 8004470:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004474:	0082      	lsls	r2, r0, #2
 8004476:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800447a:	f7fc facb 	bl	8000a14 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <UART_SetConfig+0x38c>)
 8004484:	fba3 1302 	umull	r1, r3, r3, r2
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	2164      	movs	r1, #100	; 0x64
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	3332      	adds	r3, #50	; 0x32
 8004496:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <UART_SetConfig+0x38c>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a2:	441e      	add	r6, r3
 80044a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a6:	4618      	mov	r0, r3
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	1894      	adds	r4, r2, r2
 80044b2:	603c      	str	r4, [r7, #0]
 80044b4:	415b      	adcs	r3, r3
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044bc:	1812      	adds	r2, r2, r0
 80044be:	eb41 0303 	adc.w	r3, r1, r3
 80044c2:	f04f 0400 	mov.w	r4, #0
 80044c6:	f04f 0500 	mov.w	r5, #0
 80044ca:	00dd      	lsls	r5, r3, #3
 80044cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044d0:	00d4      	lsls	r4, r2, #3
 80044d2:	4622      	mov	r2, r4
 80044d4:	462b      	mov	r3, r5
 80044d6:	eb12 0a00 	adds.w	sl, r2, r0
 80044da:	eb43 0b01 	adc.w	fp, r3, r1
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f04f 0100 	mov.w	r1, #0
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	008b      	lsls	r3, r1, #2
 80044f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044f6:	0082      	lsls	r2, r0, #2
 80044f8:	4650      	mov	r0, sl
 80044fa:	4659      	mov	r1, fp
 80044fc:	f7fc fa8a 	bl	8000a14 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <UART_SetConfig+0x38c>)
 8004506:	fba3 1302 	umull	r1, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2164      	movs	r1, #100	; 0x64
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a09      	ldr	r2, [pc, #36]	; (8004540 <UART_SetConfig+0x38c>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4432      	add	r2, r6
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	377c      	adds	r7, #124	; 0x7c
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	40011000 	.word	0x40011000
 800453c:	40011400 	.word	0x40011400
 8004540:	51eb851f 	.word	0x51eb851f

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f000 f820 	bl	800459c <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	080045f8 	.word	0x080045f8
 8004580:	080045f8 	.word	0x080045f8
 8004584:	080045f8 	.word	0x080045f8
 8004588:	08004600 	.word	0x08004600

0800458c <memset>:
 800458c:	4402      	add	r2, r0
 800458e:	4603      	mov	r3, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <_init>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr

080045a8 <_fini>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr
