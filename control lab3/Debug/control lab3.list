
control lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000384c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a20  08003a20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  20000010  08003a40  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  08003a40  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7e2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f31  00000000  00000000  0002e81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00030750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00031410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017330  00000000  00000000  00032028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfbe  00000000  00000000  00049358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9e3  00000000  00000000  00056316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0cf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f4  00000000  00000000  000e0d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080039cc 	.word	0x080039cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080039cc 	.word	0x080039cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN13kalman_filterC1Ev>:
 *      Author: weera
 */

#include <kalmanfilter.h>

kalman_filter::kalman_filter() {
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b0ac      	sub	sp, #176	; 0xb0
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fb4a 	bl	8000b74 <_ZN6matrixC1Ev>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	332c      	adds	r3, #44	; 0x2c
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fb45 	bl	8000b74 <_ZN6matrixC1Ev>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3358      	adds	r3, #88	; 0x58
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fb40 	bl	8000b74 <_ZN6matrixC1Ev>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3384      	adds	r3, #132	; 0x84
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb3b 	bl	8000b74 <_ZN6matrixC1Ev>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	33b0      	adds	r3, #176	; 0xb0
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fb36 	bl	8000b74 <_ZN6matrixC1Ev>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	33dc      	adds	r3, #220	; 0xdc
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fb31 	bl	8000b74 <_ZN6matrixC1Ev>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fb2b 	bl	8000b74 <_ZN6matrixC1Ev>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000524:	4618      	mov	r0, r3
 8000526:	f000 fb25 	bl	8000b74 <_ZN6matrixC1Ev>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fb1f 	bl	8000b74 <_ZN6matrixC1Ev>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fb19 	bl	8000b74 <_ZN6matrixC1Ev>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fb13 	bl	8000b74 <_ZN6matrixC1Ev>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fb0d 	bl	8000b74 <_ZN6matrixC1Ev>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fb07 	bl	8000b74 <_ZN6matrixC1Ev>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fb01 	bl	8000b74 <_ZN6matrixC1Ev>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fafb 	bl	8000b74 <_ZN6matrixC1Ev>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000584:	4618      	mov	r0, r3
 8000586:	f000 faf5 	bl	8000b74 <_ZN6matrixC1Ev>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8000590:	4618      	mov	r0, r3
 8000592:	f000 faef 	bl	8000b74 <_ZN6matrixC1Ev>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fae9 	bl	8000b74 <_ZN6matrixC1Ev>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fae3 	bl	8000b74 <_ZN6matrixC1Ev>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fadd 	bl	8000b74 <_ZN6matrixC1Ev>
	matrix buf1(3, 1);
 80005ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005be:	2201      	movs	r2, #1
 80005c0:	2103      	movs	r1, #3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fb06 	bl	8000bd4 <_ZN6matrixC1Eii>
	predictX_old = buf1;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 80005ce:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	matrix buf2(3, 3);
 80005e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e6:	2203      	movs	r2, #3
 80005e8:	2103      	movs	r1, #3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 faf2 	bl	8000bd4 <_ZN6matrixC1Eii>
	P_old = buf2;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f503 740f 	add.w	r4, r3, #572	; 0x23c
 80005f6:	f107 0558 	add.w	r5, r7, #88	; 0x58
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float buf_val[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <_ZN13kalman_filterC1Ev+0x184>)
 800060c:	f107 0408 	add.w	r4, r7, #8
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	682b      	ldr	r3, [r5, #0]
 800061c:	6023      	str	r3, [r4, #0]
	matrix buf3(3, 3, buf_val);
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000626:	2203      	movs	r2, #3
 8000628:	2103      	movs	r1, #3
 800062a:	f000 fb07 	bl	8000c3c <_ZN6matrixC1EiiPf>
	I33=buf3;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8000634:	f107 0584 	add.w	r5, r7, #132	; 0x84
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	37b0      	adds	r7, #176	; 0xb0
 800064e:	46bd      	mov	sp, r7
 8000650:	bdb0      	pop	{r4, r5, r7, pc}
 8000652:	bf00      	nop
 8000654:	080039e4 	.word	0x080039e4

08000658 <_ZN13kalman_filter7setAtoDE6matrixS0_S0_S0_>:

void kalman_filter::setAtoD(matrix a_in,matrix b_in,matrix c_in,matrix d_in){
 8000658:	b084      	sub	sp, #16
 800065a:	b4b0      	push	{r4, r5, r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	f107 001c 	add.w	r0, r7, #28
 8000666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	A=a_in;B=b_in,C=c_in;D=d_in;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	461d      	mov	r5, r3
 800066e:	f107 041c 	add.w	r4, r7, #28
 8000672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800067e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000688:	f107 0548 	add.w	r5, r7, #72	; 0x48
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f103 0458 	add.w	r4, r3, #88	; 0x58
 80006a2:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80006bc:	f107 05a0 	add.w	r5, r7, #160	; 0xa0
 80006c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bcb0      	pop	{r4, r5, r7}
 80006d8:	b004      	add	sp, #16
 80006da:	4770      	bx	lr

080006dc <_ZN13kalman_filter6setQGRE6matrixS0_S0_>:
void kalman_filter::setQGR(matrix q_in,matrix g_in,matrix r_in){
 80006dc:	b084      	sub	sp, #16
 80006de:	b4b0      	push	{r4, r5, r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	f107 001c 	add.w	r0, r7, #28
 80006ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Q=q_in;G=g_in;R=r_in;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80006f4:	f107 051c 	add.w	r5, r7, #28
 80006f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 800070e:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8000712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8000728:	f107 0574 	add.w	r5, r7, #116	; 0x74
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bcb0      	pop	{r4, r5, r7}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <_ZN13kalman_filter3runE6matrixS0_>:

void kalman_filter::run(matrix u_in, matrix y_in) {
 8000748:	b084      	sub	sp, #16
 800074a:	b5b0      	push	{r4, r5, r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	f107 001c 	add.w	r0, r7, #28
 8000756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	U = u_in;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8000760:	f107 051c 	add.w	r5, r7, #28
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Y = y_in;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800077a:	f107 0548 	add.w	r5, r7, #72	; 0x48
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800078a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	doKalman_gain();
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f835 	bl	80007fe <_ZN13kalman_filter13doKalman_gainEv>
	doPredict_y();
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f888 	bl	80008aa <_ZN13kalman_filter11doPredict_yEv>
	doCorrect_p();
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f8c1 	bl	8000922 <_ZN13kalman_filter11doCorrect_pEv>
	doCorrect();
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f8f0 	bl	8000986 <_ZN13kalman_filter9doCorrectEv>
	// Correct
	doPredict_x();
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f915 	bl	80009d6 <_ZN13kalman_filter11doPredict_xEv>
	doPredict_p();
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f942 	bl	8000a36 <_ZN13kalman_filter11doPredict_pEv>
	doResult();
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f99e 	bl	8000af4 <_ZN13kalman_filter8doResultEv>
	// Predict
	predictX_old = predictX_new;
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f502 7430 	add.w	r4, r2, #704	; 0x2c0
 80007c0:	f503 753b 	add.w	r5, r3, #748	; 0x2ec
 80007c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	P_old = P_new;
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f502 740f 	add.w	r4, r2, #572	; 0x23c
 80007dc:	f503 751a 	add.w	r5, r3, #616	; 0x268
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//update
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80007fa:	b004      	add	sp, #16
 80007fc:	4770      	bx	lr

080007fe <_ZN13kalman_filter13doKalman_gainEv>:

void kalman_filter::doKalman_gain(){
 80007fe:	b5b0      	push	{r4, r5, r7, lr}
 8000800:	b0c6      	sub	sp, #280	; 0x118
 8000802:	af00      	add	r7, sp, #0
 8000804:	6378      	str	r0, [r7, #52]	; 0x34
matrix C_tra = C.transpose();
 8000806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000808:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800080c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fbc2 	bl	8000f9c <_ZN6matrix9transposeEv>
matrix buf2 = ((C*P_old)*C_tra);
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081a:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800081e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000820:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 8000824:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fafa 	bl	8000e22 <_ZN6matrixmlERS_>
 800082e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000832:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000836:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800083a:	4618      	mov	r0, r3
 800083c:	f000 faf1 	bl	8000e22 <_ZN6matrixmlERS_>
matrix buf2_5=  buf2+R;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8000846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800084a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fa31 	bl	8000cb6 <_ZN6matrixplERS_>
gainK = (P_old*C_tra).gain(1/(buf2_5.data[0][0]));
 8000854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000856:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 800085a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800085e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fadd 	bl	8000e22 <_ZN6matrixmlERS_>
 8000868:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800086c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000874:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000876:	463b      	mov	r3, r7
 8000878:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800087c:	eeb0 0a47 	vmov.f32	s0, s14
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fbcf 	bl	8001026 <_ZN6matrix4gainEf>
 8000888:	463b      	mov	r3, r7
 800088a:	f504 749a 	add.w	r4, r4, #308	; 0x134
 800088e:	461d      	mov	r5, r3
 8000890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000898:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80008a0:	bf00      	nop
 80008a2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bdb0      	pop	{r4, r5, r7, pc}

080008aa <_ZN13kalman_filter11doPredict_yEv>:

void kalman_filter::doPredict_y(){
 80008aa:	b5b0      	push	{r4, r5, r7, lr}
 80008ac:	b0b0      	sub	sp, #192	; 0xc0
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = C*predictX_old;
 80008b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b4:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80008b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ba:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 80008be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 faad 	bl	8000e22 <_ZN6matrixmlERS_>
matrix buf2 = D*U;
 80008c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ca:	f103 0184 	add.w	r1, r3, #132	; 0x84
 80008ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d0:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 80008d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 faa2 	bl	8000e22 <_ZN6matrixmlERS_>
errorY = (Y-buf)+buf2;
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80008e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80008e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fa3d 	bl	8000d6c <_ZN6matrixmiERS_>
 80008f2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80008f4:	463b      	mov	r3, r7
 80008f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80008fa:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f9d9 	bl	8000cb6 <_ZN6matrixplERS_>
 8000904:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 8000908:	463d      	mov	r5, r7
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800091a:	bf00      	nop
 800091c:	37c0      	adds	r7, #192	; 0xc0
 800091e:	46bd      	mov	sp, r7
 8000920:	bdb0      	pop	{r4, r5, r7, pc}

08000922 <_ZN13kalman_filter11doCorrect_pEv>:

void kalman_filter::doCorrect_p(){
 8000922:	b5b0      	push	{r4, r5, r7, lr}
 8000924:	b0a4      	sub	sp, #144	; 0x90
 8000926:	af00      	add	r7, sp, #0
 8000928:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = gainK*C;
 800092a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092c:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8000930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000932:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000936:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fa71 	bl	8000e22 <_ZN6matrixmlERS_>
P = (I33-buf)*P_old;
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	f503 71f2 	add.w	r1, r3, #484	; 0x1e4
 8000946:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800094a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fa0c 	bl	8000d6c <_ZN6matrixmiERS_>
 8000954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000956:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 800095a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800095c:	463b      	mov	r3, r7
 800095e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fa5d 	bl	8000e22 <_ZN6matrixmlERS_>
 8000968:	f504 7404 	add.w	r4, r4, #528	; 0x210
 800096c:	463d      	mov	r5, r7
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800097a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//P_old = (I33-(gainK*C))*P_old;
}
 800097e:	bf00      	nop
 8000980:	3790      	adds	r7, #144	; 0x90
 8000982:	46bd      	mov	sp, r7
 8000984:	bdb0      	pop	{r4, r5, r7, pc}

08000986 <_ZN13kalman_filter9doCorrectEv>:

void kalman_filter::doCorrect(){
 8000986:	b5b0      	push	{r4, r5, r7, lr}
 8000988:	b09a      	sub	sp, #104	; 0x68
 800098a:	af00      	add	r7, sp, #0
 800098c:	6378      	str	r0, [r7, #52]	; 0x34
	matrix buf1 = (gainK*errorY);
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8000994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000996:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 800099a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fa3f 	bl	8000e22 <_ZN6matrixmlERS_>
predictX = buf1+predictX_old;
 80009a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a6:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 80009aa:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80009ac:	463b      	mov	r3, r7
 80009ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f97f 	bl	8000cb6 <_ZN6matrixplERS_>
 80009b8:	f504 7425 	add.w	r4, r4, #660	; 0x294
 80009bc:	463d      	mov	r5, r7
 80009be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80009ce:	bf00      	nop
 80009d0:	3768      	adds	r7, #104	; 0x68
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bdb0      	pop	{r4, r5, r7, pc}

080009d6 <_ZN13kalman_filter11doPredict_xEv>:

void kalman_filter::doPredict_x(){
 80009d6:	b5b0      	push	{r4, r5, r7, lr}
 80009d8:	b0a4      	sub	sp, #144	; 0x90
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = B*U;
 80009de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80009e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e6:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 80009ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fa17 	bl	8000e22 <_ZN6matrixmlERS_>
predictX_new = (A*predictX)+buf;
 80009f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80009f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f8:	f503 7225 	add.w	r2, r3, #660	; 0x294
 80009fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fa0e 	bl	8000e22 <_ZN6matrixmlERS_>
 8000a06:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000a08:	463b      	mov	r3, r7
 8000a0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a0e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f94f 	bl	8000cb6 <_ZN6matrixplERS_>
 8000a18:	f504 743b 	add.w	r4, r4, #748	; 0x2ec
 8000a1c:	463d      	mov	r5, r7
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//predictX_new = (A*predictX)+(B*U);
}
 8000a2e:	bf00      	nop
 8000a30:	3790      	adds	r7, #144	; 0x90
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bdb0      	pop	{r4, r5, r7, pc}

08000a36 <_ZN13kalman_filter11doPredict_pEv>:

void kalman_filter::doPredict_p(){
 8000a36:	b5b0      	push	{r4, r5, r7, lr}
 8000a38:	b0c6      	sub	sp, #280	; 0x118
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6378      	str	r0, [r7, #52]	; 0x34
matrix A_tran = A.transpose();
 8000a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a40:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 faa8 	bl	8000f9c <_ZN6matrix9transposeEv>
matrix G_tran = G.transpose();
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4e:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8000a52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fa9f 	bl	8000f9c <_ZN6matrix9transposeEv>
matrix buf = (G*Q);
 8000a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a60:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8000a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a66:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8000a6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f9d7 	bl	8000e22 <_ZN6matrixmlERS_>
buf = buf*G_tran;
 8000a74:	463b      	mov	r3, r7
 8000a76:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000a7a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f9cf 	bl	8000e22 <_ZN6matrixmlERS_>
 8000a84:	463b      	mov	r3, r7
 8000a86:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000a8a:	461d      	mov	r5, r3
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
matrix buf1 = (A*P)*A_tran;
 8000a9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8000aa4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f9ba 	bl	8000e22 <_ZN6matrixmlERS_>
 8000aae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ab2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000ab6:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f9b1 	bl	8000e22 <_ZN6matrixmlERS_>
P_new = buf1+buf;
 8000ac0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ac8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f8f2 	bl	8000cb6 <_ZN6matrixplERS_>
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	f504 741a 	add.w	r4, r4, #616	; 0x268
 8000ad8:	461d      	mov	r5, r3
 8000ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//P_new = ((A*P)*A.transpose())+((G*Q)*G.transpose());
}
 8000aea:	bf00      	nop
 8000aec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}

08000af4 <_ZN13kalman_filter8doResultEv>:

void kalman_filter::doResult(){
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	b0a4      	sub	sp, #144	; 0x90
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6378      	str	r0, [r7, #52]	; 0x34
matrix buf = D*U;
 8000afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afe:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8000b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b04:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8000b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f988 	bl	8000e22 <_ZN6matrixmlERS_>
resultY = (C*predictX)+buf;
 8000b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b14:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8000b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1a:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000b1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f97d 	bl	8000e22 <_ZN6matrixmlERS_>
 8000b28:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b30:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f8be 	bl	8000cb6 <_ZN6matrixplERS_>
 8000b3a:	f504 7451 	add.w	r4, r4, #836	; 0x344
 8000b3e:	463d      	mov	r5, r7
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//resultY = (C*predictX)+(D*U);
resultX = predictX;
 8000b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	f502 7446 	add.w	r4, r2, #792	; 0x318
 8000b58:	f503 7525 	add.w	r5, r3, #660	; 0x294
 8000b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000b6c:	bf00      	nop
 8000b6e:	3790      	adds	r7, #144	; 0x90
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bdb0      	pop	{r4, r5, r7, pc}

08000b74 <_ZN6matrixC1Ev>:
 *      Author: weera
 */

#include <matrix.h>

matrix::matrix() {
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	d_x = 1;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
	d_y = 1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 1; i++) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	dc19      	bgt.n	8000bc6 <_ZN6matrixC1Ev+0x52>
		for (int j = 0; j < 1; ++j) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dc10      	bgt.n	8000bbe <_ZN6matrixC1Ev+0x4a>
			data[i][j] = 0;
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	4413      	add	r3, r2
 8000baa:	3302      	adds	r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f04f 0200 	mov.w	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 1; ++j) {
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	e7eb      	b.n	8000b96 <_ZN6matrixC1Ev+0x22>
	for (int i = 0; i < 1; i++) {
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e7e2      	b.n	8000b8c <_ZN6matrixC1Ev+0x18>
		}
	};
}
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_ZN6matrixC1Eii>:

matrix::matrix(int x, int y) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	d_x = x;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	601a      	str	r2, [r3, #0]
	d_y = y;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	da1a      	bge.n	8000c2e <_ZN6matrixC1Eii+0x5a>
		for (int j = 0; j < y; ++j) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	da10      	bge.n	8000c26 <_ZN6matrixC1Eii+0x52>
			data[i][j] = 0.0;
 8000c04:	68f9      	ldr	r1, [r7, #12]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4413      	add	r3, r2
 8000c12:	3302      	adds	r3, #2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < y; ++j) {
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	3301      	adds	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	e7ea      	b.n	8000bfc <_ZN6matrixC1Eii+0x28>
	for (int i = 0; i < x; i++) {
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e7e0      	b.n	8000bf0 <_ZN6matrixC1Eii+0x1c>
		}
	};
}
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4618      	mov	r0, r3
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_ZN6matrixC1EiiPf>:
matrix::matrix(int x, int y, float *data_in) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	603b      	str	r3, [r7, #0]
	d_x = x;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	601a      	str	r2, [r3, #0]
	d_y = y;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	da22      	bge.n	8000ca8 <_ZN6matrixC1EiiPf+0x6c>
		for (int j = 0; j < y; ++j) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	da18      	bge.n	8000ca0 <_ZN6matrixC1EiiPf+0x64>
			data[i][j] = data_in[i * y + j];
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	fb02 f203 	mul.w	r2, r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	6819      	ldr	r1, [r3, #0]
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4413      	add	r3, r2
 8000c90:	3302      	adds	r3, #2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4403      	add	r3, r0
 8000c96:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < y; ++j) {
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	e7e2      	b.n	8000c66 <_ZN6matrixC1EiiPf+0x2a>
	for (int i = 0; i < x; i++) {
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e7d8      	b.n	8000c5a <_ZN6matrixC1EiiPf+0x1e>
		}

	};
}
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4618      	mov	r0, r3
 8000cac:	371c      	adds	r7, #28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_ZN6matrixplERS_>:

matrix matrix::operator+(matrix &in) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b088      	sub	sp, #32
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
	matrix result;
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff ff56 	bl	8000b74 <_ZN6matrixC1Ev>
	result.setx(d_x);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f000 f911 	bl	8000ef6 <_ZN6matrix4setxEi>
	result.sety(d_y);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f000 f919 	bl	8000f12 <_ZN6matrix4setyEi>

	for (int y = 0; y < d_y; y++) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	69fa      	ldr	r2, [r7, #28]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	da39      	bge.n	8000d62 <_ZN6matrixplERS_+0xac>
		for (int x = 0; x < d_x; x++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	da2e      	bge.n	8000d5a <_ZN6matrixplERS_+0xa4>
			float total = 0;
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
			total = data[x][y] + in.data[x][y];
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	4413      	add	r3, r2
 8000d10:	3302      	adds	r3, #2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	ed93 7a00 	vldr	s14, [r3]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	4413      	add	r3, r2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	edd3 7a00 	vldr	s15, [r3]
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	edc7 7a05 	vstr	s15, [r7, #20]

			result.data[x][y] = total;
 8000d3a:	68f9      	ldr	r1, [r7, #12]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	4413      	add	r3, r2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	601a      	str	r2, [r3, #0]
		for (int x = 0; x < d_x; x++) {
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	3301      	adds	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	e7cb      	b.n	8000cf2 <_ZN6matrixplERS_+0x3c>
	for (int y = 0; y < d_y; y++) {
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e7c0      	b.n	8000ce4 <_ZN6matrixplERS_+0x2e>
			// printf(" = %d\n",total);
		}
	}
	return result;
 8000d62:	bf00      	nop
}
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN6matrixmiERS_>:

matrix matrix::operator-(matrix &in) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	matrix result;
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff fefb 	bl	8000b74 <_ZN6matrixC1Ev>
	result.setx(d_x);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 f8b6 	bl	8000ef6 <_ZN6matrix4setxEi>
	result.sety(d_y);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 f8be 	bl	8000f12 <_ZN6matrix4setyEi>

	for (int y = 0; y < d_y; y++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	da39      	bge.n	8000e18 <_ZN6matrixmiERS_+0xac>
		for (int x = 0; x < d_x; x++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	da2e      	bge.n	8000e10 <_ZN6matrixmiERS_+0xa4>
			float total = 0;
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
			total = data[x][y] - in.data[x][y];
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	ed93 7a00 	vldr	s14, [r3]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	4413      	add	r3, r2
 8000dde:	3302      	adds	r3, #2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dec:	edc7 7a05 	vstr	s15, [r7, #20]

			result.data[x][y] = total;
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	601a      	str	r2, [r3, #0]
		for (int x = 0; x < d_x; x++) {
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	e7cb      	b.n	8000da8 <_ZN6matrixmiERS_+0x3c>
	for (int y = 0; y < d_y; y++) {
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	3301      	adds	r3, #1
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e7c0      	b.n	8000d9a <_ZN6matrixmiERS_+0x2e>
			// printf(" = %d\n",total);
		}
	}
	return result;
 8000e18:	bf00      	nop
}
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_ZN6matrixmlERS_>:

matrix matrix::operator*(matrix &in) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b088      	sub	sp, #32
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
	matrix result;
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff fea0 	bl	8000b74 <_ZN6matrixC1Ev>
	result.setx(d_x);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f000 f85b 	bl	8000ef6 <_ZN6matrix4setxEi>
	result.sety(in.d_y);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4619      	mov	r1, r3
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 f863 	bl	8000f12 <_ZN6matrix4setyEi>
	for (int m = 0; m < d_x; m++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	da48      	bge.n	8000eec <_ZN6matrixmlERS_+0xca>
		for (int n = 0; n < in.d_y; n++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	da3d      	bge.n	8000ee4 <_ZN6matrixmlERS_+0xc2>
			float total = 0;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
			for (int k = 0; k < d_y; k++) {
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	da23      	bge.n	8000ec4 <_ZN6matrixmlERS_+0xa2>
				total = total + data[m][k] * in.data[k][n];
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	69fa      	ldr	r2, [r7, #28]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4413      	add	r3, r2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	ed93 7a00 	vldr	s14, [r3]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb8:	edc7 7a05 	vstr	s15, [r7, #20]
			for (int k = 0; k < d_y; k++) {
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	e7d6      	b.n	8000e72 <_ZN6matrixmlERS_+0x50>
			}
			result.data[m][n] = total;
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < in.d_y; n++) {
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	e7bc      	b.n	8000e5e <_ZN6matrixmlERS_+0x3c>
	for (int m = 0; m < d_x; m++) {
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e7b1      	b.n	8000e50 <_ZN6matrixmlERS_+0x2e>
		}
	}
	return result;
 8000eec:	bf00      	nop
}
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_ZN6matrix4setxEi>:

	return result;
}
*/

void matrix::setx(int x) {
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	d_x = x;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	601a      	str	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_ZN6matrix4setyEi>:
void matrix::sety(int y) {
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
	d_y = y;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	605a      	str	r2, [r3, #4]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_ZN6matrix4readEPf>:
void matrix::read(float *data_in) {
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < d_x; i++) {
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	da24      	bge.n	8000f90 <_ZN6matrix4readEPf+0x62>
		for (int j = 0; j < d_y; ++j) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	da19      	bge.n	8000f88 <_ZN6matrix4readEPf+0x5a>
			data[i][j] = data_in[i * d_y + j];
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	fb02 f203 	mul.w	r2, r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	6819      	ldr	r1, [r3, #0]
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	4413      	add	r3, r2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4403      	add	r3, r0
 8000f7e:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < d_y; ++j) {
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	e7e0      	b.n	8000f4a <_ZN6matrix4readEPf+0x1c>
	for (int i = 0; i < d_x; i++) {
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e7d5      	b.n	8000f3c <_ZN6matrix4readEPf+0xe>
		}
	};
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_ZN6matrix9transposeEv>:
matrix matrix::transpose() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	matrix result;
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fde4 	bl	8000b74 <_ZN6matrixC1Ev>
	result.setx(d_y);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff9f 	bl	8000ef6 <_ZN6matrix4setxEi>
	result.sety(d_x);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa7 	bl	8000f12 <_ZN6matrix4setyEi>
	for (int m = 0; m < d_x; m++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	da24      	bge.n	800101c <_ZN6matrix9transposeEv+0x80>
		for (int n = 0; n < d_y; ++n) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	da19      	bge.n	8001014 <_ZN6matrix9transposeEv+0x78>
			result.data[n][m] = data[m][n];
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	3302      	adds	r3, #2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4403      	add	r3, r0
 800100a:	6019      	str	r1, [r3, #0]
		for (int n = 0; n < d_y; ++n) {
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	3301      	adds	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	e7e0      	b.n	8000fd6 <_ZN6matrix9transposeEv+0x3a>
	for (int m = 0; m < d_x; m++) {
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e7d5      	b.n	8000fc8 <_ZN6matrix9transposeEv+0x2c>
		}
	}
	return result;
 800101c:	bf00      	nop
}
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_ZN6matrix4gainEf>:
		det_val = 1;

	return det_val;

}
matrix matrix::gain(float in){
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	ed87 0a01 	vstr	s0, [r7, #4]
	matrix result;
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f7ff fd9d 	bl	8000b74 <_ZN6matrixC1Ev>
	result.setx(d_x);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff ff58 	bl	8000ef6 <_ZN6matrix4setxEi>
	result.sety(d_y);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ff60 	bl	8000f12 <_ZN6matrix4setyEi>
	for (int m = 0; m < d_x; m++) {
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	da2a      	bge.n	80010b6 <_ZN6matrix4gainEf+0x90>
		for (int n = 0; n < d_y; n++) {
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	429a      	cmp	r2, r3
 800106c:	da1f      	bge.n	80010ae <_ZN6matrix4gainEf+0x88>
			result.data[m][n] = data[m][n]*in;
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4413      	add	r3, r2
 800107c:	3302      	adds	r3, #2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	edd7 7a01 	vldr	s15, [r7, #4]
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4413      	add	r3, r2
 800109c:	3302      	adds	r3, #2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < d_y; n++) {
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	3301      	adds	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	e7da      	b.n	8001064 <_ZN6matrix4gainEf+0x3e>
	for (int m = 0; m < d_x; m++) {
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e7cf      	b.n	8001056 <_ZN6matrix4gainEf+0x30>
		}
	}
	return result;
 80010b6:	bf00      	nop
}
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b0c5      	sub	sp, #276	; 0x114
 80010c4:	af2a      	add	r7, sp, #168	; 0xa8
	/* USER CODE BEGIN 1 */
	float dt = 1;
 80010c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ca:	663b      	str	r3, [r7, #96]	; 0x60
	float data_A[9] = { 1, dt, dt * dt / 2, 0, 1, dt, 0, 0, 1 };
 80010cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d0:	2224      	movs	r2, #36	; 0x24
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fc71 	bl	80039bc <memset>
 80010da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
 80010e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80010e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010f0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80010f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80010fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001100:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8001104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data_B[3] = { 0, 0, 0 };
 8001108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
	float data_C[3] = { 1, 0, 0 };
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001124:	623b      	str	r3, [r7, #32]
	float data_R[1] = { 1 };
 8001126:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800112a:	61fb      	str	r3, [r7, #28]
	float buf_g = (dt * dt) / 2;
 800112c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001130:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001134:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float data_G[3] = { buf_g, dt, 1.0 };
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001158:	617b      	str	r3, [r7, #20]
	float data_Q[1] = { 1 };
 800115a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800115e:	60fb      	str	r3, [r7, #12]
	float data_D[1] = { 0 };
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]

	float data_y[1] = { 0.001 };
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <main+0x23c>)
 8001168:	607b      	str	r3, [r7, #4]
	float data_u[1] = { 0 };
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	603b      	str	r3, [r7, #0]

	A.read(data_A);
 8001170:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001174:	4619      	mov	r1, r3
 8001176:	4862      	ldr	r0, [pc, #392]	; (8001300 <main+0x240>)
 8001178:	f7ff fed9 	bl	8000f2e <_ZN6matrix4readEPf>
	B.read(data_B);
 800117c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001180:	4619      	mov	r1, r3
 8001182:	4860      	ldr	r0, [pc, #384]	; (8001304 <main+0x244>)
 8001184:	f7ff fed3 	bl	8000f2e <_ZN6matrix4readEPf>
	C.read(data_C);
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4619      	mov	r1, r3
 800118e:	485e      	ldr	r0, [pc, #376]	; (8001308 <main+0x248>)
 8001190:	f7ff fecd 	bl	8000f2e <_ZN6matrix4readEPf>
	D.read(data_D);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	485c      	ldr	r0, [pc, #368]	; (800130c <main+0x24c>)
 800119c:	f7ff fec7 	bl	8000f2e <_ZN6matrix4readEPf>

	G.read(data_G);
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	485a      	ldr	r0, [pc, #360]	; (8001310 <main+0x250>)
 80011a8:	f7ff fec1 	bl	8000f2e <_ZN6matrix4readEPf>
	Q.read(data_Q);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	4858      	ldr	r0, [pc, #352]	; (8001314 <main+0x254>)
 80011b4:	f7ff febb 	bl	8000f2e <_ZN6matrix4readEPf>
	R.read(data_R);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4856      	ldr	r0, [pc, #344]	; (8001318 <main+0x258>)
 80011c0:	f7ff feb5 	bl	8000f2e <_ZN6matrix4readEPf>
	u.read(data_u);
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4854      	ldr	r0, [pc, #336]	; (800131c <main+0x25c>)
 80011ca:	f7ff feb0 	bl	8000f2e <_ZN6matrix4readEPf>
	y.read(data_y);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4853      	ldr	r0, [pc, #332]	; (8001320 <main+0x260>)
 80011d4:	f7ff feab 	bl	8000f2e <_ZN6matrix4readEPf>

	filter.setAtoD(A, B, C, D);
 80011d8:	4e49      	ldr	r6, [pc, #292]	; (8001300 <main+0x240>)
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <main+0x24c>)
 80011dc:	ac1e      	add	r4, sp, #120	; 0x78
 80011de:	461d      	mov	r5, r3
 80011e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011f0:	4b45      	ldr	r3, [pc, #276]	; (8001308 <main+0x248>)
 80011f2:	ac13      	add	r4, sp, #76	; 0x4c
 80011f4:	461d      	mov	r5, r3
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001206:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <main+0x244>)
 8001208:	ac08      	add	r4, sp, #32
 800120a:	461d      	mov	r5, r3
 800120c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	466d      	mov	r5, sp
 800121e:	f106 040c 	add.w	r4, r6, #12
 8001222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001226:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800122a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800122e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001232:	483c      	ldr	r0, [pc, #240]	; (8001324 <main+0x264>)
 8001234:	f7ff fa10 	bl	8000658 <_ZN13kalman_filter7setAtoDE6matrixS0_S0_S0_>
	filter.setQGR(Q, G, R);
 8001238:	4e36      	ldr	r6, [pc, #216]	; (8001314 <main+0x254>)
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <main+0x258>)
 800123c:	ac13      	add	r4, sp, #76	; 0x4c
 800123e:	461d      	mov	r5, r3
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800124c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <main+0x250>)
 8001252:	ac08      	add	r4, sp, #32
 8001254:	461d      	mov	r5, r3
 8001256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001266:	466d      	mov	r5, sp
 8001268:	f106 040c 	add.w	r4, r6, #12
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001274:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001278:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800127c:	4829      	ldr	r0, [pc, #164]	; (8001324 <main+0x264>)
 800127e:	f7ff fa2d 	bl	80006dc <_ZN13kalman_filter6setQGRE6matrixS0_S0_>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001282:	f000 fd43 	bl	8001d0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001286:	f000 f851 	bl	800132c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800128a:	f000 fa0b 	bl	80016a4 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800128e:	f000 f9db 	bl	8001648 <_ZL19MX_USART2_UART_Initv>
	MX_TIM1_Init();
 8001292:	f000 f8bd 	bl	8001410 <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 8001296:	f000 f91d 	bl	80014d4 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 800129a:	f000 f977 	bl	800158c <_ZL12MX_TIM3_Initv>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		for (int i = 0; i < 10; ++i) {
 800129e:	2300      	movs	r3, #0
 80012a0:	667b      	str	r3, [r7, #100]	; 0x64
 80012a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	dcfa      	bgt.n	800129e <main+0x1de>
			DegRel[0] = i;
 80012a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <main+0x268>)
 80012b4:	edc3 7a00 	vstr	s15, [r3]
			y.read(DegRel);
 80012b8:	491b      	ldr	r1, [pc, #108]	; (8001328 <main+0x268>)
 80012ba:	4819      	ldr	r0, [pc, #100]	; (8001320 <main+0x260>)
 80012bc:	f7ff fe37 	bl	8000f2e <_ZN6matrix4readEPf>
			filter.run(u, y);
 80012c0:	4e16      	ldr	r6, [pc, #88]	; (800131c <main+0x25c>)
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <main+0x260>)
 80012c4:	ac08      	add	r4, sp, #32
 80012c6:	461d      	mov	r5, r3
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012d8:	466d      	mov	r5, sp
 80012da:	f106 040c 	add.w	r4, r6, #12
 80012de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80012ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <main+0x264>)
 80012f0:	f7ff fa2a 	bl	8000748 <_ZN13kalman_filter3runE6matrixS0_>
		for (int i = 0; i < 10; ++i) {
 80012f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f6:	3301      	adds	r3, #1
 80012f8:	667b      	str	r3, [r7, #100]	; 0x64
 80012fa:	e7d2      	b.n	80012a2 <main+0x1e2>
 80012fc:	3a83126f 	.word	0x3a83126f
 8001300:	20000150 	.word	0x20000150
 8001304:	2000017c 	.word	0x2000017c
 8001308:	200001a8 	.word	0x200001a8
 800130c:	200001d4 	.word	0x200001d4
 8001310:	2000022c 	.word	0x2000022c
 8001314:	20000258 	.word	0x20000258
 8001318:	20000200 	.word	0x20000200
 800131c:	200002b0 	.word	0x200002b0
 8001320:	20000284 	.word	0x20000284
 8001324:	20000570 	.word	0x20000570
 8001328:	200008e0 	.word	0x200008e0

0800132c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2230      	movs	r2, #48	; 0x30
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fb3e 	bl	80039bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <_Z18SystemClock_Configv+0xdc>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a2b      	ldr	r2, [pc, #172]	; (8001408 <_Z18SystemClock_Configv+0xdc>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <_Z18SystemClock_Configv+0xdc>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <_Z18SystemClock_Configv+0xe0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a25      	ldr	r2, [pc, #148]	; (800140c <_Z18SystemClock_Configv+0xe0>)
 8001376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <_Z18SystemClock_Configv+0xe0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001388:	2302      	movs	r3, #2
 800138a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001390:	2310      	movs	r3, #16
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001394:	2302      	movs	r3, #2
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001398:	2300      	movs	r3, #0
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800139c:	2308      	movs	r3, #8
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 ffcd 	bl	8002350 <HAL_RCC_OscConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 80013c6:	f000 fa17 	bl	80017f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2302      	movs	r3, #2
 80013d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2103      	movs	r1, #3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fa2a 	bl	8002840 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf14      	ite	ne
 80013f2:	2301      	movne	r3, #1
 80013f4:	2300      	moveq	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <_Z18SystemClock_Configv+0xd4>
		Error_Handler();
 80013fc:	f000 f9fc 	bl	80017f8 <Error_Handler>
	}
}
 8001400:	bf00      	nop
 8001402:	3750      	adds	r7, #80	; 0x50
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f002 facc 	bl	80039bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <_ZL12MX_TIM1_Initv+0xc0>)
 8001430:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3071;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001440:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001444:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001458:	2301      	movs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 8001484:	f001 fc27 	bl	8002cd6 <HAL_TIM_Encoder_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <_ZL12MX_TIM1_Initv+0x8c>
		Error_Handler();
 8001498:	f000 f9ae 	bl	80017f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <_ZL12MX_TIM1_Initv+0xbc>)
 80014aa:	f001 ffcb 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
			!= HAL_OK) {
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_ZL12MX_TIM1_Initv+0xb2>
		Error_Handler();
 80014be:	f000 f99b 	bl	80017f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	; 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000002c 	.word	0x2000002c
 80014d0:	40010000 	.word	0x40010000

080014d4 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 80014fa:	2263      	movs	r2, #99	; 0x63
 80014fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 8001506:	f04f 32ff 	mov.w	r2, #4294967295
 800150a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001518:	481b      	ldr	r0, [pc, #108]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 800151a:	f001 fb8d 	bl	8002c38 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <_ZL12MX_TIM2_Initv+0x5e>
		Error_Handler();
 800152e:	f000 f963 	bl	80017f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4619      	mov	r1, r3
 800153e:	4812      	ldr	r0, [pc, #72]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 8001540:	f001 fd77 	bl	8003032 <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <_ZL12MX_TIM2_Initv+0x84>
		Error_Handler();
 8001554:	f000 f950 	bl	80017f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001560:	463b      	mov	r3, r7
 8001562:	4619      	mov	r1, r3
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <_ZL12MX_TIM2_Initv+0xb4>)
 8001566:	f001 ff6d 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZL12MX_TIM2_Initv+0xaa>
		Error_Handler();
 800157a:	f000 f93d 	bl	80017f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000074 	.word	0x20000074

0800158c <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	; 0x30
 8001590:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2224      	movs	r2, #36	; 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fa0e 	bl	80039bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 80015aa:	4a26      	ldr	r2, [pc, #152]	; (8001644 <_ZL12MX_TIM3_Initv+0xb8>)
 80015ac:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3071;
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 80015bc:	f640 32ff 	movw	r2, #3071	; 0xbff
 80015c0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015d6:	2301      	movs	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015e6:	2301      	movs	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4619      	mov	r1, r3
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 80015fa:	f001 fb6c 	bl	8002cd6 <HAL_TIM_Encoder_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 800160e:	f000 f8f3 	bl	80017f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <_ZL12MX_TIM3_Initv+0xb4>)
 8001620:	f001 ff10 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 8001634:	f000 f8e0 	bl	80017f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	; 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200000bc 	.word	0x200000bc
 8001644:	40000400 	.word	0x40000400

08001648 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001650:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001680:	f001 ff62 	bl	8003548 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8001694:	f000 f8b0 	bl	80017f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000104 	.word	0x20000104
 80016a0:	40004400 	.word	0x40004400

080016a4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a32      	ldr	r2, [pc, #200]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a2b      	ldr	r2, [pc, #172]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a24      	ldr	r2, [pc, #144]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a1d      	ldr	r2, [pc, #116]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <_ZL12MX_GPIO_Initv+0xe8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2120      	movs	r1, #32
 800172e:	4818      	ldr	r0, [pc, #96]	; (8001790 <_ZL12MX_GPIO_Initv+0xec>)
 8001730:	f000 fdf4 	bl	800231c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001738:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800173a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800173e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <_ZL12MX_GPIO_Initv+0xf0>)
 800174c:	f000 fc62 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001750:	2303      	movs	r3, #3
 8001752:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001758:	2301      	movs	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480b      	ldr	r0, [pc, #44]	; (8001790 <_ZL12MX_GPIO_Initv+0xec>)
 8001764:	f000 fc56 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001768:	2320      	movs	r3, #32
 800176a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <_ZL12MX_GPIO_Initv+0xec>)
 8001780:	f000 fc48 	bl	8002014 <HAL_GPIO_Init>

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020800 	.word	0x40020800

08001798 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001798:	b4b0      	push	{r4, r5, r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d109      	bne.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x24>
		_micros += 4294967295;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f112 34ff 	adds.w	r4, r2, #4294967295
 80017b2:	f143 0500 	adc.w	r5, r3, #0
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017b8:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim3) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d109      	bne.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0x40>
		pos_stack += 3071;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80017ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000074 	.word	0x20000074
 80017e8:	20000148 	.word	0x20000148
 80017ec:	200000bc 	.word	0x200000bc
 80017f0:	200008e4 	.word	0x200008e4
 80017f4:	453ff000 	.word	0x453ff000

080017f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>
	...

08001804 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d161      	bne.n	80018d8 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181a:	4293      	cmp	r3, r2
 800181c:	d15c      	bne.n	80018d8 <_Z41__static_initialization_and_destruction_0ii+0xd4>
matrix A(3,3);
 800181e:	2203      	movs	r2, #3
 8001820:	2103      	movs	r1, #3
 8001822:	482f      	ldr	r0, [pc, #188]	; (80018e0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001824:	f7ff f9d6 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix B(3,1);
 8001828:	2201      	movs	r2, #1
 800182a:	2103      	movs	r1, #3
 800182c:	482d      	ldr	r0, [pc, #180]	; (80018e4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800182e:	f7ff f9d1 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix C(1,3);
 8001832:	2203      	movs	r2, #3
 8001834:	2101      	movs	r1, #1
 8001836:	482c      	ldr	r0, [pc, #176]	; (80018e8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001838:	f7ff f9cc 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix D(1,1);
 800183c:	2201      	movs	r2, #1
 800183e:	2101      	movs	r1, #1
 8001840:	482a      	ldr	r0, [pc, #168]	; (80018ec <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001842:	f7ff f9c7 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix R(1,1);
 8001846:	2201      	movs	r2, #1
 8001848:	2101      	movs	r1, #1
 800184a:	4829      	ldr	r0, [pc, #164]	; (80018f0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800184c:	f7ff f9c2 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix G(3,1);
 8001850:	2201      	movs	r2, #1
 8001852:	2103      	movs	r1, #3
 8001854:	4827      	ldr	r0, [pc, #156]	; (80018f4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001856:	f7ff f9bd 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix Q(1,1);
 800185a:	2201      	movs	r2, #1
 800185c:	2101      	movs	r1, #1
 800185e:	4826      	ldr	r0, [pc, #152]	; (80018f8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001860:	f7ff f9b8 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix y(1,1);
 8001864:	2201      	movs	r2, #1
 8001866:	2101      	movs	r1, #1
 8001868:	4824      	ldr	r0, [pc, #144]	; (80018fc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800186a:	f7ff f9b3 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix u(1,1);
 800186e:	2201      	movs	r2, #1
 8001870:	2101      	movs	r1, #1
 8001872:	4823      	ldr	r0, [pc, #140]	; (8001900 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8001874:	f7ff f9ae 	bl	8000bd4 <_ZN6matrixC1Eii>
matrix gainK, errorY, U, Y, I33;
 8001878:	4822      	ldr	r0, [pc, #136]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800187a:	f7ff f97b 	bl	8000b74 <_ZN6matrixC1Ev>
 800187e:	4822      	ldr	r0, [pc, #136]	; (8001908 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001880:	f7ff f978 	bl	8000b74 <_ZN6matrixC1Ev>
 8001884:	4821      	ldr	r0, [pc, #132]	; (800190c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001886:	f7ff f975 	bl	8000b74 <_ZN6matrixC1Ev>
 800188a:	4821      	ldr	r0, [pc, #132]	; (8001910 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800188c:	f7ff f972 	bl	8000b74 <_ZN6matrixC1Ev>
 8001890:	4820      	ldr	r0, [pc, #128]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001892:	f7ff f96f 	bl	8000b74 <_ZN6matrixC1Ev>
matrix P, P_old, P_new;
 8001896:	4820      	ldr	r0, [pc, #128]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001898:	f7ff f96c 	bl	8000b74 <_ZN6matrixC1Ev>
 800189c:	481f      	ldr	r0, [pc, #124]	; (800191c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800189e:	f7ff f969 	bl	8000b74 <_ZN6matrixC1Ev>
 80018a2:	481f      	ldr	r0, [pc, #124]	; (8001920 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80018a4:	f7ff f966 	bl	8000b74 <_ZN6matrixC1Ev>
matrix predictX, predictX_old, predictX_new;
 80018a8:	481e      	ldr	r0, [pc, #120]	; (8001924 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80018aa:	f7ff f963 	bl	8000b74 <_ZN6matrixC1Ev>
 80018ae:	481e      	ldr	r0, [pc, #120]	; (8001928 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80018b0:	f7ff f960 	bl	8000b74 <_ZN6matrixC1Ev>
 80018b4:	481d      	ldr	r0, [pc, #116]	; (800192c <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80018b6:	f7ff f95d 	bl	8000b74 <_ZN6matrixC1Ev>
matrix resultX, resultY;
 80018ba:	481d      	ldr	r0, [pc, #116]	; (8001930 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80018bc:	f7ff f95a 	bl	8000b74 <_ZN6matrixC1Ev>
 80018c0:	481c      	ldr	r0, [pc, #112]	; (8001934 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80018c2:	f7ff f957 	bl	8000b74 <_ZN6matrixC1Ev>
matrix testInv;//test
 80018c6:	481c      	ldr	r0, [pc, #112]	; (8001938 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80018c8:	f7ff f954 	bl	8000b74 <_ZN6matrixC1Ev>
matrix testTrans;//test
 80018cc:	481b      	ldr	r0, [pc, #108]	; (800193c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80018ce:	f7ff f951 	bl	8000b74 <_ZN6matrixC1Ev>
kalman_filter filter;
 80018d2:	481b      	ldr	r0, [pc, #108]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80018d4:	f7fe fdfc 	bl	80004d0 <_ZN13kalman_filterC1Ev>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000150 	.word	0x20000150
 80018e4:	2000017c 	.word	0x2000017c
 80018e8:	200001a8 	.word	0x200001a8
 80018ec:	200001d4 	.word	0x200001d4
 80018f0:	20000200 	.word	0x20000200
 80018f4:	2000022c 	.word	0x2000022c
 80018f8:	20000258 	.word	0x20000258
 80018fc:	20000284 	.word	0x20000284
 8001900:	200002b0 	.word	0x200002b0
 8001904:	200002dc 	.word	0x200002dc
 8001908:	20000308 	.word	0x20000308
 800190c:	20000334 	.word	0x20000334
 8001910:	20000360 	.word	0x20000360
 8001914:	2000038c 	.word	0x2000038c
 8001918:	200003b8 	.word	0x200003b8
 800191c:	200003e4 	.word	0x200003e4
 8001920:	20000410 	.word	0x20000410
 8001924:	2000043c 	.word	0x2000043c
 8001928:	20000468 	.word	0x20000468
 800192c:	20000494 	.word	0x20000494
 8001930:	200004c0 	.word	0x200004c0
 8001934:	200004ec 	.word	0x200004ec
 8001938:	20000518 	.word	0x20000518
 800193c:	20000544 	.word	0x20000544
 8001940:	20000570 	.word	0x20000570

08001944 <_GLOBAL__sub_I_htim1>:
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
 8001948:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff ff59 	bl	8001804 <_Z41__static_initialization_and_destruction_0ii>
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_MspInit+0x4c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x4c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001992:	2007      	movs	r0, #7
 8001994:	f000 fafc 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a46      	ldr	r2, [pc, #280]	; (8001adc <HAL_TIM_Encoder_MspInit+0x138>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d14d      	bne.n	8001a62 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a44      	ldr	r2, [pc, #272]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4832      	ldr	r0, [pc, #200]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0x140>)
 8001a1c:	f000 fafa 	bl	8002014 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2018      	movs	r0, #24
 8001a26:	f000 fabe 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a2a:	2018      	movs	r0, #24
 8001a2c:	f000 fad7 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2019      	movs	r0, #25
 8001a36:	f000 fab6 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a3a:	2019      	movs	r0, #25
 8001a3c:	f000 facf 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	201a      	movs	r0, #26
 8001a46:	f000 faae 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a4a:	201a      	movs	r0, #26
 8001a4c:	f000 fac7 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	201b      	movs	r0, #27
 8001a56:	f000 faa6 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a5a:	201b      	movs	r0, #27
 8001a5c:	f000 fabf 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a60:	e038      	b.n	8001ad4 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <HAL_TIM_Encoder_MspInit+0x144>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d133      	bne.n	8001ad4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0x140>)
 8001ac0:	f000 faa8 	bl	8002014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	201d      	movs	r0, #29
 8001aca:	f000 fa6c 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ace:	201d      	movs	r0, #29
 8001ad0:	f000 fa85 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	; 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40000400 	.word	0x40000400

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d115      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	201c      	movs	r0, #28
 8001b20:	f000 fa41 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b24:	201c      	movs	r0, #28
 8001b26:	f000 fa5a 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <HAL_UART_MspInit+0x84>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d12b      	bne.n	8001bb2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b92:	230c      	movs	r3, #12
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001bae:	f000 fa31 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c14:	f000 f8cc 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c22:	f001 f8fe 	bl	8002e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000002c 	.word	0x2000002c

08001c30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c36:	f001 f8f4 	bl	8002e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000002c 	.word	0x2000002c

08001c44 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c4a:	f001 f8ea 	bl	8002e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000002c 	.word	0x2000002c

08001c58 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM1_CC_IRQHandler+0x10>)
 8001c5e:	f001 f8e0 	bl	8002e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000002c 	.word	0x2000002c

08001c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM2_IRQHandler+0x10>)
 8001c72:	f001 f8d6 	bl	8002e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000074 	.word	0x20000074

08001c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM3_IRQHandler+0x10>)
 8001c86:	f001 f8cc 	bl	8002e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200000bc 	.word	0x200000bc

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffd7 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f001 fe45 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff f9e9 	bl	80010c0 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001cfc:	08003a34 	.word	0x08003a34
  ldr r2, =_sbss
 8001d00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d04:	200008ec 	.word	0x200008ec

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f92b 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fe08 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f943 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 f90b 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	200008e8 	.word	0x200008e8

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200008e8 	.word	0x200008e8

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e159      	b.n	80022e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8148 	bne.w	80022de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d005      	beq.n	8002066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	2b02      	cmp	r3, #2
 8002064:	d130      	bne.n	80020c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209c:	2201      	movs	r2, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0201 	and.w	r2, r3, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d017      	beq.n	8002104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d123      	bne.n	8002158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	08da      	lsrs	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3208      	adds	r2, #8
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0203 	and.w	r2, r3, #3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a2 	beq.w	80022de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b57      	ldr	r3, [pc, #348]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a56      	ldr	r2, [pc, #344]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b54      	ldr	r3, [pc, #336]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b6:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_GPIO_Init+0x2ec>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x2f0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x202>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_GPIO_Init+0x2f4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x1fe>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_GPIO_Init+0x2f8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x1fa>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a46      	ldr	r2, [pc, #280]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x1f6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a45      	ldr	r2, [pc, #276]	; (8002314 <HAL_GPIO_Init+0x300>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x1f2>
 8002202:	2304      	movs	r3, #4
 8002204:	e008      	b.n	8002218 <HAL_GPIO_Init+0x204>
 8002206:	2307      	movs	r3, #7
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x204>
 800220a:	2303      	movs	r3, #3
 800220c:	e004      	b.n	8002218 <HAL_GPIO_Init+0x204>
 800220e:	2302      	movs	r3, #2
 8002210:	e002      	b.n	8002218 <HAL_GPIO_Init+0x204>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x204>
 8002216:	2300      	movs	r3, #0
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	f002 0203 	and.w	r2, r2, #3
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	4093      	lsls	r3, r2
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002228:	4935      	ldr	r1, [pc, #212]	; (8002300 <HAL_GPIO_Init+0x2ec>)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_GPIO_Init+0x304>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800225a:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <HAL_GPIO_Init+0x304>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_GPIO_Init+0x304>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_GPIO_Init+0x304>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_GPIO_Init+0x304>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b0f      	cmp	r3, #15
 80022e8:	f67f aea2 	bls.w	8002030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40013800 	.word	0x40013800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40021000 	.word	0x40021000
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002338:	e003      	b.n	8002342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e264      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d075      	beq.n	800245a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236e:	4ba3      	ldr	r3, [pc, #652]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d00c      	beq.n	8002394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237a:	4ba0      	ldr	r3, [pc, #640]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002382:	2b08      	cmp	r3, #8
 8002384:	d112      	bne.n	80023ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002386:	4b9d      	ldr	r3, [pc, #628]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002392:	d10b      	bne.n	80023ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	4b99      	ldr	r3, [pc, #612]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d05b      	beq.n	8002458 <HAL_RCC_OscConfig+0x108>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d157      	bne.n	8002458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e23f      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b4:	d106      	bne.n	80023c4 <HAL_RCC_OscConfig+0x74>
 80023b6:	4b91      	ldr	r3, [pc, #580]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a90      	ldr	r2, [pc, #576]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e01d      	b.n	8002400 <HAL_RCC_OscConfig+0xb0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x98>
 80023ce:	4b8b      	ldr	r3, [pc, #556]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a8a      	ldr	r2, [pc, #552]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a87      	ldr	r2, [pc, #540]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0xb0>
 80023e8:	4b84      	ldr	r3, [pc, #528]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a83      	ldr	r2, [pc, #524]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a80      	ldr	r2, [pc, #512]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fce6 	bl	8001dd8 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fce2 	bl	8001dd8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e204      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0xc0>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fcd2 	bl	8001dd8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fcce 	bl	8001dd8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1f0      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0xe8>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d063      	beq.n	800252e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002466:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002472:	4b62      	ldr	r3, [pc, #392]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247a:	2b08      	cmp	r3, #8
 800247c:	d11c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d116      	bne.n	80024b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x152>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e1c4      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b56      	ldr	r3, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4952      	ldr	r1, [pc, #328]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	e03a      	b.n	800252e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_RCC_OscConfig+0x2b0>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff fc87 	bl	8001dd8 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff fc83 	bl	8001dd8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e1a5      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b43      	ldr	r3, [pc, #268]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4940      	ldr	r1, [pc, #256]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_OscConfig+0x2b0>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fc66 	bl	8001dd8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002510:	f7ff fc62 	bl	8001dd8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e184      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d030      	beq.n	800259c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <HAL_RCC_OscConfig+0x2b4>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7ff fc46 	bl	8001dd8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002550:	f7ff fc42 	bl	8001dd8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e164      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x200>
 800256e:	e015      	b.n	800259c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x2b4>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fc2f 	bl	8001dd8 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257e:	f7ff fc2b 	bl	8001dd8 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e14d      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a0 	beq.w	80026ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x2b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d121      	bne.n	800262a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_RCC_OscConfig+0x2b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_RCC_OscConfig+0x2b8>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7ff fbf1 	bl	8001dd8 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e011      	b.n	800261e <HAL_RCC_OscConfig+0x2ce>
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470000 	.word	0x42470000
 8002604:	42470e80 	.word	0x42470e80
 8002608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260c:	f7ff fbe4 	bl	8001dd8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e106      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b85      	ldr	r3, [pc, #532]	; (8002834 <HAL_RCC_OscConfig+0x4e4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x2f0>
 8002632:	4b81      	ldr	r3, [pc, #516]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a80      	ldr	r2, [pc, #512]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	e01c      	b.n	800267a <HAL_RCC_OscConfig+0x32a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d10c      	bne.n	8002662 <HAL_RCC_OscConfig+0x312>
 8002648:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a7a      	ldr	r2, [pc, #488]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b78      	ldr	r3, [pc, #480]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a77      	ldr	r2, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	e00b      	b.n	800267a <HAL_RCC_OscConfig+0x32a>
 8002662:	4b75      	ldr	r3, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a74      	ldr	r2, [pc, #464]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	4b72      	ldr	r3, [pc, #456]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a71      	ldr	r2, [pc, #452]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d015      	beq.n	80026ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff fba9 	bl	8001dd8 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7ff fba5 	bl	8001dd8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0c5      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	4b65      	ldr	r3, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ee      	beq.n	800268a <HAL_RCC_OscConfig+0x33a>
 80026ac:	e014      	b.n	80026d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7ff fb93 	bl	8001dd8 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff fb8f 	bl	8001dd8 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0af      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ee      	bne.n	80026b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d105      	bne.n	80026ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026de:	4b56      	ldr	r3, [pc, #344]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 809b 	beq.w	800282a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d05c      	beq.n	80027ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d141      	bne.n	800278c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x4ec>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7ff fb63 	bl	8001dd8 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7ff fb5f 	bl	8001dd8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e081      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	019b      	lsls	r3, r3, #6
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	3b01      	subs	r3, #1
 800274e:	041b      	lsls	r3, r3, #16
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	061b      	lsls	r3, r3, #24
 8002758:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <HAL_RCC_OscConfig+0x4ec>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fb38 	bl	8001dd8 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7ff fb34 	bl	8001dd8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e056      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x41c>
 800278a:	e04e      	b.n	800282a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCC_OscConfig+0x4ec>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff fb21 	bl	8001dd8 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff fb1d 	bl	8001dd8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e03f      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x44a>
 80027b8:	e037      	b.n	800282a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e032      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d028      	beq.n	8002826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d121      	bne.n	8002826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d11a      	bne.n	8002826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f6:	4013      	ands	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fe:	4293      	cmp	r3, r2
 8002800:	d111      	bne.n	8002826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d107      	bne.n	8002826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40007000 	.word	0x40007000
 8002838:	40023800 	.word	0x40023800
 800283c:	42470060 	.word	0x42470060

08002840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0cc      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b68      	ldr	r3, [pc, #416]	; (80029f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d90c      	bls.n	800287c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0b8      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800289e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a52      	ldr	r2, [pc, #328]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	494d      	ldr	r1, [pc, #308]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d044      	beq.n	8002960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d119      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e07f      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d003      	beq.n	80028fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06f      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e067      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4934      	ldr	r1, [pc, #208]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002930:	f7ff fa52 	bl	8001dd8 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7ff fa4e 	bl	8001dd8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e04f      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d20c      	bcs.n	8002988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e032      	b.n	80029ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4916      	ldr	r1, [pc, #88]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	490e      	ldr	r1, [pc, #56]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c6:	f000 f821 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	490a      	ldr	r1, [pc, #40]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	5ccb      	ldrb	r3, [r1, r3]
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff f9b2 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00
 80029fc:	40023800 	.word	0x40023800
 8002a00:	08003a08 	.word	0x08003a08
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a24:	4b67      	ldr	r3, [pc, #412]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d00d      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x40>
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	f200 80bd 	bhi.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x34>
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a3e:	e0b7      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a42:	60bb      	str	r3, [r7, #8]
       break;
 8002a44:	e0b7      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a48:	60bb      	str	r3, [r7, #8]
      break;
 8002a4a:	e0b4      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4c:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a56:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d04d      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a62:	4b58      	ldr	r3, [pc, #352]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	ea02 0800 	and.w	r8, r2, r0
 8002a7a:	ea03 0901 	and.w	r9, r3, r1
 8002a7e:	4640      	mov	r0, r8
 8002a80:	4649      	mov	r1, r9
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	014b      	lsls	r3, r1, #5
 8002a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a90:	0142      	lsls	r2, r0, #5
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	ebb0 0008 	subs.w	r0, r0, r8
 8002a9a:	eb61 0109 	sbc.w	r1, r1, r9
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	018b      	lsls	r3, r1, #6
 8002aa8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aac:	0182      	lsls	r2, r0, #6
 8002aae:	1a12      	subs	r2, r2, r0
 8002ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	00d9      	lsls	r1, r3, #3
 8002abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac2:	00d0      	lsls	r0, r2, #3
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	eb12 0208 	adds.w	r2, r2, r8
 8002acc:	eb43 0309 	adc.w	r3, r3, r9
 8002ad0:	f04f 0000 	mov.w	r0, #0
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	0259      	lsls	r1, r3, #9
 8002ada:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ade:	0250      	lsls	r0, r2, #9
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	f7fd fb72 	bl	80001d8 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e04a      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	461a      	mov	r2, r3
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	ea02 0400 	and.w	r4, r2, r0
 8002b16:	ea03 0501 	and.w	r5, r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	014b      	lsls	r3, r1, #5
 8002b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b2c:	0142      	lsls	r2, r0, #5
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	1b00      	subs	r0, r0, r4
 8002b34:	eb61 0105 	sbc.w	r1, r1, r5
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	018b      	lsls	r3, r1, #6
 8002b42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b46:	0182      	lsls	r2, r0, #6
 8002b48:	1a12      	subs	r2, r2, r0
 8002b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	00d9      	lsls	r1, r3, #3
 8002b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b5c:	00d0      	lsls	r0, r2, #3
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	1912      	adds	r2, r2, r4
 8002b64:	eb45 0303 	adc.w	r3, r5, r3
 8002b68:	f04f 0000 	mov.w	r0, #0
 8002b6c:	f04f 0100 	mov.w	r1, #0
 8002b70:	0299      	lsls	r1, r3, #10
 8002b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b76:	0290      	lsls	r0, r2, #10
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	f7fd fb26 	bl	80001d8 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	60bb      	str	r3, [r7, #8]
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bb2:	60bb      	str	r3, [r7, #8]
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	007a1200 	.word	0x007a1200

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000000 	.word	0x20000000

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08003a18 	.word	0x08003a18

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c14:	f7ff ffdc 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0b5b      	lsrs	r3, r3, #13
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08003a18 	.word	0x08003a18

08002c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e041      	b.n	8002cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe ff44 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f000 faca 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e097      	b.n	8002e1a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fe50 	bl	80019a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d1a:	f023 0307 	bic.w	r3, r3, #7
 8002d1e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f000 fa70 	bl	8003210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d58:	f023 0303 	bic.w	r3, r3, #3
 8002d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d76:	f023 030c 	bic.w	r3, r3, #12
 8002d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	4313      	orrs	r3, r2
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	011a      	lsls	r2, r3, #4
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	031b      	lsls	r3, r3, #12
 8002da6:	4313      	orrs	r3, r2
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002db4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002dbc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d122      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d11b      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f06f 0202 	mvn.w	r2, #2
 8002e4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f9b5 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002e6a:	e005      	b.n	8002e78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9a7 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f9b8 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d122      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d11b      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f06f 0204 	mvn.w	r2, #4
 8002ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f98b 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002ebe:	e005      	b.n	8002ecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f97d 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f98e 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d122      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d11b      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0208 	mvn.w	r2, #8
 8002ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f961 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002f12:	e005      	b.n	8002f20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f953 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f964 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d122      	bne.n	8002f7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d11b      	bne.n	8002f7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f06f 0210 	mvn.w	r2, #16
 8002f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2208      	movs	r2, #8
 8002f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f937 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002f66:	e005      	b.n	8002f74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f929 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f93a 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10e      	bne.n	8002fa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f06f 0201 	mvn.w	r2, #1
 8002f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fe fbf9 	bl	8001798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d10e      	bne.n	8002fd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d107      	bne.n	8002fd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fab1 	bl	8003534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d10e      	bne.n	8002ffe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	d107      	bne.n	8002ffe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8ff 	bl	80031fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b20      	cmp	r3, #32
 800300a:	d10e      	bne.n	800302a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b20      	cmp	r3, #32
 8003018:	d107      	bne.n	800302a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0220 	mvn.w	r2, #32
 8003022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa7b 	bl	8003520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_TIM_ConfigClockSource+0x1c>
 800304a:	2302      	movs	r3, #2
 800304c:	e0b4      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x186>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003074:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	d03e      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xd4>
 8003088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308c:	f200 8087 	bhi.w	800319e <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	f000 8086 	beq.w	80031a4 <HAL_TIM_ConfigClockSource+0x172>
 8003098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309c:	d87f      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
 800309e:	2b70      	cmp	r3, #112	; 0x70
 80030a0:	d01a      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xa6>
 80030a2:	2b70      	cmp	r3, #112	; 0x70
 80030a4:	d87b      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
 80030a6:	2b60      	cmp	r3, #96	; 0x60
 80030a8:	d050      	beq.n	800314c <HAL_TIM_ConfigClockSource+0x11a>
 80030aa:	2b60      	cmp	r3, #96	; 0x60
 80030ac:	d877      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
 80030ae:	2b50      	cmp	r3, #80	; 0x50
 80030b0:	d03c      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xfa>
 80030b2:	2b50      	cmp	r3, #80	; 0x50
 80030b4:	d873      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d058      	beq.n	800316c <HAL_TIM_ConfigClockSource+0x13a>
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d86f      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
 80030be:	2b30      	cmp	r3, #48	; 0x30
 80030c0:	d064      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x15a>
 80030c2:	2b30      	cmp	r3, #48	; 0x30
 80030c4:	d86b      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d060      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x15a>
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d867      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d05c      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x15a>
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d05a      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x15a>
 80030d6:	e062      	b.n	800319e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f000 f98c 	bl	8003404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]
      break;
 8003104:	e04f      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f000 f975 	bl	8003404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003128:	609a      	str	r2, [r3, #8]
      break;
 800312a:	e03c      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	461a      	mov	r2, r3
 800313a:	f000 f8e9 	bl	8003310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2150      	movs	r1, #80	; 0x50
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f942 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 800314a:	e02c      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	461a      	mov	r2, r3
 800315a:	f000 f908 	bl	800336e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2160      	movs	r1, #96	; 0x60
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f932 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 800316a:	e01c      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	461a      	mov	r2, r3
 800317a:	f000 f8c9 	bl	8003310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2140      	movs	r1, #64	; 0x40
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f922 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 800318a:	e00c      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f000 f919 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 800319c:	e003      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
      break;
 80031a2:	e000      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <TIM_Base_SetConfig+0xe4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00f      	beq.n	8003248 <TIM_Base_SetConfig+0x38>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0x38>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a31      	ldr	r2, [pc, #196]	; (80032f8 <TIM_Base_SetConfig+0xe8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x38>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a30      	ldr	r2, [pc, #192]	; (80032fc <TIM_Base_SetConfig+0xec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x38>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <TIM_Base_SetConfig+0xf0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <TIM_Base_SetConfig+0xe4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01b      	beq.n	800329a <TIM_Base_SetConfig+0x8a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d017      	beq.n	800329a <TIM_Base_SetConfig+0x8a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <TIM_Base_SetConfig+0xe8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <TIM_Base_SetConfig+0x8a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a21      	ldr	r2, [pc, #132]	; (80032fc <TIM_Base_SetConfig+0xec>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00f      	beq.n	800329a <TIM_Base_SetConfig+0x8a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <TIM_Base_SetConfig+0xf0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00b      	beq.n	800329a <TIM_Base_SetConfig+0x8a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <TIM_Base_SetConfig+0xf4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <TIM_Base_SetConfig+0xf8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1d      	ldr	r2, [pc, #116]	; (800330c <TIM_Base_SetConfig+0xfc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <TIM_Base_SetConfig+0xe4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d103      	bne.n	80032e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	615a      	str	r2, [r3, #20]
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800

08003310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0201 	bic.w	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 030a 	bic.w	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800336e:	b480      	push	{r7}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0210 	bic.w	r2, r3, #16
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f043 0307 	orr.w	r3, r3, #7
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800341e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	021a      	lsls	r2, r3, #8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	431a      	orrs	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003458:	2302      	movs	r3, #2
 800345a:	e050      	b.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d013      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10c      	bne.n	80034ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40014000 	.word	0x40014000

08003520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e03f      	b.n	80035da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe fae2 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800358a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f829 	bl	80035e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e8:	b09f      	sub	sp, #124	; 0x7c
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	ea40 0301 	orr.w	r3, r0, r1
 8003604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	431a      	orrs	r2, r3
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4313      	orrs	r3, r2
 800361c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003628:	f021 010c 	bic.w	r1, r1, #12
 800362c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003632:	430b      	orrs	r3, r1
 8003634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003642:	6999      	ldr	r1, [r3, #24]
 8003644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	ea40 0301 	orr.w	r3, r0, r1
 800364c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4bc5      	ldr	r3, [pc, #788]	; (8003968 <UART_SetConfig+0x384>)
 8003654:	429a      	cmp	r2, r3
 8003656:	d004      	beq.n	8003662 <UART_SetConfig+0x7e>
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4bc3      	ldr	r3, [pc, #780]	; (800396c <UART_SetConfig+0x388>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d103      	bne.n	800366a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003662:	f7ff fad5 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8003666:	6778      	str	r0, [r7, #116]	; 0x74
 8003668:	e002      	b.n	8003670 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7ff fabd 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 800366e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	f040 80b6 	bne.w	80037e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800367c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367e:	461c      	mov	r4, r3
 8003680:	f04f 0500 	mov.w	r5, #0
 8003684:	4622      	mov	r2, r4
 8003686:	462b      	mov	r3, r5
 8003688:	1891      	adds	r1, r2, r2
 800368a:	6439      	str	r1, [r7, #64]	; 0x40
 800368c:	415b      	adcs	r3, r3
 800368e:	647b      	str	r3, [r7, #68]	; 0x44
 8003690:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003694:	1912      	adds	r2, r2, r4
 8003696:	eb45 0303 	adc.w	r3, r5, r3
 800369a:	f04f 0000 	mov.w	r0, #0
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	00d9      	lsls	r1, r3, #3
 80036a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036a8:	00d0      	lsls	r0, r2, #3
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	1911      	adds	r1, r2, r4
 80036b0:	6639      	str	r1, [r7, #96]	; 0x60
 80036b2:	416b      	adcs	r3, r5
 80036b4:	667b      	str	r3, [r7, #100]	; 0x64
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	1891      	adds	r1, r2, r2
 80036c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036c4:	415b      	adcs	r3, r3
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036d0:	f7fc fd82 	bl	80001d8 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4ba5      	ldr	r3, [pc, #660]	; (8003970 <UART_SetConfig+0x38c>)
 80036da:	fba3 2302 	umull	r2, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	011e      	lsls	r6, r3, #4
 80036e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e4:	461c      	mov	r4, r3
 80036e6:	f04f 0500 	mov.w	r5, #0
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	1891      	adds	r1, r2, r2
 80036f0:	6339      	str	r1, [r7, #48]	; 0x30
 80036f2:	415b      	adcs	r3, r3
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
 80036f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036fa:	1912      	adds	r2, r2, r4
 80036fc:	eb45 0303 	adc.w	r3, r5, r3
 8003700:	f04f 0000 	mov.w	r0, #0
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	00d9      	lsls	r1, r3, #3
 800370a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800370e:	00d0      	lsls	r0, r2, #3
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	1911      	adds	r1, r2, r4
 8003716:	65b9      	str	r1, [r7, #88]	; 0x58
 8003718:	416b      	adcs	r3, r5
 800371a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800371c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	461a      	mov	r2, r3
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	1891      	adds	r1, r2, r2
 8003728:	62b9      	str	r1, [r7, #40]	; 0x28
 800372a:	415b      	adcs	r3, r3
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800372e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003732:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003736:	f7fc fd4f 	bl	80001d8 <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4b8c      	ldr	r3, [pc, #560]	; (8003970 <UART_SetConfig+0x38c>)
 8003740:	fba3 1302 	umull	r1, r3, r3, r2
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	2164      	movs	r1, #100	; 0x64
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	3332      	adds	r3, #50	; 0x32
 8003752:	4a87      	ldr	r2, [pc, #540]	; (8003970 <UART_SetConfig+0x38c>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003760:	441e      	add	r6, r3
 8003762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003764:	4618      	mov	r0, r3
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	1894      	adds	r4, r2, r2
 8003770:	623c      	str	r4, [r7, #32]
 8003772:	415b      	adcs	r3, r3
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800377a:	1812      	adds	r2, r2, r0
 800377c:	eb41 0303 	adc.w	r3, r1, r3
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	f04f 0500 	mov.w	r5, #0
 8003788:	00dd      	lsls	r5, r3, #3
 800378a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800378e:	00d4      	lsls	r4, r2, #3
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	1814      	adds	r4, r2, r0
 8003796:	653c      	str	r4, [r7, #80]	; 0x50
 8003798:	414b      	adcs	r3, r1
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	461a      	mov	r2, r3
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	1891      	adds	r1, r2, r2
 80037a8:	61b9      	str	r1, [r7, #24]
 80037aa:	415b      	adcs	r3, r3
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037b6:	f7fc fd0f 	bl	80001d8 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <UART_SetConfig+0x38c>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a67      	ldr	r2, [pc, #412]	; (8003970 <UART_SetConfig+0x38c>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 0207 	and.w	r2, r3, #7
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4432      	add	r2, r6
 80037e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e6:	e0b9      	b.n	800395c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ea:	461c      	mov	r4, r3
 80037ec:	f04f 0500 	mov.w	r5, #0
 80037f0:	4622      	mov	r2, r4
 80037f2:	462b      	mov	r3, r5
 80037f4:	1891      	adds	r1, r2, r2
 80037f6:	6139      	str	r1, [r7, #16]
 80037f8:	415b      	adcs	r3, r3
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003800:	1912      	adds	r2, r2, r4
 8003802:	eb45 0303 	adc.w	r3, r5, r3
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	00d9      	lsls	r1, r3, #3
 8003810:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003814:	00d0      	lsls	r0, r2, #3
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	eb12 0804 	adds.w	r8, r2, r4
 800381e:	eb43 0905 	adc.w	r9, r3, r5
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4618      	mov	r0, r3
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	008b      	lsls	r3, r1, #2
 8003836:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800383a:	0082      	lsls	r2, r0, #2
 800383c:	4640      	mov	r0, r8
 800383e:	4649      	mov	r1, r9
 8003840:	f7fc fcca 	bl	80001d8 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b49      	ldr	r3, [pc, #292]	; (8003970 <UART_SetConfig+0x38c>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011e      	lsls	r6, r3, #4
 8003852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003854:	4618      	mov	r0, r3
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	1894      	adds	r4, r2, r2
 8003860:	60bc      	str	r4, [r7, #8]
 8003862:	415b      	adcs	r3, r3
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800386a:	1812      	adds	r2, r2, r0
 800386c:	eb41 0303 	adc.w	r3, r1, r3
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	f04f 0500 	mov.w	r5, #0
 8003878:	00dd      	lsls	r5, r3, #3
 800387a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800387e:	00d4      	lsls	r4, r2, #3
 8003880:	4622      	mov	r2, r4
 8003882:	462b      	mov	r3, r5
 8003884:	1814      	adds	r4, r2, r0
 8003886:	64bc      	str	r4, [r7, #72]	; 0x48
 8003888:	414b      	adcs	r3, r1
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4618      	mov	r0, r3
 8003892:	f04f 0100 	mov.w	r1, #0
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	008b      	lsls	r3, r1, #2
 80038a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038a4:	0082      	lsls	r2, r0, #2
 80038a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038aa:	f7fc fc95 	bl	80001d8 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <UART_SetConfig+0x38c>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <UART_SetConfig+0x38c>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d2:	441e      	add	r6, r3
 80038d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d6:	4618      	mov	r0, r3
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	1894      	adds	r4, r2, r2
 80038e2:	603c      	str	r4, [r7, #0]
 80038e4:	415b      	adcs	r3, r3
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ec:	1812      	adds	r2, r2, r0
 80038ee:	eb41 0303 	adc.w	r3, r1, r3
 80038f2:	f04f 0400 	mov.w	r4, #0
 80038f6:	f04f 0500 	mov.w	r5, #0
 80038fa:	00dd      	lsls	r5, r3, #3
 80038fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003900:	00d4      	lsls	r4, r2, #3
 8003902:	4622      	mov	r2, r4
 8003904:	462b      	mov	r3, r5
 8003906:	eb12 0a00 	adds.w	sl, r2, r0
 800390a:	eb43 0b01 	adc.w	fp, r3, r1
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	008b      	lsls	r3, r1, #2
 8003922:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003926:	0082      	lsls	r2, r0, #2
 8003928:	4650      	mov	r0, sl
 800392a:	4659      	mov	r1, fp
 800392c:	f7fc fc54 	bl	80001d8 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <UART_SetConfig+0x38c>)
 8003936:	fba3 1302 	umull	r1, r3, r3, r2
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2164      	movs	r1, #100	; 0x64
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	3332      	adds	r3, #50	; 0x32
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <UART_SetConfig+0x38c>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4432      	add	r2, r6
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	377c      	adds	r7, #124	; 0x7c
 8003960:	46bd      	mov	sp, r7
 8003962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003966:	bf00      	nop
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	51eb851f 	.word	0x51eb851f

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4d0d      	ldr	r5, [pc, #52]	; (80039ac <__libc_init_array+0x38>)
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	2600      	movs	r6, #0
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	4d0b      	ldr	r5, [pc, #44]	; (80039b4 <__libc_init_array+0x40>)
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <__libc_init_array+0x44>)
 8003988:	f000 f820 	bl	80039cc <_init>
 800398c:	1b64      	subs	r4, r4, r5
 800398e:	10a4      	asrs	r4, r4, #2
 8003990:	2600      	movs	r6, #0
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	f855 3b04 	ldr.w	r3, [r5], #4
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08003a28 	.word	0x08003a28
 80039b0:	08003a28 	.word	0x08003a28
 80039b4:	08003a28 	.word	0x08003a28
 80039b8:	08003a30 	.word	0x08003a30

080039bc <memset>:
 80039bc:	4402      	add	r2, r0
 80039be:	4603      	mov	r3, r0
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d100      	bne.n	80039c6 <memset+0xa>
 80039c4:	4770      	bx	lr
 80039c6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ca:	e7f9      	b.n	80039c0 <memset+0x4>

080039cc <_init>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr

080039d8 <_fini>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr
