
control lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd0  08002fd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fd8  08002fd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000000c  08002ff0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08002ff0  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3c6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8a  00000000  00000000  0002e402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00030ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017330  00000000  00000000  00031a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd8e  00000000  00000000  00048db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a903  00000000  00000000  00055b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f4  00000000  00000000  000e049c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f58 	.word	0x08002f58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002f58 	.word	0x08002f58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN13kalman_filterC1Ev>:
 *      Author: weera
 */

#include <kalmanfilter.h>

kalman_filter::kalman_filter() {
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b0ac      	sub	sp, #176	; 0xb0
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f8bc 	bl	8000658 <_ZN6matrixC1Ev>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	332c      	adds	r3, #44	; 0x2c
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f8b7 	bl	8000658 <_ZN6matrixC1Ev>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3358      	adds	r3, #88	; 0x58
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f8b2 	bl	8000658 <_ZN6matrixC1Ev>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3384      	adds	r3, #132	; 0x84
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f8ad 	bl	8000658 <_ZN6matrixC1Ev>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	33b0      	adds	r3, #176	; 0xb0
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f8a8 	bl	8000658 <_ZN6matrixC1Ev>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	33dc      	adds	r3, #220	; 0xdc
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f8a3 	bl	8000658 <_ZN6matrixC1Ev>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f89d 	bl	8000658 <_ZN6matrixC1Ev>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f897 	bl	8000658 <_ZN6matrixC1Ev>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f891 	bl	8000658 <_ZN6matrixC1Ev>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f88b 	bl	8000658 <_ZN6matrixC1Ev>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f885 	bl	8000658 <_ZN6matrixC1Ev>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f87f 	bl	8000658 <_ZN6matrixC1Ev>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f879 	bl	8000658 <_ZN6matrixC1Ev>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f873 	bl	8000658 <_ZN6matrixC1Ev>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f86d 	bl	8000658 <_ZN6matrixC1Ev>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f867 	bl	8000658 <_ZN6matrixC1Ev>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f861 	bl	8000658 <_ZN6matrixC1Ev>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f85b 	bl	8000658 <_ZN6matrixC1Ev>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f855 	bl	8000658 <_ZN6matrixC1Ev>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f84f 	bl	8000658 <_ZN6matrixC1Ev>
	matrix buf1(3, 1);
 80005ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005be:	2201      	movs	r2, #1
 80005c0:	2103      	movs	r1, #3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f878 	bl	80006b8 <_ZN6matrixC1Eii>
	predictX_old = buf1;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 80005ce:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	matrix buf2(3, 3);
 80005e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e6:	2203      	movs	r2, #3
 80005e8:	2103      	movs	r1, #3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f864 	bl	80006b8 <_ZN6matrixC1Eii>
	P_old = buf2;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f503 740f 	add.w	r4, r3, #572	; 0x23c
 80005f6:	f107 0558 	add.w	r5, r7, #88	; 0x58
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float buf_val[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <_ZN13kalman_filterC1Ev+0x184>)
 800060c:	f107 0408 	add.w	r4, r7, #8
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	682b      	ldr	r3, [r5, #0]
 800061c:	6023      	str	r3, [r4, #0]
	matrix buf3(3, 3, buf_val);
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000626:	2203      	movs	r2, #3
 8000628:	2103      	movs	r1, #3
 800062a:	f000 f879 	bl	8000720 <_ZN6matrixC1EiiPf>
	I33=buf3;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8000634:	f107 0584 	add.w	r5, r7, #132	; 0x84
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	37b0      	adds	r7, #176	; 0xb0
 800064e:	46bd      	mov	sp, r7
 8000650:	bdb0      	pop	{r4, r5, r7, pc}
 8000652:	bf00      	nop
 8000654:	08002f70 	.word	0x08002f70

08000658 <_ZN6matrixC1Ev>:
 *      Author: weera
 */

#include <matrix.h>

matrix::matrix() {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	d_x = 1;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
	d_y = 1;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2201      	movs	r2, #1
 800066a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 1; i++) {
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	dc19      	bgt.n	80006aa <_ZN6matrixC1Ev+0x52>
		for (int j = 0; j < 1; ++j) {
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	dc10      	bgt.n	80006a2 <_ZN6matrixC1Ev+0x4a>
			data[i][j] = 0.0;
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	4413      	add	r3, r2
 800068e:	3302      	adds	r3, #2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	440b      	add	r3, r1
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 1; ++j) {
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	3301      	adds	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	e7eb      	b.n	800067a <_ZN6matrixC1Ev+0x22>
	for (int i = 0; i < 1; i++) {
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e7e2      	b.n	8000670 <_ZN6matrixC1Ev+0x18>
		}

	};

}
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <_ZN6matrixC1Eii>:
matrix::matrix(int x, int y) {
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	d_x = x;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	601a      	str	r2, [r3, #0]
	d_y = y;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	429a      	cmp	r2, r3
 80006da:	da1a      	bge.n	8000712 <_ZN6matrixC1Eii+0x5a>
		for (int j = 0; j < y; ++j) {
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	da10      	bge.n	800070a <_ZN6matrixC1Eii+0x52>
			data[i][j] = 0.0;
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	697a      	ldr	r2, [r7, #20]
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	4413      	add	r3, r2
 80006f6:	3302      	adds	r3, #2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < y; ++j) {
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	3301      	adds	r3, #1
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	e7ea      	b.n	80006e0 <_ZN6matrixC1Eii+0x28>
	for (int i = 0; i < x; i++) {
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	e7e0      	b.n	80006d4 <_ZN6matrixC1Eii+0x1c>
		}

	};
	//cout << "con_xy";
}
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	371c      	adds	r7, #28
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <_ZN6matrixC1EiiPf>:
matrix::matrix(int x, int y, float *data_in) {
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
	d_x = x;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	601a      	str	r2, [r3, #0]
	d_y = y;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < x; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	da22      	bge.n	800078c <_ZN6matrixC1EiiPf+0x6c>
		for (int j = 0; j < y; ++j) {
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	429a      	cmp	r2, r3
 8000750:	da18      	bge.n	8000784 <_ZN6matrixC1EiiPf+0x64>
			data[i][j] = data_in[i * y + j];
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	fb02 f203 	mul.w	r2, r2, r3
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	4413      	add	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	6819      	ldr	r1, [r3, #0]
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4413      	add	r3, r2
 8000774:	3302      	adds	r3, #2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4403      	add	r3, r0
 800077a:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < y; ++j) {
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	3301      	adds	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	e7e2      	b.n	800074a <_ZN6matrixC1EiiPf+0x2a>
	for (int i = 0; i < x; i++) {
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	3301      	adds	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e7d8      	b.n	800073e <_ZN6matrixC1EiiPf+0x1e>
		}

	};
	//cout << "con_xy";
}
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4618      	mov	r0, r3
 8000790:	371c      	adds	r7, #28
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <_ZN6matrix4readEPf>:
	d_x = x;
}
void matrix::sety(int y) {
	d_y = y;
}
void matrix::read(float *data_in) {
 800079a:	b480      	push	{r7}
 800079c:	b085      	sub	sp, #20
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < d_x; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	da24      	bge.n	80007fc <_ZN6matrix4readEPf+0x62>
		for (int j = 0; j < d_y; ++j) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	429a      	cmp	r2, r3
 80007be:	da19      	bge.n	80007f4 <_ZN6matrix4readEPf+0x5a>
			data[i][j] = data_in[i * d_y + j];
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	fb02 f203 	mul.w	r2, r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	4413      	add	r3, r2
 80007e4:	3302      	adds	r3, #2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4403      	add	r3, r0
 80007ea:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < d_y; ++j) {
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	e7e0      	b.n	80007b6 <_ZN6matrix4readEPf+0x1c>
	for (int i = 0; i < d_x; i++) {
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e7d5      	b.n	80007a8 <_ZN6matrix4readEPf+0xe>
		}
	};
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <_ZN6matrix3detEv>:
			result.data[j][i] = data[i][j];
		}
	}
	return result;
}
float matrix::det() {
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	float det_val = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	if (d_x == 3 && d_y == 3) {
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d167      	bne.n	80008ee <_ZN6matrix3detEv+0xe6>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d163      	bne.n	80008ee <_ZN6matrix3detEv+0xe6>
		for (int i = 0; i < 3; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b02      	cmp	r3, #2
 800082e:	dc7f      	bgt.n	8000930 <_ZN6matrix3detEv+0x128>
			det_val = det_val
					+ (data[0][i]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	3302      	adds	r3, #2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	ed93 7a00 	vldr	s14, [r3]
							* (data[1][(i + 1) % 3] * data[2][(i + 2) % 3]
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1c59      	adds	r1, r3, #1
 8000842:	4b41      	ldr	r3, [pc, #260]	; (8000948 <_ZN6matrix3detEv+0x140>)
 8000844:	fb83 3201 	smull	r3, r2, r3, r1
 8000848:	17cb      	asrs	r3, r1, #31
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	4613      	mov	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	1aca      	subs	r2, r1, r3
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	1d53      	adds	r3, r2, #5
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	edd3 6a00 	vldr	s13, [r3]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c99      	adds	r1, r3, #2
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <_ZN6matrix3detEv+0x140>)
 8000866:	fb83 3201 	smull	r3, r2, r3, r1
 800086a:	17cb      	asrs	r3, r1, #31
 800086c:	1ad2      	subs	r2, r2, r3
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	1aca      	subs	r2, r1, r3
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f102 0308 	add.w	r3, r2, #8
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	440b      	add	r3, r1
 8000880:	edd3 7a00 	vldr	s15, [r3]
 8000884:	ee66 6aa7 	vmul.f32	s13, s13, s15
									- data[1][(i + 2) % 3]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1c99      	adds	r1, r3, #2
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <_ZN6matrix3detEv+0x140>)
 800088e:	fb83 3201 	smull	r3, r2, r3, r1
 8000892:	17cb      	asrs	r3, r1, #31
 8000894:	1ad2      	subs	r2, r2, r3
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	1aca      	subs	r2, r1, r3
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	1d53      	adds	r3, r2, #5
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	ed93 6a00 	vldr	s12, [r3]
											* data[2][(i + 1) % 3]));
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1c59      	adds	r1, r3, #1
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <_ZN6matrix3detEv+0x140>)
 80008b0:	fb83 3201 	smull	r3, r2, r3, r1
 80008b4:	17cb      	asrs	r3, r1, #31
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	1aca      	subs	r2, r1, r3
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	f102 0308 	add.w	r3, r2, #8
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	440b      	add	r3, r1
 80008ca:	edd3 7a00 	vldr	s15, [r3]
 80008ce:	ee66 7a27 	vmul.f32	s15, s12, s15
									- data[1][(i + 2) % 3]
 80008d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
							* (data[1][(i + 1) % 3] * data[2][(i + 2) % 3]
 80008d6:	ee67 7a27 	vmul.f32	s15, s14, s15
			det_val = det_val
 80008da:	ed97 7a03 	vldr	s14, [r7, #12]
 80008de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e2:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < 3; i++) {
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	e79d      	b.n	800082a <_ZN6matrix3detEv+0x22>
		}
	} else if (d_x == 2 && d_y == 2) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d118      	bne.n	8000928 <_ZN6matrix3detEv+0x120>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d114      	bne.n	8000928 <_ZN6matrix3detEv+0x120>
		det_val = (data[0][0] * data[1][1]) - (data[0][1] * data[1][0]);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	ed93 7a02 	vldr	s14, [r3, #8]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	edd3 7a06 	vldr	s15, [r3, #24]
 800090a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	edd3 6a03 	vldr	s13, [r3, #12]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	edd3 7a05 	vldr	s15, [r3, #20]
 800091a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800091e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000922:	edc7 7a03 	vstr	s15, [r7, #12]
 8000926:	e004      	b.n	8000932 <_ZN6matrix3detEv+0x12a>
	} else
		det_val = 1;
 8000928:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e000      	b.n	8000932 <_ZN6matrix3detEv+0x12a>
		}
 8000930:	bf00      	nop

	return det_val;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	ee07 3a90 	vmov	s15, r3

}
 8000938:	eeb0 0a67 	vmov.f32	s0, s15
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	55555556 	.word	0x55555556

0800094c <_ZN6matrix3invEv>:
		}
	}
	return result;

}
matrix matrix::inv() {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	float det = matrix::det();
 8000956:	6838      	ldr	r0, [r7, #0]
 8000958:	f7ff ff56 	bl	8000808 <_ZN6matrix3detEv>
 800095c:	ed87 0a03 	vstr	s0, [r7, #12]
	matrix result(3, 3);
 8000960:	2203      	movs	r2, #3
 8000962:	2103      	movs	r1, #3
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fea7 	bl	80006b8 <_ZN6matrixC1Eii>
	if (d_x == 3 && d_y == 3) {
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b03      	cmp	r3, #3
 8000970:	f040 80af 	bne.w	8000ad2 <_ZN6matrix3invEv+0x186>
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b03      	cmp	r3, #3
 800097a:	f040 80aa 	bne.w	8000ad2 <_ZN6matrix3invEv+0x186>
		for (int i = 0; i < 3; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2b02      	cmp	r3, #2
 8000986:	f300 80a4 	bgt.w	8000ad2 <_ZN6matrix3invEv+0x186>
			for (int j = 0; j < 3; j++) {
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	2b02      	cmp	r3, #2
 8000992:	f300 809a 	bgt.w	8000aca <_ZN6matrix3invEv+0x17e>
				result.data[j][i] = ((data[(i + 1) % 3][(j + 1) % 3]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	1c59      	adds	r1, r3, #1
 800099a:	4b50      	ldr	r3, [pc, #320]	; (8000adc <_ZN6matrix3invEv+0x190>)
 800099c:	fb83 3201 	smull	r3, r2, r3, r1
 80009a0:	17cb      	asrs	r3, r1, #31
 80009a2:	1ad2      	subs	r2, r2, r3
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	1aca      	subs	r2, r1, r3
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	1c58      	adds	r0, r3, #1
 80009b0:	4b4a      	ldr	r3, [pc, #296]	; (8000adc <_ZN6matrix3invEv+0x190>)
 80009b2:	fb83 3100 	smull	r3, r1, r3, r0
 80009b6:	17c3      	asrs	r3, r0, #31
 80009b8:	1ac9      	subs	r1, r1, r3
 80009ba:	460b      	mov	r3, r1
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	440b      	add	r3, r1
 80009c0:	1ac1      	subs	r1, r0, r3
 80009c2:	6838      	ldr	r0, [r7, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	3302      	adds	r3, #2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4403      	add	r3, r0
 80009d2:	ed93 7a00 	vldr	s14, [r3]
						* data[(i + 2) % 3][(j + 2) % 3])
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	1c99      	adds	r1, r3, #2
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <_ZN6matrix3invEv+0x190>)
 80009dc:	fb83 3201 	smull	r3, r2, r3, r1
 80009e0:	17cb      	asrs	r3, r1, #31
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	1aca      	subs	r2, r1, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	1c98      	adds	r0, r3, #2
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <_ZN6matrix3invEv+0x190>)
 80009f2:	fb83 3100 	smull	r3, r1, r3, r0
 80009f6:	17c3      	asrs	r3, r0, #31
 80009f8:	1ac9      	subs	r1, r1, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	440b      	add	r3, r1
 8000a00:	1ac1      	subs	r1, r0, r3
 8000a02:	6838      	ldr	r0, [r7, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4403      	add	r3, r0
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	ee27 7a27 	vmul.f32	s14, s14, s15
						- (data[(i + 1) % 3][(j + 2) % 3]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	1c59      	adds	r1, r3, #1
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <_ZN6matrix3invEv+0x190>)
 8000a20:	fb83 3201 	smull	r3, r2, r3, r1
 8000a24:	17cb      	asrs	r3, r1, #31
 8000a26:	1ad2      	subs	r2, r2, r3
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	1aca      	subs	r2, r1, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	1c98      	adds	r0, r3, #2
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <_ZN6matrix3invEv+0x190>)
 8000a36:	fb83 3100 	smull	r3, r1, r3, r0
 8000a3a:	17c3      	asrs	r3, r0, #31
 8000a3c:	1ac9      	subs	r1, r1, r3
 8000a3e:	460b      	mov	r3, r1
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	440b      	add	r3, r1
 8000a44:	1ac1      	subs	r1, r0, r3
 8000a46:	6838      	ldr	r0, [r7, #0]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	3302      	adds	r3, #2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4403      	add	r3, r0
 8000a56:	edd3 6a00 	vldr	s13, [r3]
								* data[(i + 2) % 3][(j + 1) % 3])) / det;
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	1c99      	adds	r1, r3, #2
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <_ZN6matrix3invEv+0x190>)
 8000a60:	fb83 3201 	smull	r3, r2, r3, r1
 8000a64:	17cb      	asrs	r3, r1, #31
 8000a66:	1ad2      	subs	r2, r2, r3
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	1aca      	subs	r2, r1, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	1c58      	adds	r0, r3, #1
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <_ZN6matrix3invEv+0x190>)
 8000a76:	fb83 3100 	smull	r3, r1, r3, r0
 8000a7a:	17c3      	asrs	r3, r0, #31
 8000a7c:	1ac9      	subs	r1, r1, r3
 8000a7e:	460b      	mov	r3, r1
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	440b      	add	r3, r1
 8000a84:	1ac1      	subs	r1, r0, r3
 8000a86:	6838      	ldr	r0, [r7, #0]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	3302      	adds	r3, #2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4403      	add	r3, r0
 8000a96:	edd3 7a00 	vldr	s15, [r3]
 8000a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
						- (data[(i + 1) % 3][(j + 2) % 3]
 8000a9e:	ee77 6a67 	vsub.f32	s13, s14, s15
								* data[(i + 2) % 3][(j + 1) % 3])) / det;
 8000aa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
				result.data[j][i] = ((data[(i + 1) % 3][(j + 1) % 3]
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	3302      	adds	r3, #2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	440b      	add	r3, r1
 8000abe:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 0; j < 3; j++) {
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	e761      	b.n	800098e <_ZN6matrix3invEv+0x42>
		for (int i = 0; i < 3; i++) {
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e757      	b.n	8000982 <_ZN6matrix3invEv+0x36>
			}
		}
	}
	return result;
 8000ad2:	bf00      	nop
}
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	55555556 	.word	0x55555556

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b09a      	sub	sp, #104	; 0x68
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float data[9]={1,2,3,4,5,6,1,0,1};
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <main+0x8c>)
 8000ae8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000aec:	461d      	mov	r5, r3
 8000aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af6:	682b      	ldr	r3, [r5, #0]
 8000af8:	6023      	str	r3, [r4, #0]

	float data2[4]={3,4};
 8000afa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <main+0x90>)
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b0c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
	test1.read(data);
 8000b12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b16:	4619      	mov	r1, r3
 8000b18:	4816      	ldr	r0, [pc, #88]	; (8000b74 <main+0x94>)
 8000b1a:	f7ff fe3e 	bl	800079a <_ZN6matrix4readEPf>
	test2.read(data2);
 8000b1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b22:	4619      	mov	r1, r3
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <main+0x98>)
 8000b26:	f7ff fe38 	bl	800079a <_ZN6matrix4readEPf>

	test3=test1.inv();
 8000b2a:	4c14      	ldr	r4, [pc, #80]	; (8000b7c <main+0x9c>)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4911      	ldr	r1, [pc, #68]	; (8000b74 <main+0x94>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff0b 	bl	800094c <_ZN6matrix3invEv>
 8000b36:	4625      	mov	r5, r4
 8000b38:	463c      	mov	r4, r7
 8000b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b42:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f000 fb77 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 f817 	bl	8000b80 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f000 f973 	bl	8000e3c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000b56:	f000 f943 	bl	8000de0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8000b5a:	f000 f883 	bl	8000c64 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000b5e:	f000 f8e3 	bl	8000d28 <_ZL12MX_TIM2_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b66:	f000 fbdb 	bl	8001320 <HAL_Delay>
 8000b6a:	e7fa      	b.n	8000b62 <main+0x82>
 8000b6c:	08002f94 	.word	0x08002f94
 8000b70:	40400000 	.word	0x40400000
 8000b74:	200000fc 	.word	0x200000fc
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	20000154 	.word	0x20000154

08000b80 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 f9da 	bl	8002f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <_Z18SystemClock_Configv+0xdc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <_Z18SystemClock_Configv+0xdc>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <_Z18SystemClock_Configv+0xdc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <_Z18SystemClock_Configv+0xe0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <_Z18SystemClock_Configv+0xe0>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <_Z18SystemClock_Configv+0xe0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fe5f 	bl	80018c8 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2301      	movne	r3, #1
 8000c12:	2300      	moveq	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000c1a:	f000 f989 	bl	8000f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c22:	2302      	movs	r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2103      	movs	r1, #3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f8bc 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000c50:	f000 f96e 	bl	8000f30 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	; 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2224      	movs	r2, #36	; 0x24
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 f968 	bl	8002f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c82:	4a28      	ldr	r2, [pc, #160]	; (8000d24 <_ZL12MX_TIM1_Initv+0xc0>)
 8000c84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 767;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c94:	f240 22ff 	movw	r2, #767	; 0x2ff
 8000c98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cd8:	f001 fab9 	bl	800224e <HAL_TIM_Encoder_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8000cec:	f000 f920 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cfe:	f001 fe67 	bl	80029d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf14      	ite	ne
 8000d08:	2301      	movne	r3, #1
 8000d0a:	2300      	moveq	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8000d12:	f000 f90d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000028 	.word	0x20000028
 8000d24:	40010000 	.word	0x40010000

08000d28 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d4e:	2263      	movs	r2, #99	; 0x63
 8000d50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d6e:	f001 fa1f 	bl	80021b0 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf14      	ite	ne
 8000d78:	2301      	movne	r3, #1
 8000d7a:	2300      	moveq	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000d82:	f000 f8d5 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000d94:	f001 fc09 	bl	80025aa <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000da8:	f000 f8c2 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <_ZL12MX_TIM2_Initv+0xb4>)
 8000dba:	f001 fe09 	bl	80029d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf14      	ite	ne
 8000dc4:	2301      	movne	r3, #1
 8000dc6:	2300      	moveq	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000dce:	f000 f8af 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000070 	.word	0x20000070

08000de0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e18:	f001 fe5c 	bl	8002ad4 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000e2c:	f000 f880 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000b8 	.word	0x200000b8
 8000e38:	40004400 	.word	0x40004400

08000e3c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <_ZL12MX_GPIO_Initv+0xe8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <_ZL12MX_GPIO_Initv+0xec>)
 8000ec8:	f000 fce4 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <_ZL12MX_GPIO_Initv+0xf0>)
 8000ee4:	f000 fb52 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <_ZL12MX_GPIO_Initv+0xec>)
 8000efc:	f000 fb46 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f00:	2320      	movs	r3, #32
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <_ZL12MX_GPIO_Initv+0xec>)
 8000f18:	f000 fb38 	bl	800158c <HAL_GPIO_Init>

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020800 	.word	0x40020800

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d114      	bne.n	8000f76 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10f      	bne.n	8000f76 <_Z41__static_initialization_and_destruction_0ii+0x3a>
matrix test1(3,3);
 8000f56:	2203      	movs	r2, #3
 8000f58:	2103      	movs	r1, #3
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000f5c:	f7ff fbac 	bl	80006b8 <_ZN6matrixC1Eii>
matrix test2(2,1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2102      	movs	r1, #2
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000f66:	f7ff fba7 	bl	80006b8 <_ZN6matrixC1Eii>
matrix test3;
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000f6c:	f7ff fb74 	bl	8000658 <_ZN6matrixC1Ev>
kalman_filter Kla;
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000f72:	f7ff faad 	bl	80004d0 <_ZN13kalman_filterC1Ev>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000fc 	.word	0x200000fc
 8000f84:	20000128 	.word	0x20000128
 8000f88:	20000154 	.word	0x20000154
 8000f8c:	20000180 	.word	0x20000180

08000f90 <_GLOBAL__sub_I_htim1>:
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff ffcf 	bl	8000f3c <_Z41__static_initialization_and_destruction_0ii>
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f000 fa92 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_TIM_Encoder_MspInit+0x84>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12c      	bne.n	800106c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_TIM_Encoder_MspInit+0x88>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_TIM_Encoder_MspInit+0x88>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_TIM_Encoder_MspInit+0x88>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_TIM_Encoder_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_TIM_Encoder_MspInit+0x88>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_TIM_Encoder_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800104a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800105c:	2301      	movs	r3, #1
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001068:	f000 fa90 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40010000 	.word	0x40010000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001090:	d115      	bne.n	80010be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_TIM_Base_MspInit+0x48>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_TIM_Base_MspInit+0x48>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_TIM_Base_MspInit+0x48>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201c      	movs	r0, #28
 80010b4:	f000 fa33 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b8:	201c      	movs	r0, #28
 80010ba:	f000 fa4c 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_UART_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_UART_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_UART_MspInit+0x88>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_UART_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_UART_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_UART_MspInit+0x88>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_UART_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001126:	230c      	movs	r3, #12
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001136:	2307      	movs	r3, #7
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_UART_MspInit+0x8c>)
 8001142:	f000 fa23 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40004400 	.word	0x40004400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler+0x4>

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f89a 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM2_IRQHandler+0x10>)
 80011b6:	f001 f8f0 	bl	800239a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000070 	.word	0x20000070

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001204:	4c0b      	ldr	r4, [pc, #44]	; (8001234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001212:	f7ff ffd7 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f001 fe73 	bl	8002f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff fc61 	bl	8000ae0 <main>
  bx  lr    
 800121e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800122c:	08002fe4 	.word	0x08002fe4
  ldr r2, =_sbss
 8001230:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001234:	200004f4 	.word	0x200004f4

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_Init+0x40>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_Init+0x40>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x40>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f94f 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fe96 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f967 	bl	8001572 <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f92f 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008
 8001304:	200004f0 	.word	0x200004f0

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200004f0 	.word	0x200004f0

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	; (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e159      	b.n	800185c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8148 	bne.w	8001856 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a2 	beq.w	8001856 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b57      	ldr	r3, [pc, #348]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b54      	ldr	r3, [pc, #336]	; (8001874 <HAL_GPIO_Init+0x2e8>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_GPIO_Init+0x2ec>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a49      	ldr	r2, [pc, #292]	; (800187c <HAL_GPIO_Init+0x2f0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x202>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_GPIO_Init+0x2f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x1fe>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a47      	ldr	r2, [pc, #284]	; (8001884 <HAL_GPIO_Init+0x2f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x1fa>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_GPIO_Init+0x2fc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x1f6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_GPIO_Init+0x300>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x1f2>
 800177a:	2304      	movs	r3, #4
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800177e:	2307      	movs	r3, #7
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x204>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x204>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x2ec>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fc:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_GPIO_Init+0x304>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001826:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x304>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x304>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f aea2 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e264      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d075      	beq.n	80019d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018e6:	4ba3      	ldr	r3, [pc, #652]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d00c      	beq.n	800190c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fe:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190a:	d10b      	bne.n	8001924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4b99      	ldr	r3, [pc, #612]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d05b      	beq.n	80019d0 <HAL_RCC_OscConfig+0x108>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d157      	bne.n	80019d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e23f      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x74>
 800192e:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a90      	ldr	r2, [pc, #576]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01d      	b.n	8001978 <HAL_RCC_OscConfig+0xb0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x98>
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a8a      	ldr	r2, [pc, #552]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a87      	ldr	r2, [pc, #540]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0xb0>
 8001960:	4b84      	ldr	r3, [pc, #528]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a83      	ldr	r2, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a80      	ldr	r2, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fcc2 	bl	8001308 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fcbe 	bl	8001308 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e204      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xc0>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fcae 	bl	8001308 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fcaa 	bl	8001308 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1f0      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0xe8>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d063      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d11c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d116      	bne.n	8001a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x152>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1c4      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4952      	ldr	r1, [pc, #328]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	e03a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a38:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <HAL_RCC_OscConfig+0x2b0>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fc63 	bl	8001308 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff fc5f 	bl	8001308 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1a5      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4940      	ldr	r1, [pc, #256]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
 8001a78:	e015      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_OscConfig+0x2b0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff fc42 	bl	8001308 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff fc3e 	bl	8001308 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e184      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d030      	beq.n	8001b14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d016      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fc22 	bl	8001308 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fc1e 	bl	8001308 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e164      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x200>
 8001ae6:	e015      	b.n	8001b14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fc0b 	bl	8001308 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff fc07 	bl	8001308 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e14d      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a0 	beq.w	8001c62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d121      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fbcd 	bl	8001308 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e011      	b.n	8001b96 <HAL_RCC_OscConfig+0x2ce>
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470000 	.word	0x42470000
 8001b7c:	42470e80 	.word	0x42470e80
 8001b80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff fbc0 	bl	8001308 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e106      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b85      	ldr	r3, [pc, #532]	; (8001dac <HAL_RCC_OscConfig+0x4e4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
 8001baa:	4b81      	ldr	r3, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a80      	ldr	r2, [pc, #512]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x32a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x312>
 8001bc0:	4b7b      	ldr	r3, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a7a      	ldr	r2, [pc, #488]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x32a>
 8001bda:	4b75      	ldr	r3, [pc, #468]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a74      	ldr	r2, [pc, #464]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	4b72      	ldr	r3, [pc, #456]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	4a71      	ldr	r2, [pc, #452]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fb85 	bl	8001308 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff fb81 	bl	8001308 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0c5      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x33a>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fb6f 	bl	8001308 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fb6b 	bl	8001308 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0af      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 809b 	beq.w	8001da2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d05c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d141      	bne.n	8001d04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_RCC_OscConfig+0x4ec>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fb3f 	bl	8001308 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff fb3b 	bl	8001308 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e081      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69da      	ldr	r2, [r3, #28]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_RCC_OscConfig+0x4ec>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fb14 	bl	8001308 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fb10 	bl	8001308 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e056      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
 8001d02:	e04e      	b.n	8001da2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x4ec>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fafd 	bl	8001308 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff faf9 	bl	8001308 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e03f      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x44a>
 8001d30:	e037      	b.n	8001da2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e032      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_RCC_OscConfig+0x4e8>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d028      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d121      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d11a      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d111      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40007000 	.word	0x40007000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470060 	.word	0x42470060

08001db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0cc      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d90c      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b8      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	494d      	ldr	r1, [pc, #308]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d044      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e07f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e067      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4934      	ldr	r1, [pc, #208]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fa2e 	bl	8001308 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff fa2a 	bl	8001308 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d20c      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e032      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4916      	ldr	r1, [pc, #88]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3e:	f000 f821 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	490a      	ldr	r1, [pc, #40]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	5ccb      	ldrb	r3, [r1, r3]
 8001f52:	fa22 f303 	lsr.w	r3, r2, r3
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f98e 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08002fb8 	.word	0x08002fb8
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	2300      	movs	r3, #0
 8001f96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f9c:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	f200 80bd 	bhi.w	8002128 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001fb6:	e0b7      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fba:	60bb      	str	r3, [r7, #8]
       break;
 8001fbc:	e0b7      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fbe:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fc0:	60bb      	str	r3, [r7, #8]
      break;
 8001fc2:	e0b4      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc4:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d04d      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fda:	4b58      	ldr	r3, [pc, #352]	; (800213c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	099b      	lsrs	r3, r3, #6
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	ea02 0800 	and.w	r8, r2, r0
 8001ff2:	ea03 0901 	and.w	r9, r3, r1
 8001ff6:	4640      	mov	r0, r8
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	014b      	lsls	r3, r1, #5
 8002004:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002008:	0142      	lsls	r2, r0, #5
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	ebb0 0008 	subs.w	r0, r0, r8
 8002012:	eb61 0109 	sbc.w	r1, r1, r9
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	018b      	lsls	r3, r1, #6
 8002020:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002024:	0182      	lsls	r2, r0, #6
 8002026:	1a12      	subs	r2, r2, r0
 8002028:	eb63 0301 	sbc.w	r3, r3, r1
 800202c:	f04f 0000 	mov.w	r0, #0
 8002030:	f04f 0100 	mov.w	r1, #0
 8002034:	00d9      	lsls	r1, r3, #3
 8002036:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800203a:	00d0      	lsls	r0, r2, #3
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	eb12 0208 	adds.w	r2, r2, r8
 8002044:	eb43 0309 	adc.w	r3, r3, r9
 8002048:	f04f 0000 	mov.w	r0, #0
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	0259      	lsls	r1, r3, #9
 8002052:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002056:	0250      	lsls	r0, r2, #9
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	461a      	mov	r2, r3
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	f7fe f8b6 	bl	80001d8 <__aeabi_uldivmod>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4613      	mov	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e04a      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002076:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	099b      	lsrs	r3, r3, #6
 800207c:	461a      	mov	r2, r3
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	ea02 0400 	and.w	r4, r2, r0
 800208e:	ea03 0501 	and.w	r5, r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	014b      	lsls	r3, r1, #5
 80020a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020a4:	0142      	lsls	r2, r0, #5
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	1b00      	subs	r0, r0, r4
 80020ac:	eb61 0105 	sbc.w	r1, r1, r5
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	018b      	lsls	r3, r1, #6
 80020ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020be:	0182      	lsls	r2, r0, #6
 80020c0:	1a12      	subs	r2, r2, r0
 80020c2:	eb63 0301 	sbc.w	r3, r3, r1
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	00d9      	lsls	r1, r3, #3
 80020d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020d4:	00d0      	lsls	r0, r2, #3
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	1912      	adds	r2, r2, r4
 80020dc:	eb45 0303 	adc.w	r3, r5, r3
 80020e0:	f04f 0000 	mov.w	r0, #0
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	0299      	lsls	r1, r3, #10
 80020ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020ee:	0290      	lsls	r0, r2, #10
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	f7fe f86a 	bl	80001d8 <__aeabi_uldivmod>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4613      	mov	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	60bb      	str	r3, [r7, #8]
      break;
 8002126:	e002      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800212a:	60bb      	str	r3, [r7, #8]
      break;
 800212c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212e:	68bb      	ldr	r3, [r7, #8]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_GetHCLKFreq+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002164:	f7ff fff0 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0a9b      	lsrs	r3, r3, #10
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4903      	ldr	r1, [pc, #12]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800
 8002184:	08002fc8 	.word	0x08002fc8

08002188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800218c:	f7ff ffdc 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	0b5b      	lsrs	r3, r3, #13
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	4903      	ldr	r1, [pc, #12]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40023800 	.word	0x40023800
 80021ac:	08002fc8 	.word	0x08002fc8

080021b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e041      	b.n	8002246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe ff52 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 fad4 	bl	800279c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e097      	b.n	8002392 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe feba 	bl	8000ff0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002292:	f023 0307 	bic.w	r3, r3, #7
 8002296:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 fa7a 	bl	800279c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d0:	f023 0303 	bic.w	r3, r3, #3
 80022d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	4313      	orrs	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022ee:	f023 030c 	bic.w	r3, r3, #12
 80022f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4313      	orrs	r3, r2
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	011a      	lsls	r2, r3, #4
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	031b      	lsls	r3, r3, #12
 800231e:	4313      	orrs	r3, r2
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800232c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002334:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4313      	orrs	r3, r2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d122      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d11b      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f06f 0202 	mvn.w	r2, #2
 80023c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f9bf 	bl	8002760 <HAL_TIM_IC_CaptureCallback>
 80023e2:	e005      	b.n	80023f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f9b1 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f9c2 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b04      	cmp	r3, #4
 8002402:	d122      	bne.n	800244a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b04      	cmp	r3, #4
 8002410:	d11b      	bne.n	800244a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0204 	mvn.w	r2, #4
 800241a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f995 	bl	8002760 <HAL_TIM_IC_CaptureCallback>
 8002436:	e005      	b.n	8002444 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f987 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f998 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b08      	cmp	r3, #8
 8002456:	d122      	bne.n	800249e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11b      	bne.n	800249e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0208 	mvn.w	r2, #8
 800246e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2204      	movs	r2, #4
 8002474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f96b 	bl	8002760 <HAL_TIM_IC_CaptureCallback>
 800248a:	e005      	b.n	8002498 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f95d 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f96e 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d122      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d11b      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0210 	mvn.w	r2, #16
 80024c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2208      	movs	r2, #8
 80024c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f941 	bl	8002760 <HAL_TIM_IC_CaptureCallback>
 80024de:	e005      	b.n	80024ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f933 	bl	800274c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f944 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10e      	bne.n	800251e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0201 	mvn.w	r2, #1
 8002516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f90d 	bl	8002738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d10e      	bne.n	800254a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b80      	cmp	r3, #128	; 0x80
 8002538:	d107      	bne.n	800254a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fabb 	bl	8002ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d10e      	bne.n	8002576 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b40      	cmp	r3, #64	; 0x40
 8002564:	d107      	bne.n	8002576 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800256e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f909 	bl	8002788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b20      	cmp	r3, #32
 8002582:	d10e      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b20      	cmp	r3, #32
 8002590:	d107      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f06f 0220 	mvn.w	r2, #32
 800259a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa85 	bl	8002aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_ConfigClockSource+0x1c>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0b4      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x186>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fe:	d03e      	beq.n	800267e <HAL_TIM_ConfigClockSource+0xd4>
 8002600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002604:	f200 8087 	bhi.w	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260c:	f000 8086 	beq.w	800271c <HAL_TIM_ConfigClockSource+0x172>
 8002610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002614:	d87f      	bhi.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 8002616:	2b70      	cmp	r3, #112	; 0x70
 8002618:	d01a      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0xa6>
 800261a:	2b70      	cmp	r3, #112	; 0x70
 800261c:	d87b      	bhi.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 800261e:	2b60      	cmp	r3, #96	; 0x60
 8002620:	d050      	beq.n	80026c4 <HAL_TIM_ConfigClockSource+0x11a>
 8002622:	2b60      	cmp	r3, #96	; 0x60
 8002624:	d877      	bhi.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 8002626:	2b50      	cmp	r3, #80	; 0x50
 8002628:	d03c      	beq.n	80026a4 <HAL_TIM_ConfigClockSource+0xfa>
 800262a:	2b50      	cmp	r3, #80	; 0x50
 800262c:	d873      	bhi.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	d058      	beq.n	80026e4 <HAL_TIM_ConfigClockSource+0x13a>
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d86f      	bhi.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 8002636:	2b30      	cmp	r3, #48	; 0x30
 8002638:	d064      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x15a>
 800263a:	2b30      	cmp	r3, #48	; 0x30
 800263c:	d86b      	bhi.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 800263e:	2b20      	cmp	r3, #32
 8002640:	d060      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x15a>
 8002642:	2b20      	cmp	r3, #32
 8002644:	d867      	bhi.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d05c      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x15a>
 800264a:	2b10      	cmp	r3, #16
 800264c:	d05a      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x15a>
 800264e:	e062      	b.n	8002716 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f000 f996 	bl	8002990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002672:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	609a      	str	r2, [r3, #8]
      break;
 800267c:	e04f      	b.n	800271e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f000 f97f 	bl	8002990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a0:	609a      	str	r2, [r3, #8]
      break;
 80026a2:	e03c      	b.n	800271e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f000 f8f3 	bl	800289c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2150      	movs	r1, #80	; 0x50
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f94c 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 80026c2:	e02c      	b.n	800271e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f000 f912 	bl	80028fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2160      	movs	r1, #96	; 0x60
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f93c 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 80026e2:	e01c      	b.n	800271e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f000 f8d3 	bl	800289c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f92c 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 8002702:	e00c      	b.n	800271e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 f923 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 8002714:	e003      	b.n	800271e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      break;
 800271a:	e000      	b.n	800271e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800271c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a34      	ldr	r2, [pc, #208]	; (8002880 <TIM_Base_SetConfig+0xe4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00f      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d00b      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a31      	ldr	r2, [pc, #196]	; (8002884 <TIM_Base_SetConfig+0xe8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <TIM_Base_SetConfig+0xec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <TIM_Base_SetConfig+0xf0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a25      	ldr	r2, [pc, #148]	; (8002880 <TIM_Base_SetConfig+0xe4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01b      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d017      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <TIM_Base_SetConfig+0xe8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a21      	ldr	r2, [pc, #132]	; (8002888 <TIM_Base_SetConfig+0xec>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00f      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a20      	ldr	r2, [pc, #128]	; (800288c <TIM_Base_SetConfig+0xf0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <TIM_Base_SetConfig+0xf4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <TIM_Base_SetConfig+0xf8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <TIM_Base_SetConfig+0xfc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <TIM_Base_SetConfig+0xe4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d103      	bne.n	800286c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	615a      	str	r2, [r3, #20]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40014000 	.word	0x40014000
 8002894:	40014400 	.word	0x40014400
 8002898:	40014800 	.word	0x40014800

0800289c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	f023 0201 	bic.w	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f023 030a 	bic.w	r3, r3, #10
 80028d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b087      	sub	sp, #28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0210 	bic.w	r2, r3, #16
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	031b      	lsls	r3, r3, #12
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	f043 0307 	orr.w	r3, r3, #7
 800297c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	021a      	lsls	r2, r3, #8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e050      	b.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d013      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10c      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40014000 	.word	0x40014000

08002aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e03f      	b.n	8002b66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe fae6 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f829 	bl	8002b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b74:	b09f      	sub	sp, #124	; 0x7c
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b86:	68d9      	ldr	r1, [r3, #12]
 8002b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	ea40 0301 	orr.w	r3, r0, r1
 8002b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bb4:	f021 010c 	bic.w	r1, r1, #12
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	6999      	ldr	r1, [r3, #24]
 8002bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	ea40 0301 	orr.w	r3, r0, r1
 8002bd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4bc5      	ldr	r3, [pc, #788]	; (8002ef4 <UART_SetConfig+0x384>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d004      	beq.n	8002bee <UART_SetConfig+0x7e>
 8002be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4bc3      	ldr	r3, [pc, #780]	; (8002ef8 <UART_SetConfig+0x388>)
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d103      	bne.n	8002bf6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bee:	f7ff facb 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8002bf2:	6778      	str	r0, [r7, #116]	; 0x74
 8002bf4:	e002      	b.n	8002bfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bf6:	f7ff fab3 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002bfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c04:	f040 80b6 	bne.w	8002d74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0a:	461c      	mov	r4, r3
 8002c0c:	f04f 0500 	mov.w	r5, #0
 8002c10:	4622      	mov	r2, r4
 8002c12:	462b      	mov	r3, r5
 8002c14:	1891      	adds	r1, r2, r2
 8002c16:	6439      	str	r1, [r7, #64]	; 0x40
 8002c18:	415b      	adcs	r3, r3
 8002c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c20:	1912      	adds	r2, r2, r4
 8002c22:	eb45 0303 	adc.w	r3, r5, r3
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	00d9      	lsls	r1, r3, #3
 8002c30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c34:	00d0      	lsls	r0, r2, #3
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	1911      	adds	r1, r2, r4
 8002c3c:	6639      	str	r1, [r7, #96]	; 0x60
 8002c3e:	416b      	adcs	r3, r5
 8002c40:	667b      	str	r3, [r7, #100]	; 0x64
 8002c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	1891      	adds	r1, r2, r2
 8002c4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c50:	415b      	adcs	r3, r3
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c5c:	f7fd fabc 	bl	80001d8 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4ba5      	ldr	r3, [pc, #660]	; (8002efc <UART_SetConfig+0x38c>)
 8002c66:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	011e      	lsls	r6, r3, #4
 8002c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c70:	461c      	mov	r4, r3
 8002c72:	f04f 0500 	mov.w	r5, #0
 8002c76:	4622      	mov	r2, r4
 8002c78:	462b      	mov	r3, r5
 8002c7a:	1891      	adds	r1, r2, r2
 8002c7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c7e:	415b      	adcs	r3, r3
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
 8002c82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c86:	1912      	adds	r2, r2, r4
 8002c88:	eb45 0303 	adc.w	r3, r5, r3
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	00d9      	lsls	r1, r3, #3
 8002c96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c9a:	00d0      	lsls	r0, r2, #3
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	1911      	adds	r1, r2, r4
 8002ca2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ca4:	416b      	adcs	r3, r5
 8002ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	1891      	adds	r1, r2, r2
 8002cb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cb6:	415b      	adcs	r3, r3
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cc2:	f7fd fa89 	bl	80001d8 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4b8c      	ldr	r3, [pc, #560]	; (8002efc <UART_SetConfig+0x38c>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3332      	adds	r3, #50	; 0x32
 8002cde:	4a87      	ldr	r2, [pc, #540]	; (8002efc <UART_SetConfig+0x38c>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cec:	441e      	add	r6, r3
 8002cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	1894      	adds	r4, r2, r2
 8002cfc:	623c      	str	r4, [r7, #32]
 8002cfe:	415b      	adcs	r3, r3
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
 8002d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d06:	1812      	adds	r2, r2, r0
 8002d08:	eb41 0303 	adc.w	r3, r1, r3
 8002d0c:	f04f 0400 	mov.w	r4, #0
 8002d10:	f04f 0500 	mov.w	r5, #0
 8002d14:	00dd      	lsls	r5, r3, #3
 8002d16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d1a:	00d4      	lsls	r4, r2, #3
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	462b      	mov	r3, r5
 8002d20:	1814      	adds	r4, r2, r0
 8002d22:	653c      	str	r4, [r7, #80]	; 0x50
 8002d24:	414b      	adcs	r3, r1
 8002d26:	657b      	str	r3, [r7, #84]	; 0x54
 8002d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	1891      	adds	r1, r2, r2
 8002d34:	61b9      	str	r1, [r7, #24]
 8002d36:	415b      	adcs	r3, r3
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d42:	f7fd fa49 	bl	80001d8 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <UART_SetConfig+0x38c>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2164      	movs	r1, #100	; 0x64
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	3332      	adds	r3, #50	; 0x32
 8002d5e:	4a67      	ldr	r2, [pc, #412]	; (8002efc <UART_SetConfig+0x38c>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4432      	add	r2, r6
 8002d70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d72:	e0b9      	b.n	8002ee8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d76:	461c      	mov	r4, r3
 8002d78:	f04f 0500 	mov.w	r5, #0
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	462b      	mov	r3, r5
 8002d80:	1891      	adds	r1, r2, r2
 8002d82:	6139      	str	r1, [r7, #16]
 8002d84:	415b      	adcs	r3, r3
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d8c:	1912      	adds	r2, r2, r4
 8002d8e:	eb45 0303 	adc.w	r3, r5, r3
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	00d9      	lsls	r1, r3, #3
 8002d9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002da0:	00d0      	lsls	r0, r2, #3
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	eb12 0804 	adds.w	r8, r2, r4
 8002daa:	eb43 0905 	adc.w	r9, r3, r5
 8002dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f04f 0100 	mov.w	r1, #0
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	008b      	lsls	r3, r1, #2
 8002dc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002dc6:	0082      	lsls	r2, r0, #2
 8002dc8:	4640      	mov	r0, r8
 8002dca:	4649      	mov	r1, r9
 8002dcc:	f7fd fa04 	bl	80001d8 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4b49      	ldr	r3, [pc, #292]	; (8002efc <UART_SetConfig+0x38c>)
 8002dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	011e      	lsls	r6, r3, #4
 8002dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de0:	4618      	mov	r0, r3
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	1894      	adds	r4, r2, r2
 8002dec:	60bc      	str	r4, [r7, #8]
 8002dee:	415b      	adcs	r3, r3
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df6:	1812      	adds	r2, r2, r0
 8002df8:	eb41 0303 	adc.w	r3, r1, r3
 8002dfc:	f04f 0400 	mov.w	r4, #0
 8002e00:	f04f 0500 	mov.w	r5, #0
 8002e04:	00dd      	lsls	r5, r3, #3
 8002e06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e0a:	00d4      	lsls	r4, r2, #3
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	462b      	mov	r3, r5
 8002e10:	1814      	adds	r4, r2, r0
 8002e12:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e14:	414b      	adcs	r3, r1
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	008b      	lsls	r3, r1, #2
 8002e2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e30:	0082      	lsls	r2, r0, #2
 8002e32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e36:	f7fd f9cf 	bl	80001d8 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <UART_SetConfig+0x38c>)
 8002e40:	fba3 1302 	umull	r1, r3, r3, r2
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	2164      	movs	r1, #100	; 0x64
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	3332      	adds	r3, #50	; 0x32
 8002e52:	4a2a      	ldr	r2, [pc, #168]	; (8002efc <UART_SetConfig+0x38c>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e5e:	441e      	add	r6, r3
 8002e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e62:	4618      	mov	r0, r3
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	1894      	adds	r4, r2, r2
 8002e6e:	603c      	str	r4, [r7, #0]
 8002e70:	415b      	adcs	r3, r3
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e78:	1812      	adds	r2, r2, r0
 8002e7a:	eb41 0303 	adc.w	r3, r1, r3
 8002e7e:	f04f 0400 	mov.w	r4, #0
 8002e82:	f04f 0500 	mov.w	r5, #0
 8002e86:	00dd      	lsls	r5, r3, #3
 8002e88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e8c:	00d4      	lsls	r4, r2, #3
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	eb12 0a00 	adds.w	sl, r2, r0
 8002e96:	eb43 0b01 	adc.w	fp, r3, r1
 8002e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	008b      	lsls	r3, r1, #2
 8002eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002eb2:	0082      	lsls	r2, r0, #2
 8002eb4:	4650      	mov	r0, sl
 8002eb6:	4659      	mov	r1, fp
 8002eb8:	f7fd f98e 	bl	80001d8 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <UART_SetConfig+0x38c>)
 8002ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2164      	movs	r1, #100	; 0x64
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	3332      	adds	r3, #50	; 0x32
 8002ed4:	4a09      	ldr	r2, [pc, #36]	; (8002efc <UART_SetConfig+0x38c>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	f003 020f 	and.w	r2, r3, #15
 8002ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4432      	add	r2, r6
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	377c      	adds	r7, #124	; 0x7c
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40011000 	.word	0x40011000
 8002ef8:	40011400 	.word	0x40011400
 8002efc:	51eb851f 	.word	0x51eb851f

08002f00 <__libc_init_array>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	4d0d      	ldr	r5, [pc, #52]	; (8002f38 <__libc_init_array+0x38>)
 8002f04:	4c0d      	ldr	r4, [pc, #52]	; (8002f3c <__libc_init_array+0x3c>)
 8002f06:	1b64      	subs	r4, r4, r5
 8002f08:	10a4      	asrs	r4, r4, #2
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	42a6      	cmp	r6, r4
 8002f0e:	d109      	bne.n	8002f24 <__libc_init_array+0x24>
 8002f10:	4d0b      	ldr	r5, [pc, #44]	; (8002f40 <__libc_init_array+0x40>)
 8002f12:	4c0c      	ldr	r4, [pc, #48]	; (8002f44 <__libc_init_array+0x44>)
 8002f14:	f000 f820 	bl	8002f58 <_init>
 8002f18:	1b64      	subs	r4, r4, r5
 8002f1a:	10a4      	asrs	r4, r4, #2
 8002f1c:	2600      	movs	r6, #0
 8002f1e:	42a6      	cmp	r6, r4
 8002f20:	d105      	bne.n	8002f2e <__libc_init_array+0x2e>
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f28:	4798      	blx	r3
 8002f2a:	3601      	adds	r6, #1
 8002f2c:	e7ee      	b.n	8002f0c <__libc_init_array+0xc>
 8002f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f32:	4798      	blx	r3
 8002f34:	3601      	adds	r6, #1
 8002f36:	e7f2      	b.n	8002f1e <__libc_init_array+0x1e>
 8002f38:	08002fd8 	.word	0x08002fd8
 8002f3c:	08002fd8 	.word	0x08002fd8
 8002f40:	08002fd8 	.word	0x08002fd8
 8002f44:	08002fe0 	.word	0x08002fe0

08002f48 <memset>:
 8002f48:	4402      	add	r2, r0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d100      	bne.n	8002f52 <memset+0xa>
 8002f50:	4770      	bx	lr
 8002f52:	f803 1b01 	strb.w	r1, [r3], #1
 8002f56:	e7f9      	b.n	8002f4c <memset+0x4>

08002f58 <_init>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr

08002f64 <_fini>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr
